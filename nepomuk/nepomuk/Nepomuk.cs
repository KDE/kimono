//Auto-generated by kalyptus. DO NOT EDIT.
namespace Nepomuk {
    using Kimono;
    using System;
    using Qyoto;
    using System.Collections.Generic;
    public enum ErrorCode {
        NoError = 0,
        CommunicationError = 1,
        InvalidType = 2,
        UnknownError = 3,
    }
    /// <remarks>
    ///  Export a %Nepomuk service.
    ///  \param classname The name of the Nepomuk.Service subclass to export.
    ///  \param libname The name of the library which should export the service.
    ///  </remarks>        <short>    Export a %Nepomuk service.</short>
    [SmokeClass("Nepomuk")]
    public class Global {
        private static SmokeInvocation staticInterceptor = null;
        static Global() {
            staticInterceptor = new SmokeInvocation(typeof(Global), null);
        }
        /// <remarks>
        ///  \return A human-readble string.
        ///      </remarks>        <short>    \return A human-readble string.</short>
        public static string ErrorString(Nepomuk.ErrorCode code) {
            return (string) staticInterceptor.Invoke("errorString$", "errorString(Nepomuk::ErrorCode)", typeof(string), typeof(Nepomuk.ErrorCode), code);
        }
        /// <remarks>
        ///  Used internally by Resource.
        ///  Converts a Variant into a literal value to be used in the RDF store.
        ///  Uses the language set in the current KDE session.
        ///      </remarks>        <short>    Used internally by Resource.</short>
        public static List<Soprano.Node> ValuesToRDFNodes(Nepomuk.Variant arg1) {
            return (List<Soprano.Node>) staticInterceptor.Invoke("valuesToRDFNodes#", "valuesToRDFNodes(const Nepomuk::Variant&)", typeof(List<Soprano.Node>), typeof(Nepomuk.Variant), arg1);
        }
        public static Soprano.Node ValueToRDFNode(Nepomuk.Variant arg1) {
            return (Soprano.Node) staticInterceptor.Invoke("valueToRDFNode#", "valueToRDFNode(const Nepomuk::Variant&)", typeof(Soprano.Node), typeof(Nepomuk.Variant), arg1);
        }
        /// <remarks>
        ///  Used internally by Resource.
        ///  Converts a literal value from the RDF store into a Variant.
        ///      </remarks>        <short>    Used internally by Resource.</short>
        public static Nepomuk.Variant RDFLiteralToValue(Soprano.Node node) {
            return (Nepomuk.Variant) staticInterceptor.Invoke("RDFLiteralToValue#", "RDFLiteralToValue(const Soprano::Node&)", typeof(Nepomuk.Variant), typeof(Soprano.Node), node);
        }
    }
}
