//Auto-generated by kalyptus. DO NOT EDIT.
namespace Akonadi {
    using Kimono;
    using System;
    using Qyoto;
    /// <remarks>
    ///  This job copies a single collection into a specified target collection.
    ///  @code
    ///  Akonadi.Collection source = ...
    ///  Akonadi.Collection target = ...
    ///  Akonadi.CollectionCopyJob job = new Akonadi.CollectionCopyJob( source, target );
    ///  if ( job.Exec() )
    ///    qDebug() << "Copied successfully";
    ///  else
    ///    qDebug() << "Error occurred";
    ///  @endcode
    /// </remarks>        <author> Volker Krause <vkrause@kde.org>
    ///  </author>
    ///         <short> Job that copies a collection into another collection in the Akonadi storage. </short>
    [SmokeClass("Akonadi::CollectionCopyJob")]
    public class CollectionCopyJob : Akonadi.Job {
        protected CollectionCopyJob(Type dummy) : base((Type) null) {}
        protected new void CreateProxy() {
            interceptor = new SmokeInvocation(typeof(CollectionCopyJob), this);
        }
        /// <remarks>
        ///  Creates a new collection copy job to copy the given <code>source</code> collection into <code>target.</code>
        /// <param> name="source" The collection to copy.
        /// </param><param> name="target" The target collection.
        /// </param><param> name="parent" The parent object.
        ///      </param></remarks>        <short>    Creates a new collection copy job to copy the given <code>source</code> collection into <code>target.</code></short>
        public CollectionCopyJob(Akonadi.Collection source, Akonadi.Collection target, QObject parent) : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("CollectionCopyJob###", "CollectionCopyJob(const Akonadi::Collection&, const Akonadi::Collection&, QObject*)", typeof(void), typeof(Akonadi.Collection), source, typeof(Akonadi.Collection), target, typeof(QObject), parent);
        }
        public CollectionCopyJob(Akonadi.Collection source, Akonadi.Collection target) : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("CollectionCopyJob##", "CollectionCopyJob(const Akonadi::Collection&, const Akonadi::Collection&)", typeof(void), typeof(Akonadi.Collection), source, typeof(Akonadi.Collection), target);
        }
        [SmokeMethod("doStart()")]
        protected override void DoStart() {
            interceptor.Invoke("doStart", "doStart()", typeof(void));
        }
        protected new ICollectionCopyJobSignals Emit {
            get { return (ICollectionCopyJobSignals) Q_EMIT; }
        }
    }

    public interface ICollectionCopyJobSignals : Akonadi.IJobSignals {
    }
}
