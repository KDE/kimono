//Auto-generated by kalyptus. DO NOT EDIT.
namespace Akonadi {
    using Kimono;
    using System;
    using Qyoto;
    /// <remarks>
    ///  This job takes an item and moves it to a collection in the Akonadi storage.
    ///  @code
    ///  Akonadi.Item item = ...
    ///  Akonadi.Collection collection = Akonadi.Collection.Root();
    ///  Akonadi.ItemMoveJob job = new Akonadi.ItemMoveJob( item, collection );
    ///  if ( job.Exec() )
    ///    qDebug() << "Item moved successfully";
    ///  else
    ///    qDebug() << "Error occurred";
    ///  @endcode
    /// </remarks>        <author> Volker Krause <vkrause@kde.org>
    ///  </author>
    ///         <short> Job that moves an item into a different collection in the Akonadi storage. </short>
    [SmokeClass("Akonadi::ItemMoveJob")]
    public class ItemMoveJob : Akonadi.Job, IDisposable {
        protected ItemMoveJob(Type dummy) : base((Type) null) {}
        protected new void CreateProxy() {
            interceptor = new SmokeInvocation(typeof(ItemMoveJob), this);
        }
        /// <remarks>
        ///  Move the given item into the given collection.
        /// <param> name="item" The item to move.
        /// </param><param> name="target" The target collection.
        /// </param><param> name="parent" The parent object.
        ///      </param></remarks>        <short>    Move the given item into the given collection.</short>
        public ItemMoveJob(Akonadi.Item item, Akonadi.Collection target, QObject parent) : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("ItemMoveJob###", "ItemMoveJob(const Akonadi::Item&, const Akonadi::Collection&, QObject*)", typeof(void), typeof(Akonadi.Item), item, typeof(Akonadi.Collection), target, typeof(QObject), parent);
        }
        public ItemMoveJob(Akonadi.Item item, Akonadi.Collection target) : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("ItemMoveJob##", "ItemMoveJob(const Akonadi::Item&, const Akonadi::Collection&)", typeof(void), typeof(Akonadi.Item), item, typeof(Akonadi.Collection), target);
        }
        [SmokeMethod("doStart()")]
        protected override void DoStart() {
            interceptor.Invoke("doStart", "doStart()", typeof(void));
        }
        ~ItemMoveJob() {
            interceptor.Invoke("~ItemMoveJob", "~ItemMoveJob()", typeof(void));
        }
        public new void Dispose() {
            interceptor.Invoke("~ItemMoveJob", "~ItemMoveJob()", typeof(void));
        }
        protected new IItemMoveJobSignals Emit {
            get { return (IItemMoveJobSignals) Q_EMIT; }
        }
    }

    public interface IItemMoveJobSignals : Akonadi.IJobSignals {
    }
}
