//Auto-generated by kalyptus. DO NOT EDIT.
namespace Akonadi {
    using Kimono;
    using System;
    using Qyoto;
    /// <remarks>
    ///  This job creates a new collection with all the set properties.
    ///  You have to use setParentCollection() to define the collection, the
    ///  new collection shall be located in.
    ///  @code
    ///  // create a new top-level collection
    ///  Akonadi.Collection collection;
    ///  collection.setParent( Collection.Root() );
    ///  collection.setName( "Events" );
    ///  collection.setContentMimeTypes( List<string>( "text/calendar" ) );
    ///  Akonadi.CollectionCreateJob job = new Akonadi.CollectionCreateJob( collection );
    ///  if ( job.Exec() )
    ///    qDebug() << "Created successfully";
    ///  else
    ///    qDebug() << "Error occurred";
    ///  @endcode
    /// </remarks>        <author> Volker Krause <vkrause@kde.org>
    ///  </author>
    ///         <short> Job that creates a new collection in the Akonadi storage. </short>
    [SmokeClass("Akonadi::CollectionCreateJob")]
    public class CollectionCreateJob : Akonadi.Job, IDisposable {
        protected CollectionCreateJob(Type dummy) : base((Type) null) {}
        protected new void CreateProxy() {
            interceptor = new SmokeInvocation(typeof(CollectionCreateJob), this);
        }
        /// <remarks>
        ///  Creates a new collection create job.
        /// <param> name="collection" The new collection.
        /// </param><param> name="parent" The parent object.
        ///      </param></remarks>        <short>    Creates a new collection create job.</short>
        public CollectionCreateJob(Akonadi.Collection collection, QObject parent) : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("CollectionCreateJob##", "CollectionCreateJob(const Akonadi::Collection&, QObject*)", typeof(void), typeof(Akonadi.Collection), collection, typeof(QObject), parent);
        }
        public CollectionCreateJob(Akonadi.Collection collection) : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("CollectionCreateJob#", "CollectionCreateJob(const Akonadi::Collection&)", typeof(void), typeof(Akonadi.Collection), collection);
        }
        /// <remarks>
        ///  Returns the created collection if the job was executed succesfull.
        ///      </remarks>        <short>    Returns the created collection if the job was executed succesfull.</short>
        public Akonadi.Collection Collection() {
            return (Akonadi.Collection) interceptor.Invoke("collection", "collection() const", typeof(Akonadi.Collection));
        }
        [SmokeMethod("doStart()")]
        protected override void DoStart() {
            interceptor.Invoke("doStart", "doStart()", typeof(void));
        }
        [SmokeMethod("doHandleResponse(const QByteArray&, const QByteArray&)")]
        protected override void DoHandleResponse(QByteArray tag, QByteArray data) {
            interceptor.Invoke("doHandleResponse##", "doHandleResponse(const QByteArray&, const QByteArray&)", typeof(void), typeof(QByteArray), tag, typeof(QByteArray), data);
        }
        ~CollectionCreateJob() {
            interceptor.Invoke("~CollectionCreateJob", "~CollectionCreateJob()", typeof(void));
        }
        public new void Dispose() {
            interceptor.Invoke("~CollectionCreateJob", "~CollectionCreateJob()", typeof(void));
        }
        protected new ICollectionCreateJobSignals Emit {
            get { return (ICollectionCreateJobSignals) Q_EMIT; }
        }
    }

    public interface ICollectionCreateJobSignals : Akonadi.IJobSignals {
    }
}
