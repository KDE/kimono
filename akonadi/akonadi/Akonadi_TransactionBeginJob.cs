//Auto-generated by kalyptus. DO NOT EDIT.
namespace Akonadi {
    using Kimono;
    using System;
    using Qyoto;
    /// <remarks>
    ///  Sometimes you want to execute a sequence of commands in
    ///  an atomic way, so that either all commands or none shall
    ///  be executed. The TransactionBeginJob, TransactionCommitJob and
    ///  TransactionRollbackJob provide these functionality for the
    ///  Akonadi Job classes.
    ///  @note This will only have an effect when used as a subjob or with a Session.
    /// </remarks>        <author> Volker Krause <vkrause@kde.org>
    ///  </author>
    ///         <short> Job that begins a session-global transaction. </short>
    [SmokeClass("Akonadi::TransactionBeginJob")]
    public class TransactionBeginJob : Akonadi.Job, IDisposable {
        protected TransactionBeginJob(Type dummy) : base((Type) null) {}
        protected new void CreateProxy() {
            interceptor = new SmokeInvocation(typeof(TransactionBeginJob), this);
        }
        /// <remarks>
        ///  Creates a new transaction begin job.
        /// <param> name="parent" The parent job or Session, must not be 0.
        ///      </param></remarks>        <short>    Creates a new transaction begin job.</short>
        public TransactionBeginJob(QObject parent) : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("TransactionBeginJob#", "TransactionBeginJob(QObject*)", typeof(void), typeof(QObject), parent);
        }
        [SmokeMethod("doStart()")]
        protected override void DoStart() {
            interceptor.Invoke("doStart", "doStart()", typeof(void));
        }
        ~TransactionBeginJob() {
            interceptor.Invoke("~TransactionBeginJob", "~TransactionBeginJob()", typeof(void));
        }
        public new void Dispose() {
            interceptor.Invoke("~TransactionBeginJob", "~TransactionBeginJob()", typeof(void));
        }
        protected new ITransactionBeginJobSignals Emit {
            get { return (ITransactionBeginJobSignals) Q_EMIT; }
        }
    }

    public interface ITransactionBeginJobSignals : Akonadi.IJobSignals {
    }
}
