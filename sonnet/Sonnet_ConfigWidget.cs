//Auto-generated by kalyptus. DO NOT EDIT.
namespace Sonnet {
    using Kimono;
    using System;
    using Qyoto;
    /// <remarks> See <see cref="IConfigWidgetSignals"></see> for signals emitted by ConfigWidget
    /// </remarks>
    [SmokeClass("Sonnet::ConfigWidget")]
    public class ConfigWidget : QWidget, IDisposable {
        protected ConfigWidget(Type dummy) : base((Type) null) {}
        protected new void CreateProxy() {
            interceptor = new SmokeInvocation(typeof(ConfigWidget), this);
        }
        public ConfigWidget(KConfig config, QWidget parent) : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("ConfigWidget##", "ConfigWidget(KConfig*, QWidget*)", typeof(void), typeof(KConfig), config, typeof(QWidget), parent);
        }
        public bool BackgroundCheckingButtonShown() {
            return (bool) interceptor.Invoke("backgroundCheckingButtonShown", "backgroundCheckingButtonShown() const", typeof(bool));
        }
        /// <remarks>
        ///  Sets the language/dictionary that will be selected by default
        ///  in this config widget.
        ///  This overrides the setting in the config file.
        /// <param> name="language" the language which will be selected by default.
        /// </param></remarks>        <short>    Sets the language/dictionary that will be selected by default  in this config widget.</short>
        public void SetLanguage(string language) {
            interceptor.Invoke("setLanguage$", "setLanguage(const QString&)", typeof(void), typeof(string), language);
        }
        /// <remarks>
        ///  Get the currently selected language for spell checking.  Returns an empty string if
        ///  kdelibs was built without any spellchecking plugins.
        /// </remarks>        <return> the language currently selected in the language combobox
        /// </return>
        ///         <short>    Get the currently selected language for spell checking.</short>
        public string Language() {
            return (string) interceptor.Invoke("language", "language() const", typeof(string));
        }
        [Q_SLOT("void save()")]
        public void Save() {
            interceptor.Invoke("save", "save()", typeof(void));
        }
        [Q_SLOT("void setBackgroundCheckingButtonShown(bool)")]
        public void SetBackgroundCheckingButtonShown(bool arg1) {
            interceptor.Invoke("setBackgroundCheckingButtonShown$", "setBackgroundCheckingButtonShown(bool)", typeof(void), typeof(bool), arg1);
        }
        [Q_SLOT("void slotDefault()")]
        public void SlotDefault() {
            interceptor.Invoke("slotDefault", "slotDefault()", typeof(void));
        }
        [Q_SLOT("void slotChanged()")]
        protected void SlotChanged() {
            interceptor.Invoke("slotChanged", "slotChanged()", typeof(void));
        }
        ~ConfigWidget() {
            interceptor.Invoke("~ConfigWidget", "~ConfigWidget()", typeof(void));
        }
        public new void Dispose() {
            interceptor.Invoke("~ConfigWidget", "~ConfigWidget()", typeof(void));
        }
        protected new IConfigWidgetSignals Emit {
            get { return (IConfigWidgetSignals) Q_EMIT; }
        }
    }

    public interface IConfigWidgetSignals : IQWidgetSignals {
        /// <remarks>
        ///  Signal sends when config was changed
        /// </remarks>        <short>    Signal sends when config was changed </short>
        [Q_SIGNAL("void configChanged()")]
        void ConfigChanged();
    }
}
