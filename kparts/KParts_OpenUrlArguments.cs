//Auto-generated by kalyptus. DO NOT EDIT.
namespace KParts {
    using Kimono;
    using System;
    using Qyoto;
    using System.Collections.Generic;
    /// <remarks>
    ///  OpenUrlArguments is the set of arguments that specify
    ///  how a URL should be opened by KParts.ReadOnlyPart.OpenUrl().
    ///  For instance reload() indicates that the url should be loaded
    ///  from the network even if it matches the current url of the part.
    ///  All setter methods in this class are for the class that calls openUrl
    ///  (usually the hosting application), all the getter methods are for the part.
    ///  </remarks>        <short>    OpenUrlArguments is the set of arguments that specify  how a URL should be opened by KParts.ReadOnlyPart.OpenUrl().</short>
    [SmokeClass("KParts::OpenUrlArguments")]
    public class OpenUrlArguments : Object, IDisposable {
        protected SmokeInvocation interceptor = null;
        private IntPtr smokeObject;
        protected OpenUrlArguments(Type dummy) {}
        protected void CreateProxy() {
            interceptor = new SmokeInvocation(typeof(OpenUrlArguments), this);
        }
        public OpenUrlArguments() : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("OpenUrlArguments", "OpenUrlArguments()", typeof(void));
        }
        public OpenUrlArguments(KParts.OpenUrlArguments other) : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("OpenUrlArguments#", "OpenUrlArguments(const KParts::OpenUrlArguments&)", typeof(void), typeof(KParts.OpenUrlArguments), other);
        }
        /// <remarks>
        /// </remarks>        <return> true to indicate that the part should reload the URL,
        ///  i.e. the cache shouldn't be used (forced reload).
        ///      </return>
        ///         <short>   </short>
        public bool Reload() {
            return (bool) interceptor.Invoke("reload", "reload() const", typeof(bool));
        }
        /// <remarks>
        ///  Indicates that the url should be loaded
        ///  from the network even if it matches the current url of the part.
        ///      </remarks>        <short>    Indicates that the url should be loaded  from the network even if it matches the current url of the part.</short>
        public void SetReload(bool b) {
            interceptor.Invoke("setReload$", "setReload(bool)", typeof(void), typeof(bool), b);
        }
        /// <remarks>
        ///  xOffset is the horizontal scrolling of the part's widget
        ///  (in case it's a scrollview). This is saved into the history
        ///  and restored when going back in the history.
        ///      </remarks>        <short>    xOffset is the horizontal scrolling of the part's widget  (in case it's a scrollview).</short>
        public int XOffset() {
            return (int) interceptor.Invoke("xOffset", "xOffset() const", typeof(int));
        }
        public void SetXOffset(int x) {
            interceptor.Invoke("setXOffset$", "setXOffset(int)", typeof(void), typeof(int), x);
        }
        /// <remarks>
        ///  yOffset is the horizontal scrolling of the part's widget
        ///  (in case it's a scrollview). This is saved into the history
        ///  and restored when going back in the history.
        ///      </remarks>        <short>    yOffset is the horizontal scrolling of the part's widget  (in case it's a scrollview).</short>
        public int YOffset() {
            return (int) interceptor.Invoke("yOffset", "yOffset() const", typeof(int));
        }
        public void SetYOffset(int y) {
            interceptor.Invoke("setYOffset$", "setYOffset(int)", typeof(void), typeof(int), y);
        }
        /// <remarks>
        ///  The mimetype to use when opening the url, when known by the calling application.
        ///      </remarks>        <short>    The mimetype to use when opening the url, when known by the calling application.</short>
        public string MimeType() {
            return (string) interceptor.Invoke("mimeType", "mimeType() const", typeof(string));
        }
        public void SetMimeType(string mime) {
            interceptor.Invoke("setMimeType$", "setMimeType(const QString&)", typeof(void), typeof(string), mime);
        }
        /// <remarks>
        ///  True if the user requested that the URL be opened.
        ///  False if the URL should be opened due to an external event, like javascript popups
        ///  or automatic redirections.
        ///  This is true by default
        /// </remarks>        <short>    True if the user requested that the URL be opened.</short>
        public bool ActionRequestedByUser() {
            return (bool) interceptor.Invoke("actionRequestedByUser", "actionRequestedByUser() const", typeof(bool));
        }
        public void SetActionRequestedByUser(bool userRequested) {
            interceptor.Invoke("setActionRequestedByUser$", "setActionRequestedByUser(bool)", typeof(void), typeof(bool), userRequested);
        }
        /// <remarks>
        ///  Meta-data to associate with the KIO operation that will be used to open the URL.
        ///  This method can be used to add or retrieve metadata.
        /// </remarks>        <short>    Meta-data to associate with the KIO operation that will be used to open the URL.</short>
        ///         <see> TransferJob</see>
        ///         <see> etc.</see>
        public Dictionary<string, string> MetaData() {
            return (Dictionary<string, string>) interceptor.Invoke("metaData", "metaData()", typeof(Dictionary<string, string>));
        }
        ~OpenUrlArguments() {
            interceptor.Invoke("~OpenUrlArguments", "~OpenUrlArguments()", typeof(void));
        }
        public void Dispose() {
            interceptor.Invoke("~OpenUrlArguments", "~OpenUrlArguments()", typeof(void));
        }
    }
}
