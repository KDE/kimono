//Auto-generated by kalyptus. DO NOT EDIT.
namespace KParts {
    using Kimono;
    using System;
    using Qyoto;
    using System.Text;
    using System.Collections.Generic;
    /// <remarks>
    ///  An extension class for LiveConnect, i.e. a call from JavaScript
    ///  from a HTML page which embeds this part.
    ///  A part can have an object hierarchie by using objid as a reference
    ///  to an object.
    ///  </remarks>        <short>    An extension class for LiveConnect, i.</short>
    [SmokeClass("KParts::LiveConnectExtension")]
    public class LiveConnectExtension : QObject, IDisposable {
        protected LiveConnectExtension(Type dummy) : base((Type) null) {}
        protected new void CreateProxy() {
            interceptor = new SmokeInvocation(typeof(LiveConnectExtension), this);
        }
        private static SmokeInvocation staticInterceptor = null;
        static LiveConnectExtension() {
            staticInterceptor = new SmokeInvocation(typeof(LiveConnectExtension), null);
        }
        public enum TypeOf {
            TypeVoid = 0,
            TypeBool = 1,
            TypeFunction = 2,
            TypeNumber = 3,
            TypeObject = 4,
            TypeString = 5,
        }
        public LiveConnectExtension(KParts.ReadOnlyPart parent) : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("LiveConnectExtension#", "LiveConnectExtension(KParts::ReadOnlyPart*)", typeof(void), typeof(KParts.ReadOnlyPart), parent);
        }
        /// <remarks>
        ///  get a field value from objid, return true on success
        ///    </remarks>        <short>    get a field value from objid, return true on success    </short>
        [SmokeMethod("get(const unsigned long, const QString&, KParts::LiveConnectExtension::Type&, unsigned long&, QString&)")]
        public virtual bool Get(ulong objid, string field, KParts.LiveConnectExtension.TypeOf type, ulong retobjid, StringBuilder value) {
            return (bool) interceptor.Invoke("get$$$$$", "get(const unsigned long, const QString&, KParts::LiveConnectExtension::Type&, unsigned long&, QString&)", typeof(bool), typeof(ulong), objid, typeof(string), field, typeof(KParts.LiveConnectExtension.TypeOf), type, typeof(ulong), retobjid, typeof(StringBuilder), value);
        }
        /// <remarks>
        ///  put a field value in objid, return true on success
        ///    </remarks>        <short>    put a field value in objid, return true on success    </short>
        [SmokeMethod("put(const unsigned long, const QString&, const QString&)")]
        public virtual bool Put(ulong objid, string field, string value) {
            return (bool) interceptor.Invoke("put$$$", "put(const unsigned long, const QString&, const QString&)", typeof(bool), typeof(ulong), objid, typeof(string), field, typeof(string), value);
        }
        /// <remarks>
        ///  calls a function of objid, return true on success
        ///    </remarks>        <short>    calls a function of objid, return true on success    </short>
        [SmokeMethod("call(const unsigned long, const QString&, const QStringList&, KParts::LiveConnectExtension::Type&, unsigned long&, QString&)")]
        public virtual bool Call(ulong objid, string func, List<string> args, KParts.LiveConnectExtension.TypeOf type, ulong retobjid, StringBuilder value) {
            return (bool) interceptor.Invoke("call$$?$$$", "call(const unsigned long, const QString&, const QStringList&, KParts::LiveConnectExtension::Type&, unsigned long&, QString&)", typeof(bool), typeof(ulong), objid, typeof(string), func, typeof(List<string>), args, typeof(KParts.LiveConnectExtension.TypeOf), type, typeof(ulong), retobjid, typeof(StringBuilder), value);
        }
        /// <remarks>
        ///  notifies the part that there is no reference anymore to objid
        ///    </remarks>        <short>    notifies the part that there is no reference anymore to objid    </short>
        [SmokeMethod("unregister(const unsigned long)")]
        public virtual void Unregister(ulong objid) {
            interceptor.Invoke("unregister$", "unregister(const unsigned long)", typeof(void), typeof(ulong), objid);
        }
        /// <remarks>
        ///  notify a event from the part of object objid
        ///    </remarks>        <short>    notify a event from the part of object objid    </short>
        public void PartEvent(ulong objid, string arg2, List<QPair<string, KParts.LiveConnectExtension.TypeOf>> args) {
            interceptor.Invoke("partEvent$$?", "partEvent(const unsigned long, const QString&, const QList<QPair<KParts::LiveConnectExtension::Type, QString> >&)", typeof(void), typeof(ulong), objid, typeof(string), arg2, typeof(List<QPair<string, KParts.LiveConnectExtension.TypeOf>>), args);
        }
        ~LiveConnectExtension() {
            interceptor.Invoke("~LiveConnectExtension", "~LiveConnectExtension()", typeof(void));
        }
        public new void Dispose() {
            interceptor.Invoke("~LiveConnectExtension", "~LiveConnectExtension()", typeof(void));
        }
        public static KParts.LiveConnectExtension ChildObject(QObject arg1) {
            return (KParts.LiveConnectExtension) staticInterceptor.Invoke("childObject#", "childObject(QObject*)", typeof(KParts.LiveConnectExtension), typeof(QObject), arg1);
        }
        protected new ILiveConnectExtensionSignals Emit {
            get { return (ILiveConnectExtensionSignals) Q_EMIT; }
        }
    }

    public interface ILiveConnectExtensionSignals : IQObjectSignals {
    }
}
