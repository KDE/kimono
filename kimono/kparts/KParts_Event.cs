//Auto-generated by kalyptus. DO NOT EDIT.
namespace KParts {
    using Kimono;
    using System;
    using Qyoto;
    /// <remarks>
    ///  Base class for all KParts events.
    ///  </remarks>        <short>    Base class for all KParts events.</short>
    [SmokeClass("KParts::Event")]
    public class Event : QEvent, IDisposable {
        protected Event(Type dummy) : base((Type) null) {}
        protected new void CreateProxy() {
            interceptor = new SmokeInvocation(typeof(Event), this);
        }
        private static SmokeInvocation staticInterceptor = null;
        static Event() {
            staticInterceptor = new SmokeInvocation(typeof(Event), null);
        }
        public Event(string eventName) : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("Event$", "Event(const char*)", typeof(void), typeof(string), eventName);
        }
        [SmokeMethod("eventName() const")]
        public virtual string EventName() {
            return (string) interceptor.Invoke("eventName", "eventName() const", typeof(string));
        }
        ~Event() {
            interceptor.Invoke("~Event", "~Event()", typeof(void));
        }
        public new void Dispose() {
            interceptor.Invoke("~Event", "~Event()", typeof(void));
        }
        public static bool Test(QEvent arg1) {
            return (bool) staticInterceptor.Invoke("test#", "test(const QEvent*)", typeof(bool), typeof(QEvent), arg1);
        }
        public static bool Test(QEvent arg1, string name) {
            return (bool) staticInterceptor.Invoke("test#$", "test(const QEvent*, const char*)", typeof(bool), typeof(QEvent), arg1, typeof(string), name);
        }
    }
}
