//Auto-generated by kalyptus. DO NOT EDIT.
namespace KIO {
    using Kimono;
    using System;
    using Qyoto;
    [SmokeClass("KIO::CopyInfo")]
    public class CopyInfo : Object, IDisposable {
        protected SmokeInvocation interceptor = null;
        private IntPtr smokeObject;
        protected CopyInfo(Type dummy) {}
        protected void CreateProxy() {
            interceptor = new SmokeInvocation(typeof(CopyInfo), this);
        }
        public KUrl USource {
            get { return (KUrl) interceptor.Invoke("uSource", "uSource()", typeof(KUrl)); }
            set { interceptor.Invoke("setUSource#", "setUSource(KUrl)", typeof(void), typeof(KUrl), value); }
        }
        public KUrl UDest {
            get { return (KUrl) interceptor.Invoke("uDest", "uDest()", typeof(KUrl)); }
            set { interceptor.Invoke("setUDest#", "setUDest(KUrl)", typeof(void), typeof(KUrl), value); }
        }
        public string LinkDest {
            get { return (string) interceptor.Invoke("linkDest", "linkDest()", typeof(string)); }
            set { interceptor.Invoke("setLinkDest$", "setLinkDest(QString)", typeof(void), typeof(string), value); }
        }
        public int Permissions {
            get { return (int) interceptor.Invoke("permissions", "permissions()", typeof(int)); }
            set { interceptor.Invoke("setPermissions$", "setPermissions(int)", typeof(void), typeof(int), value); }
        }
        public int Ctime {
            get { return (int) interceptor.Invoke("ctime", "ctime()", typeof(int)); }
            set { interceptor.Invoke("setCtime$", "setCtime(time_t)", typeof(void), typeof(int), value); }
        }
        public int Mtime {
            get { return (int) interceptor.Invoke("mtime", "mtime()", typeof(int)); }
            set { interceptor.Invoke("setMtime$", "setMtime(time_t)", typeof(void), typeof(int), value); }
        }
        public long Size {
            get { return (long) interceptor.Invoke("size", "size()", typeof(long)); }
            set { interceptor.Invoke("setSize$", "setSize(KIO::filesize_t)", typeof(void), typeof(long), value); }
        }
        public CopyInfo() : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("CopyInfo", "CopyInfo()", typeof(void));
        }
        ~CopyInfo() {
            interceptor.Invoke("~CopyInfo", "~CopyInfo()", typeof(void));
        }
        public void Dispose() {
            interceptor.Invoke("~CopyInfo", "~CopyInfo()", typeof(void));
        }
    }
}
