//Auto-generated by kalyptus. DO NOT EDIT.
namespace KIO {
    using Kimono;
    using System;
    using Qyoto;
    using System.Text;
    using System.Collections.Generic;
    /// <remarks>
    ///  A UI delegate tuned to be used with KIO Jobs.
    ///  </remarks>        <short>    A UI delegate tuned to be used with KIO Jobs.</short>
    [SmokeClass("KIO::JobUiDelegate")]
    public class JobUiDelegate : KDialogJobUiDelegate, IDisposable {
        protected JobUiDelegate(Type dummy) : base((Type) null) {}
        protected new void CreateProxy() {
            interceptor = new SmokeInvocation(typeof(JobUiDelegate), this);
        }
        /// <remarks>
        ///  The type of deletion: real deletion, or moving the files to the trash
        ///  Used by askDeleteConfirmation.
        ///      </remarks>        <short>    The type of deletion: real deletion, or moving the files to the trash  Used by askDeleteConfirmation.</short>
        public enum DeletionType {
            Delete = 0,
            Trash = 1,
        }
        /// <remarks>
        ///  ForceConfirmation: always ask the user for confirmation
        ///  DefaultConfirmation: don't ask the user if he/she said "don't ask again".
        ///  Used by askDeleteConfirmation.
        ///      </remarks>        <short>    ForceConfirmation: always ask the user for confirmation  DefaultConfirmation: don't ask the user if he/she said "don't ask again".</short>
        public enum ConfirmationType {
            DefaultConfirmation = 0,
            ForceConfirmation = 1,
        }
        /// <remarks>
        ///  Constructs a new KIO Job UI delegate.
        ///      </remarks>        <short>    Constructs a new KIO Job UI delegate.</short>
        public JobUiDelegate() : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("JobUiDelegate", "JobUiDelegate()", typeof(void));
        }
        /// <remarks>
        ///  Associate this job with a window given by <code>window.</code>
        /// <param> name="window" the window to associate to
        /// </param></remarks>        <short>    Associate this job with a window given by <code>window.</code></short>
        ///         <see> window</see>
        [SmokeMethod("setWindow(QWidget*)")]
        public override void SetWindow(QWidget window) {
            interceptor.Invoke("setWindow#", "setWindow(QWidget*)", typeof(void), typeof(QWidget), window);
        }
        /// <remarks>
        ///  <see cref="KIO.RenameDialog"></see>
        ///  Construct a modal, parent-less "rename" dialog, and return
        ///  a result code, as well as the new dest. Much easier to use than the
        ///  class RenameDialog directly.
        /// <param> name="caption" the caption for the dialog box
        /// </param><param> name="src" the URL of the file/dir we're trying to copy, as it's part of the text message
        /// </param><param> name="dest" the URL of the destination file/dir, i.e. the one that already exists
        /// </param><param> name="mode" parameters for the dialog (which buttons to show...),
        ///              see RenameDialog_Mode
        /// </param><param> name="newDestPath" the new destination path, valid if R_RENAME was returned.
        /// </param><param> name="sizeSrc" size of source file
        /// </param><param> name="sizeDest" size of destination file
        /// </param><param> name="ctimeSrc" creation time of source file
        /// </param><param> name="ctimeDest" creation time of destination file
        /// </param><param> name="mtimeSrc" modification time of source file
        /// </param><param> name="mtimeDest" modification time of destination file
        /// </param></remarks>        <return> the result
        ///      </return>
        ///         <short>    <see cref="KIO.RenameDialog"></see>  Construct a modal, parent-less "rename" dialog, and return  a result code, as well as the new dest.</short>
        [SmokeMethod("askFileRename(KJob*, const QString&, const QString&, const QString&, KIO::RenameDialog_Mode, QString&, KIO::filesize_t, KIO::filesize_t, time_t, time_t, time_t, time_t)")]
        public virtual KIO.RenameDialog_Result AskFileRename(KJob job, string caption, string src, string dest, KIO.RenameDialog_Mode mode, StringBuilder newDest, long sizeSrc, long sizeDest, int ctimeSrc, int ctimeDest, int mtimeSrc, int mtimeDest) {
            return (KIO.RenameDialog_Result) interceptor.Invoke("askFileRename#$$$$$$$$$$$", "askFileRename(KJob*, const QString&, const QString&, const QString&, KIO::RenameDialog_Mode, QString&, KIO::filesize_t, KIO::filesize_t, time_t, time_t, time_t, time_t)", typeof(KIO.RenameDialog_Result), typeof(KJob), job, typeof(string), caption, typeof(string), src, typeof(string), dest, typeof(KIO.RenameDialog_Mode), mode, typeof(StringBuilder), newDest, typeof(long), sizeSrc, typeof(long), sizeDest, typeof(int), ctimeSrc, typeof(int), ctimeDest, typeof(int), mtimeSrc, typeof(int), mtimeDest);
        }
        [SmokeMethod("askFileRename(KJob*, const QString&, const QString&, const QString&, KIO::RenameDialog_Mode, QString&, KIO::filesize_t, KIO::filesize_t, time_t, time_t, time_t)")]
        public virtual KIO.RenameDialog_Result AskFileRename(KJob job, string caption, string src, string dest, KIO.RenameDialog_Mode mode, StringBuilder newDest, long sizeSrc, long sizeDest, int ctimeSrc, int ctimeDest, int mtimeSrc) {
            return (KIO.RenameDialog_Result) interceptor.Invoke("askFileRename#$$$$$$$$$$", "askFileRename(KJob*, const QString&, const QString&, const QString&, KIO::RenameDialog_Mode, QString&, KIO::filesize_t, KIO::filesize_t, time_t, time_t, time_t)", typeof(KIO.RenameDialog_Result), typeof(KJob), job, typeof(string), caption, typeof(string), src, typeof(string), dest, typeof(KIO.RenameDialog_Mode), mode, typeof(StringBuilder), newDest, typeof(long), sizeSrc, typeof(long), sizeDest, typeof(int), ctimeSrc, typeof(int), ctimeDest, typeof(int), mtimeSrc);
        }
        [SmokeMethod("askFileRename(KJob*, const QString&, const QString&, const QString&, KIO::RenameDialog_Mode, QString&, KIO::filesize_t, KIO::filesize_t, time_t, time_t)")]
        public virtual KIO.RenameDialog_Result AskFileRename(KJob job, string caption, string src, string dest, KIO.RenameDialog_Mode mode, StringBuilder newDest, long sizeSrc, long sizeDest, int ctimeSrc, int ctimeDest) {
            return (KIO.RenameDialog_Result) interceptor.Invoke("askFileRename#$$$$$$$$$", "askFileRename(KJob*, const QString&, const QString&, const QString&, KIO::RenameDialog_Mode, QString&, KIO::filesize_t, KIO::filesize_t, time_t, time_t)", typeof(KIO.RenameDialog_Result), typeof(KJob), job, typeof(string), caption, typeof(string), src, typeof(string), dest, typeof(KIO.RenameDialog_Mode), mode, typeof(StringBuilder), newDest, typeof(long), sizeSrc, typeof(long), sizeDest, typeof(int), ctimeSrc, typeof(int), ctimeDest);
        }
        [SmokeMethod("askFileRename(KJob*, const QString&, const QString&, const QString&, KIO::RenameDialog_Mode, QString&, KIO::filesize_t, KIO::filesize_t, time_t)")]
        public virtual KIO.RenameDialog_Result AskFileRename(KJob job, string caption, string src, string dest, KIO.RenameDialog_Mode mode, StringBuilder newDest, long sizeSrc, long sizeDest, int ctimeSrc) {
            return (KIO.RenameDialog_Result) interceptor.Invoke("askFileRename#$$$$$$$$", "askFileRename(KJob*, const QString&, const QString&, const QString&, KIO::RenameDialog_Mode, QString&, KIO::filesize_t, KIO::filesize_t, time_t)", typeof(KIO.RenameDialog_Result), typeof(KJob), job, typeof(string), caption, typeof(string), src, typeof(string), dest, typeof(KIO.RenameDialog_Mode), mode, typeof(StringBuilder), newDest, typeof(long), sizeSrc, typeof(long), sizeDest, typeof(int), ctimeSrc);
        }
        [SmokeMethod("askFileRename(KJob*, const QString&, const QString&, const QString&, KIO::RenameDialog_Mode, QString&, KIO::filesize_t, KIO::filesize_t)")]
        public virtual KIO.RenameDialog_Result AskFileRename(KJob job, string caption, string src, string dest, KIO.RenameDialog_Mode mode, StringBuilder newDest, long sizeSrc, long sizeDest) {
            return (KIO.RenameDialog_Result) interceptor.Invoke("askFileRename#$$$$$$$", "askFileRename(KJob*, const QString&, const QString&, const QString&, KIO::RenameDialog_Mode, QString&, KIO::filesize_t, KIO::filesize_t)", typeof(KIO.RenameDialog_Result), typeof(KJob), job, typeof(string), caption, typeof(string), src, typeof(string), dest, typeof(KIO.RenameDialog_Mode), mode, typeof(StringBuilder), newDest, typeof(long), sizeSrc, typeof(long), sizeDest);
        }
        [SmokeMethod("askFileRename(KJob*, const QString&, const QString&, const QString&, KIO::RenameDialog_Mode, QString&, KIO::filesize_t)")]
        public virtual KIO.RenameDialog_Result AskFileRename(KJob job, string caption, string src, string dest, KIO.RenameDialog_Mode mode, StringBuilder newDest, long sizeSrc) {
            return (KIO.RenameDialog_Result) interceptor.Invoke("askFileRename#$$$$$$", "askFileRename(KJob*, const QString&, const QString&, const QString&, KIO::RenameDialog_Mode, QString&, KIO::filesize_t)", typeof(KIO.RenameDialog_Result), typeof(KJob), job, typeof(string), caption, typeof(string), src, typeof(string), dest, typeof(KIO.RenameDialog_Mode), mode, typeof(StringBuilder), newDest, typeof(long), sizeSrc);
        }
        [SmokeMethod("askFileRename(KJob*, const QString&, const QString&, const QString&, KIO::RenameDialog_Mode, QString&)")]
        public virtual KIO.RenameDialog_Result AskFileRename(KJob job, string caption, string src, string dest, KIO.RenameDialog_Mode mode, StringBuilder newDest) {
            return (KIO.RenameDialog_Result) interceptor.Invoke("askFileRename#$$$$$", "askFileRename(KJob*, const QString&, const QString&, const QString&, KIO::RenameDialog_Mode, QString&)", typeof(KIO.RenameDialog_Result), typeof(KJob), job, typeof(string), caption, typeof(string), src, typeof(string), dest, typeof(KIO.RenameDialog_Mode), mode, typeof(StringBuilder), newDest);
        }
        /// <remarks>
        ///  See skipdialog.h
        ///      </remarks>        <short>   </short>
        [SmokeMethod("askSkip(KJob*, bool, const QString&)")]
        public virtual KIO.SkipDialog_Result AskSkip(KJob job, bool multi, string error_text) {
            return (KIO.SkipDialog_Result) interceptor.Invoke("askSkip#$$", "askSkip(KJob*, bool, const QString&)", typeof(KIO.SkipDialog_Result), typeof(KJob), job, typeof(bool), multi, typeof(string), error_text);
        }
        /// <remarks>
        ///  Ask for confirmation before deleting/trashing <code>urls.</code>
        ///  Note that this method is not called automatically by KIO jobs. It's the application's
        ///  responsibility to ask the user for confirmation before calling KIO.Del() or KIO.Trash().
        /// <param> name="urls" the urls about to be deleted/trashed
        /// </param><param> name="method" the type of deletion (Delete for real deletion, Trash otherwise)
        /// </param><param> name="confirmation" see ConfirmationType. Normally set to DefaultConfirmation.
        ///  Note: the window passed to setWindow is used as the parent for the message box.
        /// </param></remarks>        <return> true if confirmed
        ///      </return>
        ///         <short>    Ask for confirmation before deleting/trashing <code>urls.</code></short>
        public bool AskDeleteConfirmation(List<KUrl> urls, KIO.JobUiDelegate.DeletionType deletionType, KIO.JobUiDelegate.ConfirmationType confirmationType) {
            return (bool) interceptor.Invoke("askDeleteConfirmation?$$", "askDeleteConfirmation(const KUrl::List&, KIO::JobUiDelegate::DeletionType, KIO::JobUiDelegate::ConfirmationType)", typeof(bool), typeof(List<KUrl>), urls, typeof(KIO.JobUiDelegate.DeletionType), deletionType, typeof(KIO.JobUiDelegate.ConfirmationType), confirmationType);
        }
        ~JobUiDelegate() {
            interceptor.Invoke("~JobUiDelegate", "~JobUiDelegate()", typeof(void));
        }
        public new void Dispose() {
            interceptor.Invoke("~JobUiDelegate", "~JobUiDelegate()", typeof(void));
        }
        protected new IJobUiDelegateSignals Emit {
            get { return (IJobUiDelegateSignals) Q_EMIT; }
        }
    }

    public interface IJobUiDelegateSignals : IKDialogJobUiDelegateSignals {
    }
}
