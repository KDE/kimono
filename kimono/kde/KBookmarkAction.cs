//Auto-generated by kalyptus. DO NOT EDIT.
namespace Kimono {
    using System;
    using Qyoto;
    /// <remarks>
    ///  This class is a KAction for bookmarks.
    ///  It provides a nice constructor.
    ///  And on triggered uses the owner to open the bookmark.
    ///  </remarks>        <short>     This class is a KAction for bookmarks.</short>
    [SmokeClass("KBookmarkAction")]
    public class KBookmarkAction : KAction, IKBookmarkAction, IDisposable {
        protected KBookmarkAction(Type dummy) : base((Type) null) {}
        protected new void CreateProxy() {
            interceptor = new SmokeInvocation(typeof(KBookmarkAction), this);
        }
        public KBookmarkAction(KBookmark bk, KBookmarkOwner owner, QObject parent) : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("KBookmarkAction###", "KBookmarkAction(const KBookmark&, KBookmarkOwner*, QObject*)", typeof(void), typeof(KBookmark), bk, typeof(KBookmarkOwner), owner, typeof(QObject), parent);
        }
        [Q_SLOT("void slotSelected(Qt::MouseButtons, Qt::KeyboardModifiers)")]
        public void SlotSelected(uint mb, uint km) {
            interceptor.Invoke("slotSelected$$", "slotSelected(Qt::MouseButtons, Qt::KeyboardModifiers)", typeof(void), typeof(uint), mb, typeof(uint), km);
        }
        ~KBookmarkAction() {
            interceptor.Invoke("~KBookmarkAction", "~KBookmarkAction()", typeof(void));
        }
        public void Dispose() {
            interceptor.Invoke("~KBookmarkAction", "~KBookmarkAction()", typeof(void));
        }
        public KBookmark Bookmark() {
            return (KBookmark) interceptor.Invoke("bookmark", "bookmark() const", typeof(KBookmark));
        }
        protected new IKBookmarkActionSignals Emit {
            get { return (IKBookmarkActionSignals) Q_EMIT; }
        }
    }

    public interface IKBookmarkActionSignals : IKActionSignals {
    }
}
