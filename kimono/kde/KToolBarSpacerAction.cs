//Auto-generated by kalyptus. DO NOT EDIT.
namespace Kimono {
    using System;
    using Qyoto;
    /// <remarks>
    ///  An extension to KAction which allows for adding a spacer item into a
    ///  QToolBar / KToolBar.
    ///  Use this as the replacement for the old KToolBar.AlignItemRight().
    /// </remarks>        <author> Hamish Rodda <rodda@kde.org>
    ///  </author>
    ///         <short>    An extension to KAction which allows for adding a spacer item into a  QToolBar / KToolBar.</short>
    [SmokeClass("KToolBarSpacerAction")]
    public class KToolBarSpacerAction : KAction, IDisposable {
        protected KToolBarSpacerAction(Type dummy) : base((Type) null) {}
        protected new void CreateProxy() {
            interceptor = new SmokeInvocation(typeof(KToolBarSpacerAction), this);
        }
        [Q_PROPERTY("int", "width")]
        public int Width {
            get { return (int) interceptor.Invoke("width", "width()", typeof(int)); }
            set { interceptor.Invoke("setWidth$", "setWidth(int)", typeof(void), typeof(int), value); }
        }
        [Q_PROPERTY("int", "minimumWidth")]
        public int MinimumWidth {
            get { return (int) interceptor.Invoke("minimumWidth", "minimumWidth()", typeof(int)); }
            set { interceptor.Invoke("setMinimumWidth$", "setMinimumWidth(int)", typeof(void), typeof(int), value); }
        }
        [Q_PROPERTY("int", "maximumWidth")]
        public int MaximumWidth {
            get { return (int) interceptor.Invoke("maximumWidth", "maximumWidth()", typeof(int)); }
            set { interceptor.Invoke("setMaximumWidth$", "setMaximumWidth(int)", typeof(void), typeof(int), value); }
        }
        /// <remarks>
        ///  Creates a new toolbar spacer action.
        /// <param> name="parent" The action's parent object.
        ///      </param></remarks>        <short>    Creates a new toolbar spacer action.</short>
        public KToolBarSpacerAction(QObject parent) : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("KToolBarSpacerAction#", "KToolBarSpacerAction(QObject*)", typeof(void), typeof(QObject), parent);
        }
        /// <remarks>
        ///  Reimplemented from @see QActionWidgetFactory.
        ///      </remarks>        <short>    Reimplemented from @see QActionWidgetFactory.</short>
        [SmokeMethod("createWidget(QWidget*)")]
        public new virtual QWidget CreateWidget(QWidget parent) {
            return (QWidget) interceptor.Invoke("createWidget#", "createWidget(QWidget*)", typeof(QWidget), typeof(QWidget), parent);
        }
        /// <remarks>
        ///  Reimplemented from @see QWidgetAction.
        ///      </remarks>        <short>    Reimplemented from @see QWidgetAction.</short>
        [SmokeMethod("deleteWidget(QWidget*)")]
        public new virtual void DeleteWidget(QWidget widget) {
            interceptor.Invoke("deleteWidget#", "deleteWidget(QWidget*)", typeof(void), typeof(QWidget), widget);
        }
        ~KToolBarSpacerAction() {
            interceptor.Invoke("~KToolBarSpacerAction", "~KToolBarSpacerAction()", typeof(void));
        }
        public new void Dispose() {
            interceptor.Invoke("~KToolBarSpacerAction", "~KToolBarSpacerAction()", typeof(void));
        }
        protected new IKToolBarSpacerActionSignals Emit {
            get { return (IKToolBarSpacerActionSignals) Q_EMIT; }
        }
    }

    public interface IKToolBarSpacerActionSignals : IKActionSignals {
    }
}
