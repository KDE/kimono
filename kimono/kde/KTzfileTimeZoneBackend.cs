//Auto-generated by kalyptus. DO NOT EDIT.
namespace Kimono {
    using System;
    using Qyoto;
    /// <remarks>
    ///  Backend class for KTzfileTimeZone class.
    ///  This class implements KTzfileTimeZone's constructors and methods. A
    ///  backend class is required for all classes inherited from KTimeZone to
    ///  allow KTimeZone methods to work together with reference counting of
    ///  private data.
    /// </remarks>        <author> David Jarvie <djarvie@kde.org>.
    ///  </author>
    ///         <short> Backend class for KTzfileTimeZone class.</short>
    ///         <see> KTimeZoneBackend</see>
    ///         <see> KTzfileTimeZone</see>
    ///         <see> KTimeZone</see>
    ///         <see> @ingroup</see>
    ///         <see> timezones</see>
    [SmokeClass("KTzfileTimeZoneBackend")]
    public class KTzfileTimeZoneBackend : KTimeZoneBackend, IDisposable {
        protected KTzfileTimeZoneBackend(Type dummy) : base((Type) null) {}
        protected new void CreateProxy() {
            interceptor = new SmokeInvocation(typeof(KTzfileTimeZoneBackend), this);
        }
        /// <remarks> Implements KTzfileTimeZone.KTzfileTimeZone(). </remarks>        <short>   Implements KTzfileTimeZone.KTzfileTimeZone().</short>
        public KTzfileTimeZoneBackend(KTzfileTimeZoneSource source, string name, string countryCode, float latitude, float longitude, string comment) : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("KTzfileTimeZoneBackend#$$$$$", "KTzfileTimeZoneBackend(KTzfileTimeZoneSource*, const QString&, const QString&, float, float, const QString&)", typeof(void), typeof(KTzfileTimeZoneSource), source, typeof(string), name, typeof(string), countryCode, typeof(float), latitude, typeof(float), longitude, typeof(string), comment);
        }
        /// <remarks>
        ///  Creates a copy of this instance.
        /// </remarks>        <return> new copy
        ///      </return>
        ///         <short>    Creates a copy of this instance.</short>
        [SmokeMethod("clone() const")]
        public override KTimeZoneBackend Clone() {
            return (KTimeZoneBackend) interceptor.Invoke("clone", "clone() const", typeof(KTimeZoneBackend));
        }
        /// <remarks>
        ///  Returns the class name of the data represented by this instance.
        /// </remarks>        <return> "KTzfileTimeZone"
        ///      </return>
        ///         <short>    Returns the class name of the data represented by this instance.</short>
        [SmokeMethod("type() const")]
        public override QByteArray type() {
            return (QByteArray) interceptor.Invoke("type", "type() const", typeof(QByteArray));
        }
        /// <remarks>
        ///  Implements KTzfileTimeZone.HasTransitions().
        ///  Returns whether daylight saving transitions are available for the time zone.
        /// <param> name="caller" calling KTzfileTimeZone object
        /// </param></remarks>        <return> @c true
        ///      </return>
        ///         <short>    Implements KTzfileTimeZone.HasTransitions().</short>
        [SmokeMethod("hasTransitions(const KTimeZone*) const")]
        public override bool HasTransitions(KTimeZone caller) {
            return (bool) interceptor.Invoke("hasTransitions#", "hasTransitions(const KTimeZone*) const", typeof(bool), typeof(KTimeZone), caller);
        }
        ~KTzfileTimeZoneBackend() {
            interceptor.Invoke("~KTzfileTimeZoneBackend", "~KTzfileTimeZoneBackend()", typeof(void));
        }
        public new void Dispose() {
            interceptor.Invoke("~KTzfileTimeZoneBackend", "~KTzfileTimeZoneBackend()", typeof(void));
        }
    }
}
