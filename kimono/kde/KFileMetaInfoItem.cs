//Auto-generated by kalyptus. DO NOT EDIT.
namespace Kimono {
    using System;
    using Qyoto;
    [SmokeClass("KFileMetaInfoItem")]
    public class KFileMetaInfoItem : Object, IDisposable {
        protected SmokeInvocation interceptor = null;
        private IntPtr smokeObject;
        protected KFileMetaInfoItem(Type dummy) {}
        protected void CreateProxy() {
            interceptor = new SmokeInvocation(typeof(KFileMetaInfoItem), this);
        }
        // const PredicateProperties& properties(); >>>> NOT CONVERTED
        /// <remarks>
        ///  @brief Default constructor
        /// </remarks>        <short>    @brief Default constructor </short>
        public KFileMetaInfoItem() : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("KFileMetaInfoItem", "KFileMetaInfoItem()", typeof(void));
        }
        /// <remarks>
        ///  @brief Copy constructor
        /// </remarks>        <short>    @brief Copy constructor </short>
        public KFileMetaInfoItem(KFileMetaInfoItem item) : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("KFileMetaInfoItem#", "KFileMetaInfoItem(const KFileMetaInfoItem&)", typeof(void), typeof(KFileMetaInfoItem), item);
        }
        /// <remarks>
        ///  @brief Can this item be edited.
        /// </remarks>        <short>    @brief Can this item be edited.</short>
        public bool IsEditable() {
            return (bool) interceptor.Invoke("isEditable", "isEditable() const", typeof(bool));
        }
        /// <remarks>
        ///  @brief Has this value been removed, e.g with setValue(QVarian())
        /// </remarks>        <short>    @brief Has this value been removed, e.</short>
        public bool IsRemoved() {
            return (bool) interceptor.Invoke("isRemoved", "isRemoved() const", typeof(bool));
        }
        /// <remarks>
        ///  @brief Can this item be removed.
        /// </remarks>        <short>    @brief Can this item be removed.</short>
        public bool IsModified() {
            return (bool) interceptor.Invoke("isModified", "isModified() const", typeof(bool));
        }
        /// <remarks>
        ///  @brief Has this value been skipped by analyzer due to performance or other considerations.
        /// </remarks>        <short>    @brief Has this value been skipped by analyzer due to performance or other considerations.</short>
        public bool IsSkipped() {
            return (bool) interceptor.Invoke("isSkipped", "isSkipped() const", typeof(bool));
        }
        /// <remarks>
        ///  @brief Retrieve the current value of this item
        /// </remarks>        <short>    @brief Retrieve the current value of this item </short>
        public QVariant Value() {
            return (QVariant) interceptor.Invoke("value", "value() const", typeof(QVariant));
        }
        /// <remarks>
        ///  @brief Set the value of this field.
        /// </remarks>        <short>    @brief Set the value of this field.</short>
        public bool SetValue(QVariant value) {
            return (bool) interceptor.Invoke("setValue#", "setValue(const QVariant&)", typeof(bool), typeof(QVariant), value);
        }
        /// <remarks>
        ///  @brief Append a value to the properties in this file.
        /// </remarks>        <short>    @brief Append a value to the properties in this file.</short>
        public bool AddValue(QVariant arg1) {
            return (bool) interceptor.Invoke("addValue#", "addValue(const QVariant&)", typeof(bool), typeof(QVariant), arg1);
        }
        /// <remarks>
        ///  @brief Is this a valid item.
        /// </remarks>        <short>    @brief Is this a valid item.</short>
        public bool IsValid() {
            return (bool) interceptor.Invoke("isValid", "isValid() const", typeof(bool));
        }
        /// <remarks>
        ///  @brief Retrieve the properties of this field type.
        /// </remarks>        <short>    @brief Retrieve the properties of this field type.</short>
        /// <remarks>
        ///  Localized name of the predicate.
        ///  Convenience function for properties().name();
        /// </remarks>        <short>    Localized name of the predicate.</short>
        public string Name() {
            return (string) interceptor.Invoke("name", "name() const", typeof(string));
        }
        /// <remarks>
        ///  This method returns a translated suffix to be displayed after the
        ///  value. Think of the kbps in 128kbps
        /// </remarks>        <return> the suffix
        ///      </return>
        ///         <short>    This method returns a translated suffix to be displayed after the  value.</short>
        public string Suffix() {
            return (string) interceptor.Invoke("suffix", "suffix() const", typeof(string));
        }
        /// <remarks>
        ///  This method returns a translated prefix to be displayed before the
        ///  value.
        /// </remarks>        <return> the prefix
        ///      </return>
        ///         <short>    This method returns a translated prefix to be displayed before the  value.</short>
        public string Prefix() {
            return (string) interceptor.Invoke("prefix", "prefix() const", typeof(string));
        }
        ~KFileMetaInfoItem() {
            interceptor.Invoke("~KFileMetaInfoItem", "~KFileMetaInfoItem()", typeof(void));
        }
        public void Dispose() {
            interceptor.Invoke("~KFileMetaInfoItem", "~KFileMetaInfoItem()", typeof(void));
        }
    }
}
