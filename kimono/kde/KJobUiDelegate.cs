//Auto-generated by kalyptus. DO NOT EDIT.
namespace Kimono {
    using System;
    using Qyoto;
    /// <remarks>
    ///  The base class for all KJob UI delegate.
    ///  An UI delegate is responsible for tracking the progress and the
    ///  events of a job and provides a UI for them (a dialog with a
    ///  progress bar, text on the standard output, an error message
    ///  box etc.).
    /// </remarks>        <short>    The base class for all KJob UI delegate.</short>
    ///         <see> KJob</see>
    [SmokeClass("KJobUiDelegate")]
    public class KJobUiDelegate : QObject, IDisposable {
        protected KJobUiDelegate(Type dummy) : base((Type) null) {}
        protected new void CreateProxy() {
            interceptor = new SmokeInvocation(typeof(KJobUiDelegate), this);
        }
        /// <remarks>
        ///  Constructs a new KJobUiDelegate.
        ///      </remarks>        <short>    Constructs a new KJobUiDelegate.</short>
        public KJobUiDelegate() : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("KJobUiDelegate", "KJobUiDelegate()", typeof(void));
        }
        /// <remarks>
        ///  Display a dialog box to inform the user of the error given by
        ///  this job.
        ///  Only call if error is not 0, and only in the slot connected
        ///  to result.
        ///      </remarks>        <short>    Display a dialog box to inform the user of the error given by  this job.</short>
        [SmokeMethod("showErrorMessage()")]
        public virtual void ShowErrorMessage() {
            interceptor.Invoke("showErrorMessage", "showErrorMessage()", typeof(void));
        }
        /// <remarks>
        ///  Enable or disable the automatic error handling. When automatic
        ///  error handling is enabled and an error occurs, then showErrorDialog()
        ///  is called, right before the emission of the result signal.
        ///  The default is false.
        ///  See also isAutoErrorHandlingEnabled , showErrorDialog
        /// <param> name="enable" enable or disable automatic error handling
        /// </param></remarks>        <short>    Enable or disable the automatic error handling.</short>
        ///         <see> isAutoErrorHandlingEnabled</see>
        public void SetAutoErrorHandlingEnabled(bool enable) {
            interceptor.Invoke("setAutoErrorHandlingEnabled$", "setAutoErrorHandlingEnabled(bool)", typeof(void), typeof(bool), enable);
        }
        /// <remarks>
        ///  Returns whether automatic error handling is enabled or disabled.
        ///  See also setAutoErrorHandlingEnabled .
        /// </remarks>        <return> true if automatic error handling is enabled
        /// </return>
        ///         <short>    Returns whether automatic error handling is enabled or disabled.</short>
        ///         <see> setAutoErrorHandlingEnabled</see>
        public bool IsAutoErrorHandlingEnabled() {
            return (bool) interceptor.Invoke("isAutoErrorHandlingEnabled", "isAutoErrorHandlingEnabled() const", typeof(bool));
        }
        /// <remarks>
        ///  Enable or disable the automatic warning handling. When automatic
        ///  warning handling is enabled and an error occurs, then a message box
        ///  is displayed with the warning message
        ///  The default is true.
        ///  See also isAutoWarningHandlingEnabled , showErrorDialog
        /// <param> name="enable" enable or disable automatic warning handling
        /// </param></remarks>        <short>    Enable or disable the automatic warning handling.</short>
        ///         <see> isAutoWarningHandlingEnabled</see>
        public void SetAutoWarningHandlingEnabled(bool enable) {
            interceptor.Invoke("setAutoWarningHandlingEnabled$", "setAutoWarningHandlingEnabled(bool)", typeof(void), typeof(bool), enable);
        }
        /// <remarks>
        ///  Returns whether automatic warning handling is enabled or disabled.
        ///  See also setAutoWarningHandlingEnabled .
        /// </remarks>        <return> true if automatic warning handling is enabled
        /// </return>
        ///         <short>    Returns whether automatic warning handling is enabled or disabled.</short>
        ///         <see> setAutoWarningHandlingEnabled</see>
        public bool IsAutoWarningHandlingEnabled() {
            return (bool) interceptor.Invoke("isAutoWarningHandlingEnabled", "isAutoWarningHandlingEnabled() const", typeof(bool));
        }
        /// <remarks>
        ///  Retrieves the current job this UI delegate is attached to.
        /// </remarks>        <return> current job this UI delegate is attached to, or 0 if
        ///  this UI delegate is not tracking any job
        ///      </return>
        ///         <short>    Retrieves the current job this UI delegate is attached to.</short>
        protected KJob Job() {
            return (KJob) interceptor.Invoke("job", "job()", typeof(KJob));
        }
        [Q_SLOT("void slotWarning(KJob*, QString, QString)")]
        [SmokeMethod("slotWarning(KJob*, const QString&, const QString&)")]
        protected virtual void SlotWarning(KJob job, string plain, string rich) {
            interceptor.Invoke("slotWarning#$$", "slotWarning(KJob*, const QString&, const QString&)", typeof(void), typeof(KJob), job, typeof(string), plain, typeof(string), rich);
        }
        ~KJobUiDelegate() {
            interceptor.Invoke("~KJobUiDelegate", "~KJobUiDelegate()", typeof(void));
        }
        public new void Dispose() {
            interceptor.Invoke("~KJobUiDelegate", "~KJobUiDelegate()", typeof(void));
        }
        protected new IKJobUiDelegateSignals Emit {
            get { return (IKJobUiDelegateSignals) Q_EMIT; }
        }
    }

    public interface IKJobUiDelegateSignals : IQObjectSignals {
    }
}
