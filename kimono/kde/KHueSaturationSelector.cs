//Auto-generated by kalyptus. DO NOT EDIT.
namespace Kimono {
    using System;
    using Qyoto;
    [SmokeClass("KHueSaturationSelector")]
    public class KHueSaturationSelector : KXYSelector, IDisposable {
        protected KHueSaturationSelector(Type dummy) : base((Type) null) {}
        protected new void CreateProxy() {
            interceptor = new SmokeInvocation(typeof(KHueSaturationSelector), this);
        }
        // void setChooserMode(KColorChooserMode arg1); >>>> NOT CONVERTED
        // KColorChooserMode chooserMode(); >>>> NOT CONVERTED
        /// <remarks>
        ///  Constructs a hue/saturation selection widget.
        ///      </remarks>        <short>    Constructs a hue/saturation selection widget.</short>
        public KHueSaturationSelector(QWidget parent) : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("KHueSaturationSelector#", "KHueSaturationSelector(QWidget*)", typeof(void), typeof(QWidget), parent);
        }
        public KHueSaturationSelector() : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("KHueSaturationSelector", "KHueSaturationSelector()", typeof(void));
        }
        /// <remarks>
        ///  Sets the chooser mode. The allowed modes are defined
        ///  in KColorChooserMode.
        /// <param> name="The" chooser mode as defined in KColorChooserMode
        ///      </param></remarks>        <short>    Sets the chooser mode.</short>
        /// <remarks>
        ///  Returns the chooser mode.
        /// </remarks>        <return> The chooser mode (defined in KColorChooserMode)
        ///      </return>
        ///         <short>    Returns the chooser mode.</short>
        /// <remarks>
        ///  Returns the hue value
        /// </remarks>        <return> The hue value (0-360)
        ///      </return>
        ///         <short>    Returns the hue value </short>
        public int Hue() {
            return (int) interceptor.Invoke("hue", "hue() const", typeof(int));
        }
        /// <remarks>
        ///  Sets the hue value (0-360)
        /// <param> name="hue" The hue value (0-360)
        ///      </param></remarks>        <short>    Sets the hue value (0-360) </short>
        public void SetHue(int hue) {
            interceptor.Invoke("setHue$", "setHue(int)", typeof(void), typeof(int), hue);
        }
        /// <remarks>
        ///  Returns the saturation (0-255)
        /// </remarks>        <return> The saturation (0-255)
        ///      </return>
        ///         <short>    Returns the saturation (0-255) </short>
        public int Saturation() {
            return (int) interceptor.Invoke("saturation", "saturation() const", typeof(int));
        }
        /// <remarks>
        ///  Sets the saturation (0-255)
        /// <param> name="saturation" The saturation (0-255)
        ///      </param></remarks>        <short>    Sets the saturation (0-255) </short>
        public void SetSaturation(int saturation) {
            interceptor.Invoke("setSaturation$", "setSaturation(int)", typeof(void), typeof(int), saturation);
        }
        /// <remarks>
        ///  Returns the color value (also known as lumniousity, 0-255)
        /// </remarks>        <return> The color value (0-255)
        ///      </return>
        ///         <short>    Returns the color value (also known as lumniousity, 0-255) </short>
        public int ColorValue() {
            return (int) interceptor.Invoke("colorValue", "colorValue() const", typeof(int));
        }
        /// <remarks>
        ///  Sets the color value (0-255)
        /// <param> name="colorValue" The color value (0-255)
        ///      </param></remarks>        <short>    Sets the color value (0-255) </short>
        public void SetColorValue(int colorValue) {
            interceptor.Invoke("setColorValue$", "setColorValue(int)", typeof(void), typeof(int), colorValue);
        }
        /// <remarks>
        ///  Updates the contents
        ///      </remarks>        <short>    Updates the contents      </short>
        public void UpdateContents() {
            interceptor.Invoke("updateContents", "updateContents()", typeof(void));
        }
        /// <remarks>
        ///  Draws the contents of the widget on a pixmap,
        ///  which is used for buffering.
        ///      </remarks>        <short>    Draws the contents of the widget on a pixmap,  which is used for buffering.</short>
        [SmokeMethod("drawPalette(QPixmap*)")]
        protected virtual void DrawPalette(QPixmap pixmap) {
            interceptor.Invoke("drawPalette#", "drawPalette(QPixmap*)", typeof(void), typeof(QPixmap), pixmap);
        }
        [SmokeMethod("resizeEvent(QResizeEvent*)")]
        protected override void ResizeEvent(QResizeEvent arg1) {
            interceptor.Invoke("resizeEvent#", "resizeEvent(QResizeEvent*)", typeof(void), typeof(QResizeEvent), arg1);
        }
        /// <remarks>
        ///  Reimplemented from KXYSelector. This drawing is
        ///  buffered in a pixmap here. As real drawing
        ///  routine, drawPalette() is used.
        ///      </remarks>        <short>    Reimplemented from KXYSelector.</short>
        [SmokeMethod("drawContents(QPainter*)")]
        protected override void DrawContents(QPainter painter) {
            interceptor.Invoke("drawContents#", "drawContents(QPainter*)", typeof(void), typeof(QPainter), painter);
        }
        ~KHueSaturationSelector() {
            interceptor.Invoke("~KHueSaturationSelector", "~KHueSaturationSelector()", typeof(void));
        }
        public new void Dispose() {
            interceptor.Invoke("~KHueSaturationSelector", "~KHueSaturationSelector()", typeof(void));
        }
        protected new IKHueSaturationSelectorSignals Emit {
            get { return (IKHueSaturationSelectorSignals) Q_EMIT; }
        }
    }

    public interface IKHueSaturationSelectorSignals : IKXYSelectorSignals {
    }
}
