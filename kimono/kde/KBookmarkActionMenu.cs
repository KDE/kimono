//Auto-generated by kalyptus. DO NOT EDIT.
namespace Kimono {
    using System;
    using Qyoto;
    /// <remarks>
    ///  A wrapper around KActionMenu to provide a nice constructor for bookmark groups.
    ///  </remarks>        <short>     A wrapper around KActionMenu to provide a nice constructor for bookmark groups.</short>
    [SmokeClass("KBookmarkActionMenu")]
    public class KBookmarkActionMenu : KActionMenu, IKBookmarkAction, IDisposable {
        protected KBookmarkActionMenu(Type dummy) : base((Type) null) {}
        protected new void CreateProxy() {
            interceptor = new SmokeInvocation(typeof(KBookmarkActionMenu), this);
        }
        public KBookmarkActionMenu(KBookmark bm, QObject parent) : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("KBookmarkActionMenu##", "KBookmarkActionMenu(const KBookmark&, QObject*)", typeof(void), typeof(KBookmark), bm, typeof(QObject), parent);
        }
        public KBookmarkActionMenu(KBookmark bm, string text, QObject parent) : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("KBookmarkActionMenu#$#", "KBookmarkActionMenu(const KBookmark&, const QString&, QObject*)", typeof(void), typeof(KBookmark), bm, typeof(string), text, typeof(QObject), parent);
        }
        ~KBookmarkActionMenu() {
            interceptor.Invoke("~KBookmarkActionMenu", "~KBookmarkActionMenu()", typeof(void));
        }
        public void Dispose() {
            interceptor.Invoke("~KBookmarkActionMenu", "~KBookmarkActionMenu()", typeof(void));
        }
        public KBookmark Bookmark() {
            return (KBookmark) interceptor.Invoke("bookmark", "bookmark() const", typeof(KBookmark));
        }
        protected new IKBookmarkActionMenuSignals Emit {
            get { return (IKBookmarkActionMenuSignals) Q_EMIT; }
        }
    }

    public interface IKBookmarkActionMenuSignals : IKActionMenuSignals {
    }
}
