//Auto-generated by kalyptus. DO NOT EDIT.
namespace Kimono {
    using System;
    using Qyoto;
    /// <remarks>
    ///  A group of functions providing macro expansion (substitution) in strings,
    ///  optionally with quoting appropriate for shell execution.
    ///  </remarks>        <short>    A group of functions providing macro expansion (substitution) in strings,  optionally with quoting appropriate for shell execution.</short>
    [SmokeClass("KMacroExpander")]
    public class KMacroExpander {
        // QString expandMacros(const QString& arg1,const QHash<QChar, QString>& arg2,QChar arg3); >>>> NOT CONVERTED
        // QString expandMacros(const QString& arg1,const QHash<QChar, QString>& arg2); >>>> NOT CONVERTED
        // QString expandMacrosShellQuote(const QString& arg1,const QHash<QChar, QString>& arg2,QChar arg3); >>>> NOT CONVERTED
        // QString expandMacrosShellQuote(const QString& arg1,const QHash<QChar, QString>& arg2); >>>> NOT CONVERTED
        // QString expandMacros(const QString& arg1,const QHash<QString, QString>& arg2,QChar arg3); >>>> NOT CONVERTED
        // QString expandMacros(const QString& arg1,const QHash<QString, QString>& arg2); >>>> NOT CONVERTED
        // QString expandMacrosShellQuote(const QString& arg1,const QHash<QString, QString>& arg2,QChar arg3); >>>> NOT CONVERTED
        // QString expandMacrosShellQuote(const QString& arg1,const QHash<QString, QString>& arg2); >>>> NOT CONVERTED
        // QString expandMacros(const QString& arg1,const QHash<QChar, QStringList>& arg2,QChar arg3); >>>> NOT CONVERTED
        // QString expandMacros(const QString& arg1,const QHash<QChar, QStringList>& arg2); >>>> NOT CONVERTED
        // QString expandMacros(const QString& arg1,const QHash<QString, QStringList>& arg2,QChar arg3); >>>> NOT CONVERTED
        // QString expandMacros(const QString& arg1,const QHash<QString, QStringList>& arg2); >>>> NOT CONVERTED
        // QString expandMacrosShellQuote(const QString& arg1,const QHash<QChar, QStringList>& arg2,QChar arg3); >>>> NOT CONVERTED
        // QString expandMacrosShellQuote(const QString& arg1,const QHash<QChar, QStringList>& arg2); >>>> NOT CONVERTED
        // QString expandMacrosShellQuote(const QString& arg1,const QHash<QString, QStringList>& arg2,QChar arg3); >>>> NOT CONVERTED
        // QString expandMacrosShellQuote(const QString& arg1,const QHash<QString, QStringList>& arg2); >>>> NOT CONVERTED
        /// <remarks>
        ///  Perform safe macro expansion (substitution) on a string.
        ///  The escape char must be quoted with itself to obtain its literal
        ///  representation in the resulting string.
        /// <param> name="str" The string to expand
        /// </param><param> name="map" map with substitutions
        /// </param><param> name="c" escape char indicating start of macro, or QChar.Null if none
        /// </param> <pre>
        ///  // Code example
        ///  QHash<QChar,string> map;
        ///  map.insert('u', "/tmp/myfile.txt");
        ///  map.insert('n', "My File");
        ///  string s = "%% Title: %u:%n";
        ///  s = KMacroExpander.ExpandMacros(s, map);
        ///  // s is now "% Title: /tmp/myfile.txt:My File";
        ///  </pre>
        ///      </remarks>        <return> the string with all valid macros expanded
        /// </return>
        ///         <short>    Perform safe macro expansion (substitution) on a string.</short>
        /// <remarks>
        ///  Perform safe macro expansion (substitution) on a string for use
        ///  in shell commands.
        ///  The escape char must be quoted with itself to obtain its literal
        ///  representation in the resulting string.
        /// <param> name="str" The string to expand
        /// </param><param> name="map" map with substitutions
        /// </param><param> name="c" escape char indicating start of macro, or QChar.Null if none
        /// </param> <pre>
        ///  // Code example
        ///  QHash<QChar,string> map;
        ///  map.insert('u', "/tmp/myfile.txt");
        ///  map.insert('n', "My File");
        ///  string s = "kedit --caption %n %u";
        ///  s = KMacroExpander.ExpandMacrosShellQuote(s, map);
        ///  // s is now "kedit --caption 'My File' '/tmp/myfile.txt'";
        ///  system(QFile.EncodeName(s));
        ///  </pre>
        ///      </remarks>        <return> the string with all valid macros expanded, or a null string
        ///   if a shell syntax error was detected in the command
        /// </return>
        ///         <short>    Perform safe macro expansion (substitution) on a string for use  in shell commands.</short>
    }
}
