//Auto-generated by kalyptus. DO NOT EDIT.
namespace Kimono {
    using System;
    using Qyoto;

    public interface IKBookmarkAction {
        KBookmark Bookmark();
    }
    [SmokeClass("KBookmarkActionInterface")]
    public class KBookmarkActionInterface : Object, IKBookmarkAction, IDisposable {
        protected SmokeInvocation interceptor = null;
        private IntPtr smokeObject;
        protected KBookmarkActionInterface(Type dummy) {}
        protected void CreateProxy() {
            interceptor = new SmokeInvocation(typeof(KBookmarkActionInterface), this);
        }
        public KBookmarkActionInterface(KBookmark bk) : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("KBookmarkActionInterface#", "KBookmarkActionInterface(const KBookmark&)", typeof(void), typeof(KBookmark), bk);
        }
        public KBookmark Bookmark() {
            return (KBookmark) interceptor.Invoke("bookmark", "bookmark() const", typeof(KBookmark));
        }
        ~KBookmarkActionInterface() {
            interceptor.Invoke("~KBookmarkActionInterface", "~KBookmarkActionInterface()", typeof(void));
        }
        public void Dispose() {
            interceptor.Invoke("~KBookmarkActionInterface", "~KBookmarkActionInterface()", typeof(void));
        }
    }
}
