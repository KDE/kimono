//Auto-generated by kalyptus. DO NOT EDIT.
namespace KNS {
    using Kimono;
    using System;
    using Qyoto;
    /// <remarks>
    ///  This class provides accessor methods to the author data
    ///  as used by KNewStuff.
    ///  It should probably not be used directly by the application.
    /// </remarks>        <author> Josef Spillner (spillner@kde.org)
    ///  </author>
    ///         <short> KNewStuff author information. </short>
    [SmokeClass("KNS::Author")]
    public class Author : Object, IDisposable {
        protected SmokeInvocation interceptor = null;
        private IntPtr smokeObject;
        protected Author(Type dummy) {}
        protected void CreateProxy() {
            interceptor = new SmokeInvocation(typeof(Author), this);
        }
        /// <remarks>
        ///  Constructor.
        ///      </remarks>        <short>    Constructor.</short>
        public Author() : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("Author", "Author()", typeof(void));
        }
        public Author(KNS.Author other) : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("Author#", "Author(const KNS::Author&)", typeof(void), typeof(KNS.Author), other);
        }
        /// <remarks>
        ///  Sets the full name of the author.
        ///      </remarks>        <short>    Sets the full name of the author.</short>
        public void SetName(string name) {
            interceptor.Invoke("setName$", "setName(const QString&)", typeof(void), typeof(string), name);
        }
        /// <remarks>
        ///  Retrieve the author's name.
        /// </remarks>        <return> author name
        ///      </return>
        ///         <short>    Retrieve the author's name.</short>
        public string Name() {
            return (string) interceptor.Invoke("name", "name() const", typeof(string));
        }
        /// <remarks>
        ///  Sets the email address of the author.
        ///      </remarks>        <short>    Sets the email address of the author.</short>
        public void SetEmail(string email) {
            interceptor.Invoke("setEmail$", "setEmail(const QString&)", typeof(void), typeof(string), email);
        }
        /// <remarks>
        ///  Retrieve the author's email address.
        /// </remarks>        <return> author email address
        ///      </return>
        ///         <short>    Retrieve the author's email address.</short>
        public string Email() {
            return (string) interceptor.Invoke("email", "email() const", typeof(string));
        }
        /// <remarks>
        ///  Sets the jabber address of the author.
        ///      </remarks>        <short>    Sets the jabber address of the author.</short>
        public void SetJabber(string jabber) {
            interceptor.Invoke("setJabber$", "setJabber(const QString&)", typeof(void), typeof(string), jabber);
        }
        /// <remarks>
        ///  Retrieve the author's jabber address.
        /// </remarks>        <return> author jabber address
        ///      </return>
        ///         <short>    Retrieve the author's jabber address.</short>
        public string Jabber() {
            return (string) interceptor.Invoke("jabber", "jabber() const", typeof(string));
        }
        /// <remarks>
        ///  Sets the homepage of the author.
        ///      </remarks>        <short>    Sets the homepage of the author.</short>
        public void SetHomepage(string homepage) {
            interceptor.Invoke("setHomepage$", "setHomepage(const QString&)", typeof(void), typeof(string), homepage);
        }
        /// <remarks>
        ///  Retrieve the author's homepage.
        /// </remarks>        <return> author homepage
        ///      </return>
        ///         <short>    Retrieve the author's homepage.</short>
        public string Homepage() {
            return (string) interceptor.Invoke("homepage", "homepage() const", typeof(string));
        }
        ~Author() {
            interceptor.Invoke("~Author", "~Author()", typeof(void));
        }
        public void Dispose() {
            interceptor.Invoke("~Author", "~Author()", typeof(void));
        }
    }
}
