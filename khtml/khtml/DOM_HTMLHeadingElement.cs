//Auto-generated by kalyptus. DO NOT EDIT.
namespace DOM {
	using Kimono;
	using System;
	using Qyoto;
	/// <remarks>
	///  For the <code>H1</code> to <code>H6</code> elements. See the <a
	///  href="http://www.w3.org/TR/REC-html40/struct/global.html#edef-H1">
	///  H1 element definition </a> in HTML 4.0.
	///  </remarks>		<short>    For the <code>H1</code> to <code>H6</code> elements.</short>
	[SmokeClass("DOM::HTMLHeadingElement")]
	public class HTMLHeadingElement : DOM.HTMLElement, IDisposable {
 		protected HTMLHeadingElement(Type dummy) : base((Type) null) {}
		protected new void CreateProxy() {
			interceptor = new SmokeInvocation(typeof(HTMLHeadingElement), this);
		}
		// DOM::HTMLHeadingElement* HTMLHeadingElement(DOM::HTMLElementImpl* arg1); >>>> NOT CONVERTED
		public HTMLHeadingElement() : this((Type) null) {
			CreateProxy();
			interceptor.Invoke("HTMLHeadingElement", "HTMLHeadingElement()", typeof(void));
		}
		public HTMLHeadingElement(DOM.HTMLHeadingElement other) : this((Type) null) {
			CreateProxy();
			interceptor.Invoke("HTMLHeadingElement#", "HTMLHeadingElement(const DOM::HTMLHeadingElement&)", typeof(void), typeof(DOM.HTMLHeadingElement), other);
		}
		public HTMLHeadingElement(DOM.Node other) : this((Type) null) {
			CreateProxy();
			interceptor.Invoke("HTMLHeadingElement#", "HTMLHeadingElement(const DOM::Node&)", typeof(void), typeof(DOM.Node), other);
		}
		/// <remarks>
		///  Horizontal text alignment. See the <a
		///  href="http://www.w3.org/TR/REC-html40/present/graphics.html#adef-align">
		///  align attribute definition </a> in HTML 4.0. This attribute is
		///  deprecated in HTML 4.0.
		///      </remarks>		<short>    Horizontal text alignment.</short>
		public DOM.DOMString Align() {
			return (DOM.DOMString) interceptor.Invoke("align", "align() const", typeof(DOM.DOMString));
		}
		/// <remarks>
		///  see align
		///      </remarks>		<short>    see align      </short>
		public void SetAlign(DOM.DOMString arg1) {
			interceptor.Invoke("setAlign#", "setAlign(const DOM::DOMString&)", typeof(void), typeof(DOM.DOMString), arg1);
		}
		~HTMLHeadingElement() {
			interceptor.Invoke("~HTMLHeadingElement", "~HTMLHeadingElement()", typeof(void));
		}
		public new void Dispose() {
			interceptor.Invoke("~HTMLHeadingElement", "~HTMLHeadingElement()", typeof(void));
		}
	}
}
