//Auto-generated by kalyptus. DO NOT EDIT.
namespace DOM {
	using Kimono;
	using System;
	using Qyoto;
	/// <remarks>
	///  The <code>LINK</code> element specifies a link to an external
	///  resource, and defines this document's relationship to that resource
	///  (or vice versa). See the <a
	///  href="http://www.w3.org/TR/REC-html40/struct/links.html#edef-LINK">
	///  LINK element definition </a> in HTML 4.0.
	///  </remarks>		<short>    The <code>LINK</code> element specifies a link to an external  resource, and defines this document's relationship to that resource  (or vice versa).</short>
	[SmokeClass("DOM::HTMLLinkElement")]
	public class HTMLLinkElement : DOM.HTMLElement, IDisposable {
 		protected HTMLLinkElement(Type dummy) : base((Type) null) {}
		protected new void CreateProxy() {
			interceptor = new SmokeInvocation(typeof(HTMLLinkElement), this);
		}
		// DOM::HTMLLinkElement* HTMLLinkElement(DOM::HTMLLinkElementImpl* arg1); >>>> NOT CONVERTED
		public HTMLLinkElement() : this((Type) null) {
			CreateProxy();
			interceptor.Invoke("HTMLLinkElement", "HTMLLinkElement()", typeof(void));
		}
		public HTMLLinkElement(DOM.HTMLLinkElement other) : this((Type) null) {
			CreateProxy();
			interceptor.Invoke("HTMLLinkElement#", "HTMLLinkElement(const DOM::HTMLLinkElement&)", typeof(void), typeof(DOM.HTMLLinkElement), other);
		}
		public HTMLLinkElement(DOM.Node other) : this((Type) null) {
			CreateProxy();
			interceptor.Invoke("HTMLLinkElement#", "HTMLLinkElement(const DOM::Node&)", typeof(void), typeof(DOM.Node), other);
		}
		/// <remarks>
		///  Enables/disables the link. This is currently only used for
		///  style sheet links, and may be used to activate or deactivate
		///  style sheets.
		///      </remarks>		<short>    Enables/disables the link.</short>
		public bool Disabled() {
			return (bool) interceptor.Invoke("disabled", "disabled() const", typeof(bool));
		}
		/// <remarks>
		///  see disabled
		///      </remarks>		<short>    see disabled      </short>
		public void SetDisabled(bool arg1) {
			interceptor.Invoke("setDisabled$", "setDisabled(bool)", typeof(void), typeof(bool), arg1);
		}
		/// <remarks>
		///  The character encoding of the resource being linked to. See the
		///  <a
		///  href="http://www.w3.org/TR/REC-html40/struct/links.html#adef-charset">
		///  charset attribute definition </a> in HTML 4.0.
		///      </remarks>		<short>    The character encoding of the resource being linked to.</short>
		public DOM.DOMString Charset() {
			return (DOM.DOMString) interceptor.Invoke("charset", "charset() const", typeof(DOM.DOMString));
		}
		/// <remarks>
		///  see charset
		///      </remarks>		<short>    see charset      </short>
		public void SetCharset(DOM.DOMString arg1) {
			interceptor.Invoke("setCharset#", "setCharset(const DOM::DOMString&)", typeof(void), typeof(DOM.DOMString), arg1);
		}
		/// <remarks>
		///  The URI of the linked resource. See the <a
		///  href="http://www.w3.org/TR/REC-html40/struct/links.html#adef-href">
		///  href attribute definition </a> in HTML 4.0.
		///      </remarks>		<short>    The URI of the linked resource.</short>
		public DOM.DOMString Href() {
			return (DOM.DOMString) interceptor.Invoke("href", "href() const", typeof(DOM.DOMString));
		}
		/// <remarks>
		///  see href
		///      </remarks>		<short>    see href      </short>
		public void SetHref(DOM.DOMString arg1) {
			interceptor.Invoke("setHref#", "setHref(const DOM::DOMString&)", typeof(void), typeof(DOM.DOMString), arg1);
		}
		/// <remarks>
		///  Language code of the linked resource. See the <a
		///  href="http://www.w3.org/TR/REC-html40/struct/links.html#adef-hreflang">
		///  hreflang attribute definition </a> in HTML 4.0.
		///      </remarks>		<short>    Language code of the linked resource.</short>
		public DOM.DOMString Hreflang() {
			return (DOM.DOMString) interceptor.Invoke("hreflang", "hreflang() const", typeof(DOM.DOMString));
		}
		/// <remarks>
		///  see hreflang
		///      </remarks>		<short>    see hreflang      </short>
		public void SetHreflang(DOM.DOMString arg1) {
			interceptor.Invoke("setHreflang#", "setHreflang(const DOM::DOMString&)", typeof(void), typeof(DOM.DOMString), arg1);
		}
		/// <remarks>
		///  Designed for use with one or more target media. See the <a
		///  href="http://www.w3.org/TR/REC-html40/present/styles.html#adef-media">
		///  media attribute definition </a> in HTML 4.0.
		///      </remarks>		<short>    Designed for use with one or more target media.</short>
		public DOM.DOMString Media() {
			return (DOM.DOMString) interceptor.Invoke("media", "media() const", typeof(DOM.DOMString));
		}
		/// <remarks>
		///  see media
		///      </remarks>		<short>    see media      </short>
		public void SetMedia(DOM.DOMString arg1) {
			interceptor.Invoke("setMedia#", "setMedia(const DOM::DOMString&)", typeof(void), typeof(DOM.DOMString), arg1);
		}
		/// <remarks>
		///  Forward link type. See the <a
		///  href="http://www.w3.org/TR/REC-html40/struct/links.html#adef-rel">
		///  rel attribute definition </a> in HTML 4.0.
		///      </remarks>		<short>    Forward link type.</short>
		public DOM.DOMString Rel() {
			return (DOM.DOMString) interceptor.Invoke("rel", "rel() const", typeof(DOM.DOMString));
		}
		/// <remarks>
		///  see rel
		///      </remarks>		<short>    see rel      </short>
		public void SetRel(DOM.DOMString arg1) {
			interceptor.Invoke("setRel#", "setRel(const DOM::DOMString&)", typeof(void), typeof(DOM.DOMString), arg1);
		}
		/// <remarks>
		///  Reverse link type. See the <a
		///  href="http://www.w3.org/TR/REC-html40/struct/links.html#adef-rev">
		///  rev attribute definition </a> in HTML 4.0.
		///      </remarks>		<short>    Reverse link type.</short>
		public DOM.DOMString Rev() {
			return (DOM.DOMString) interceptor.Invoke("rev", "rev() const", typeof(DOM.DOMString));
		}
		/// <remarks>
		///  see rev
		///      </remarks>		<short>    see rev      </short>
		public void SetRev(DOM.DOMString arg1) {
			interceptor.Invoke("setRev#", "setRev(const DOM::DOMString&)", typeof(void), typeof(DOM.DOMString), arg1);
		}
		/// <remarks>
		///  Frame to render the resource in. See the <a
		///  href="http://www.w3.org/TR/REC-html40/present/frames.html#adef-target">
		///  target attribute definition </a> in HTML 4.0.
		///      </remarks>		<short>    Frame to render the resource in.</short>
		public DOM.DOMString Target() {
			return (DOM.DOMString) interceptor.Invoke("target", "target() const", typeof(DOM.DOMString));
		}
		/// <remarks>
		///  see target
		///      </remarks>		<short>    see target      </short>
		public void SetTarget(DOM.DOMString arg1) {
			interceptor.Invoke("setTarget#", "setTarget(const DOM::DOMString&)", typeof(void), typeof(DOM.DOMString), arg1);
		}
		/// <remarks>
		///  Advisory content type. See the <a
		///  href="http://www.w3.org/TR/REC-html40/struct/links.html#adef-type-A">
		///  type attribute definition </a> in HTML 4.0.
		///      </remarks>		<short>    Advisory content type.</short>
		public DOM.DOMString type() {
			return (DOM.DOMString) interceptor.Invoke("type", "type() const", typeof(DOM.DOMString));
		}
		/// <remarks>
		///  see type
		///      </remarks>		<short>    see type      </short>
		public void SetType(DOM.DOMString arg1) {
			interceptor.Invoke("setType#", "setType(const DOM::DOMString&)", typeof(void), typeof(DOM.DOMString), arg1);
		}
		/// <remarks>
		///  Introduced in DOM Level 2
		///  This method is from the LinkStyle interface
		///  The style sheet.
		///      </remarks>		<short>    Introduced in DOM Level 2  This method is from the LinkStyle interface </short>
		public DOM.StyleSheet Sheet() {
			return (DOM.StyleSheet) interceptor.Invoke("sheet", "sheet() const", typeof(DOM.StyleSheet));
		}
		~HTMLLinkElement() {
			interceptor.Invoke("~HTMLLinkElement", "~HTMLLinkElement()", typeof(void));
		}
		public new void Dispose() {
			interceptor.Invoke("~HTMLLinkElement", "~HTMLLinkElement()", typeof(void));
		}
	}
}
