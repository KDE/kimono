//Auto-generated by kalyptus. DO NOT EDIT.
namespace DOM {
	using Kimono;
	using System;
	using Qyoto;
	/// <remarks>
	///  The <code>StyleSheet</code> interface is the abstract base
	///  interface for any type of style sheet. It represents a single style
	///  sheet associated with a structured document. In HTML, the
	///  StyleSheet interface represents either an external style sheet,
	///  included via the HTML <a
	///  href="http://www.w3.org/TR/REC-html40/struct/links.html#h-12.3">
	///  LINK </a> element, or an inline <a
	///  href="http://www.w3.org/TR/REC-html40/present/styles.html#h-14.2.3">
	///  STYLE </a> element. In XML, this interface represents an external
	///  style sheet, included via a <a
	///  href="http://www.w3.org/TR/xml-stylesheet"> style sheet processing
	///  instruction </a> .
	///  </remarks>		<short>    The <code>StyleSheet</code> interface is the abstract base  interface for any type of style sheet.</short>
	[SmokeClass("DOM::StyleSheet")]
	public class StyleSheet : Object, IDisposable {
		protected SmokeInvocation interceptor = null;
		private IntPtr smokeObject;
		protected StyleSheet(Type dummy) {}
		protected void CreateProxy() {
			interceptor = new SmokeInvocation(typeof(StyleSheet), this);
		}
		// DOM::StyleSheet* StyleSheet(DOM::StyleSheetImpl* arg1); >>>> NOT CONVERTED
		public StyleSheet() : this((Type) null) {
			CreateProxy();
			interceptor.Invoke("StyleSheet", "StyleSheet()", typeof(void));
		}
		public StyleSheet(DOM.StyleSheet other) : this((Type) null) {
			CreateProxy();
			interceptor.Invoke("StyleSheet#", "StyleSheet(const DOM::StyleSheet&)", typeof(void), typeof(DOM.StyleSheet), other);
		}
		/// <remarks>
		///  This specifies the style sheet language for this style sheet.
		///  The style sheet language is specified as a content type (e.g.
		///  "text/css"). The content type is often specified in the
		///  <code>ownerNode</code> . A list of registered content types can be
		///  found at <a
		///  href="ftp://ftp.isi.edu/in-notes/iana/assignments/media-types/">
		///  ftp://ftp.isi.edu/in-notes/iana/assignments/media-types/ </a> .
		///  Also see the <a
		///  href="http://www.w3.org/TR/REC-html40/struct/links.html#adef-type-A">
		///  type attribute definition </a> for the <code>LINK</code>
		///  element in HTML 4.0, and the type pseudo-attribute for the XML
		///  <a href="http://www.w3.org/TR/xml-stylesheet"> style sheet
		///  processing instruction </a> .
		///      </remarks>		<short>    This specifies the style sheet language for this style sheet.</short>
		public DOM.DOMString type() {
			return (DOM.DOMString) interceptor.Invoke("type", "type() const", typeof(DOM.DOMString));
		}
		/// <remarks>
		///  <code>false</code> if the style sheet is applied to the
		///  document. <code>true</code> if it is not. Modifying this
		///  attribute may cause a reresolution of style for the document.
		///      </remarks>		<short>    <code>false</code> if the style sheet is applied to the  document.</short>
		public bool Disabled() {
			return (bool) interceptor.Invoke("disabled", "disabled() const", typeof(bool));
		}
		/// <remarks>
		///  see disabled
		///      </remarks>		<short>    see disabled      </short>
		public void SetDisabled(bool arg1) {
			interceptor.Invoke("setDisabled$", "setDisabled(bool)", typeof(void), typeof(bool), arg1);
		}
		/// <remarks>
		///  The node that associates this style sheet with the document.
		///  For HTML, this may be the corresponding <code>LINK</code> or
		///  <code>STYLE</code> element. For XML, it may be the linking
		///  processing instruction. For style sheets that are included by
		///  other style sheets, this attribute has a value of null.
		///      </remarks>		<short>    The node that associates this style sheet with the document.</short>
		public DOM.Node OwnerNode() {
			return (DOM.Node) interceptor.Invoke("ownerNode", "ownerNode() const", typeof(DOM.Node));
		}
		/// <remarks>
		///  For style sheet languages that support the concept of style
		///  sheet inclusion, this attribute represents the including style
		///  sheet, if one exists. If the style sheet is a top-level style
		///  sheet, or the style sheet language does not support inclusion,
		///  the value of the attribute is null.
		///      </remarks>		<short>    For style sheet languages that support the concept of style  sheet inclusion, this attribute represents the including style  sheet, if one exists.</short>
		public DOM.StyleSheet ParentStyleSheet() {
			return (DOM.StyleSheet) interceptor.Invoke("parentStyleSheet", "parentStyleSheet() const", typeof(DOM.StyleSheet));
		}
		/// <remarks>
		///  If the style sheet is a linked style sheet, the value of its
		///  attribute is its location. For inline style sheets, the value
		///  of this attribute is null. See the <a
		///  href="http://www.w3.org/TR/REC-html40/struct/links.html#adef-href">
		///  href attribute definition </a> for the <code>LINK</code>
		///  element in HTML 4.0, and the href pseudo-attribute for the XML
		///  <a href="http://www.w3.org/TR/xml-stylesheet"> style sheet
		///  processing instruction </a> .
		///      </remarks>		<short>    If the style sheet is a linked style sheet, the value of its  attribute is its location.</short>
		public DOM.DOMString Href() {
			return (DOM.DOMString) interceptor.Invoke("href", "href() const", typeof(DOM.DOMString));
		}
		/// <remarks>
		///  The advisory title. The title is often specified in the
		///  <code>ownerNode</code> . See the <a
		///  href="http://www.w3.org/TR/REC-html40/struct/global.html#adef-title">
		///  title attribute definition </a> for the <code>LINK</code>
		///  element in HTML 4.0, and the title pseudo-attribute for the XML
		///  <a href="http://www.w3.org/TR/xml-stylesheet"> style sheet
		///  processing instruction </a> .
		///      </remarks>		<short>    The advisory title.</short>
		public DOM.DOMString Title() {
			return (DOM.DOMString) interceptor.Invoke("title", "title() const", typeof(DOM.DOMString));
		}
		/// <remarks>
		///  The intended destination media for style information. The media
		///  is often specified in the <code>ownerNode</code> . See the <a
		///  href="http://www.w3.org/TR/REC-html40/present/styles.html#adef-media">
		///  media attribute definition </a> for the <code>LINK</code>
		///  element in HTML 4.0, and the media pseudo-attribute for the XML
		///  <a href="http://www.w3.org/TR/WD-xml-stylesheet"> style sheet
		///  processing instruction </a> .
		///      </remarks>		<short>    The intended destination media for style information.</short>
		public DOM.MediaList Media() {
			return (DOM.MediaList) interceptor.Invoke("media", "media() const", typeof(DOM.MediaList));
		}
		/// <remarks>
		///      </remarks>		<short>   </short>
		public bool IsCSSStyleSheet() {
			return (bool) interceptor.Invoke("isCSSStyleSheet", "isCSSStyleSheet() const", typeof(bool));
		}
		public bool IsNull() {
			return (bool) interceptor.Invoke("isNull", "isNull() const", typeof(bool));
		}
		~StyleSheet() {
			interceptor.Invoke("~StyleSheet", "~StyleSheet()", typeof(void));
		}
		public void Dispose() {
			interceptor.Invoke("~StyleSheet", "~StyleSheet()", typeof(void));
		}
	}
}
