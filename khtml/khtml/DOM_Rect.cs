//Auto-generated by kalyptus. DO NOT EDIT.
namespace DOM {
	using Kimono;
	using System;
	using Qyoto;
	/// <remarks>
	///  The <code>Rect</code> interface is used to represent any <a
	///  href="http://www.w3.org/TR/REC-CSS2/visufx.html#value-def-shape">
	///  rect </a> value. This interface reflects the values in the
	///  underlying style property. Hence, modifications made through this
	///  interface modify the style property.
	///  </remarks>		<short>    The <code>Rect</code> interface is used to represent any <a  href="http://www.</short>
	[SmokeClass("DOM::Rect")]
	public class Rect : Object, IDisposable {
		protected SmokeInvocation interceptor = null;
		private IntPtr smokeObject;
		protected Rect(Type dummy) {}
		protected void CreateProxy() {
			interceptor = new SmokeInvocation(typeof(Rect), this);
		}
		// DOM::Rect* Rect(DOM::RectImpl* arg1); >>>> NOT CONVERTED
		public Rect() : this((Type) null) {
			CreateProxy();
			interceptor.Invoke("Rect", "Rect()", typeof(void));
		}
		public Rect(DOM.Rect other) : this((Type) null) {
			CreateProxy();
			interceptor.Invoke("Rect#", "Rect(const DOM::Rect&)", typeof(void), typeof(DOM.Rect), other);
		}
		/// <remarks>
		///  This attribute is used for the top of the rect.
		///      </remarks>		<short>    This attribute is used for the top of the rect.</short>
		public DOM.CSSPrimitiveValue Top() {
			return (DOM.CSSPrimitiveValue) interceptor.Invoke("top", "top() const", typeof(DOM.CSSPrimitiveValue));
		}
		/// <remarks>
		///  This attribute is used for the right of the rect.
		///      </remarks>		<short>    This attribute is used for the right of the rect.</short>
		public DOM.CSSPrimitiveValue Right() {
			return (DOM.CSSPrimitiveValue) interceptor.Invoke("right", "right() const", typeof(DOM.CSSPrimitiveValue));
		}
		/// <remarks>
		///  This attribute is used for the bottom of the rect.
		///      </remarks>		<short>    This attribute is used for the bottom of the rect.</short>
		public DOM.CSSPrimitiveValue Bottom() {
			return (DOM.CSSPrimitiveValue) interceptor.Invoke("bottom", "bottom() const", typeof(DOM.CSSPrimitiveValue));
		}
		/// <remarks>
		///  This attribute is used for the left of the rect.
		///      </remarks>		<short>    This attribute is used for the left of the rect.</short>
		public DOM.CSSPrimitiveValue Left() {
			return (DOM.CSSPrimitiveValue) interceptor.Invoke("left", "left() const", typeof(DOM.CSSPrimitiveValue));
		}
		public bool IsNull() {
			return (bool) interceptor.Invoke("isNull", "isNull() const", typeof(bool));
		}
		~Rect() {
			interceptor.Invoke("~Rect", "~Rect()", typeof(void));
		}
		public void Dispose() {
			interceptor.Invoke("~Rect", "~Rect()", typeof(void));
		}
	}
}
