//Auto-generated by kalyptus. DO NOT EDIT.
namespace DOM {
	using Kimono;
	using System;
	using Qyoto;
	/// <remarks>
	///  Introduced in DOM Level 2:
	///  Event operations may throw an EventException as specified in their method
	///  descriptions.
	///  </remarks>		<short>    Introduced in DOM Level 2: </short>
	[SmokeClass("DOM::EventException")]
	public class EventException : Object, IDisposable {
		protected SmokeInvocation interceptor = null;
		private IntPtr smokeObject;
		protected EventException(Type dummy) {}
		protected void CreateProxy() {
			interceptor = new SmokeInvocation(typeof(EventException), this);
		}
		/// <remarks>
		///  An integer indicating the type of error generated.
		///  UNSPECIFIED_EVENT_TYPE_ERR: If the Event's type was not specified by
		///  initializing the event before the method was called. Specification of
		///  the Event's type as null or an empty string will also trigger this
		///  exception.
		///      </remarks>		<short>    An integer indicating the type of error generated.</short>
		public enum EventExceptionCode {
			UNSPECIFIED_EVENT_TYPE_ERR = 0,
			_EXCEPTION_OFFSET = 3000,
			_EXCEPTION_MAX = 3999,
		}
		public EventException(ushort _code) : this((Type) null) {
			CreateProxy();
			interceptor.Invoke("EventException$", "EventException(unsigned short)", typeof(void), typeof(ushort), _code);
		}
		public EventException(DOM.EventException other) : this((Type) null) {
			CreateProxy();
			interceptor.Invoke("EventException#", "EventException(const DOM::EventException&)", typeof(void), typeof(DOM.EventException), other);
		}
		~EventException() {
			interceptor.Invoke("~EventException", "~EventException()", typeof(void));
		}
		public void Dispose() {
			interceptor.Invoke("~EventException", "~EventException()", typeof(void));
		}
	}
}
