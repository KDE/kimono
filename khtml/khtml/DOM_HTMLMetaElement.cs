//Auto-generated by kalyptus. DO NOT EDIT.
namespace DOM {
	using Kimono;
	using System;
	using Qyoto;
	/// <remarks>
	///  This contains generic meta-information about the document. See the
	///  <a
	///  href="http://www.w3.org/TR/REC-html40/struct/global.html#edef-META">
	///  META element definition </a> in HTML 4.0.
	///  </remarks>		<short>    This contains generic meta-information about the document.</short>
	[SmokeClass("DOM::HTMLMetaElement")]
	public class HTMLMetaElement : DOM.HTMLElement, IDisposable {
 		protected HTMLMetaElement(Type dummy) : base((Type) null) {}
		protected new void CreateProxy() {
			interceptor = new SmokeInvocation(typeof(HTMLMetaElement), this);
		}
		// DOM::HTMLMetaElement* HTMLMetaElement(DOM::HTMLMetaElementImpl* arg1); >>>> NOT CONVERTED
		public HTMLMetaElement() : this((Type) null) {
			CreateProxy();
			interceptor.Invoke("HTMLMetaElement", "HTMLMetaElement()", typeof(void));
		}
		public HTMLMetaElement(DOM.HTMLMetaElement other) : this((Type) null) {
			CreateProxy();
			interceptor.Invoke("HTMLMetaElement#", "HTMLMetaElement(const DOM::HTMLMetaElement&)", typeof(void), typeof(DOM.HTMLMetaElement), other);
		}
		public HTMLMetaElement(DOM.Node other) : this((Type) null) {
			CreateProxy();
			interceptor.Invoke("HTMLMetaElement#", "HTMLMetaElement(const DOM::Node&)", typeof(void), typeof(DOM.Node), other);
		}
		/// <remarks>
		///  Associated information. See the <a
		///  href="http://www.w3.org/TR/REC-html40/struct/global.html#adef-content">
		///  content attribute definition </a> in HTML 4.0.
		///      </remarks>		<short>    Associated information.</short>
		public DOM.DOMString Content() {
			return (DOM.DOMString) interceptor.Invoke("content", "content() const", typeof(DOM.DOMString));
		}
		/// <remarks>
		///  see content
		///      </remarks>		<short>    see content      </short>
		public void SetContent(DOM.DOMString arg1) {
			interceptor.Invoke("setContent#", "setContent(const DOM::DOMString&)", typeof(void), typeof(DOM.DOMString), arg1);
		}
		/// <remarks>
		///  HTTP response header name. See the <a
		///  href="http://www.w3.org/TR/REC-html40/struct/global.html#adef-http-equiv">
		///  http-equiv attribute definition </a> in HTML 4.0.
		///      </remarks>		<short>    HTTP response header name.</short>
		public DOM.DOMString HttpEquiv() {
			return (DOM.DOMString) interceptor.Invoke("httpEquiv", "httpEquiv() const", typeof(DOM.DOMString));
		}
		/// <remarks>
		///  see httpEquiv
		///      </remarks>		<short>    see httpEquiv      </short>
		public void SetHttpEquiv(DOM.DOMString arg1) {
			interceptor.Invoke("setHttpEquiv#", "setHttpEquiv(const DOM::DOMString&)", typeof(void), typeof(DOM.DOMString), arg1);
		}
		/// <remarks>
		///  Meta information name. See the <a
		///  href="http://www.w3.org/TR/REC-html40/struct/global.html#adef-name-META">
		///  name attribute definition </a> in HTML 4.0.
		///      </remarks>		<short>    Meta information name.</short>
		public DOM.DOMString Name() {
			return (DOM.DOMString) interceptor.Invoke("name", "name() const", typeof(DOM.DOMString));
		}
		/// <remarks>
		///  see name
		///      </remarks>		<short>    see name      </short>
		public void SetName(DOM.DOMString arg1) {
			interceptor.Invoke("setName#", "setName(const DOM::DOMString&)", typeof(void), typeof(DOM.DOMString), arg1);
		}
		/// <remarks>
		///  Select form of content. See the <a
		///  href="http://www.w3.org/TR/REC-html40/struct/global.html#adef-scheme">
		///  scheme attribute definition </a> in HTML 4.0.
		///      </remarks>		<short>    Select form of content.</short>
		public DOM.DOMString Scheme() {
			return (DOM.DOMString) interceptor.Invoke("scheme", "scheme() const", typeof(DOM.DOMString));
		}
		/// <remarks>
		///  see scheme
		///      </remarks>		<short>    see scheme      </short>
		public void SetScheme(DOM.DOMString arg1) {
			interceptor.Invoke("setScheme#", "setScheme(const DOM::DOMString&)", typeof(void), typeof(DOM.DOMString), arg1);
		}
		~HTMLMetaElement() {
			interceptor.Invoke("~HTMLMetaElement", "~HTMLMetaElement()", typeof(void));
		}
		public new void Dispose() {
			interceptor.Invoke("~HTMLMetaElement", "~HTMLMetaElement()", typeof(void));
		}
	}
}
