//Auto-generated by kalyptus. DO NOT EDIT.
namespace DOM {
	using Kimono;
	using System;
	using Qyoto;
	/// <remarks>
	///  Multi-line text field. See the <a
	///  href="http://www.w3.org/TR/REC-html40/interact/forms.html#edef-TEXTAREA">
	///  TEXTAREA element definition </a> in HTML 4.0.
	///  </remarks>		<short>    Multi-line text field.</short>
	[SmokeClass("DOM::HTMLTextAreaElement")]
	public class HTMLTextAreaElement : DOM.HTMLElement, IDisposable {
 		protected HTMLTextAreaElement(Type dummy) : base((Type) null) {}
		protected new void CreateProxy() {
			interceptor = new SmokeInvocation(typeof(HTMLTextAreaElement), this);
		}
		// DOM::HTMLTextAreaElement* HTMLTextAreaElement(DOM::HTMLTextAreaElementImpl* arg1); >>>> NOT CONVERTED
		public HTMLTextAreaElement() : this((Type) null) {
			CreateProxy();
			interceptor.Invoke("HTMLTextAreaElement", "HTMLTextAreaElement()", typeof(void));
		}
		public HTMLTextAreaElement(DOM.HTMLTextAreaElement other) : this((Type) null) {
			CreateProxy();
			interceptor.Invoke("HTMLTextAreaElement#", "HTMLTextAreaElement(const DOM::HTMLTextAreaElement&)", typeof(void), typeof(DOM.HTMLTextAreaElement), other);
		}
		public HTMLTextAreaElement(DOM.Node other) : this((Type) null) {
			CreateProxy();
			interceptor.Invoke("HTMLTextAreaElement#", "HTMLTextAreaElement(const DOM::Node&)", typeof(void), typeof(DOM.Node), other);
		}
		/// <remarks>
		///  Stores the initial control value (i.e., the initial value of
		///  <code>value</code> ).
		///      </remarks>		<short>    Stores the initial control value (i.</short>
		public DOM.DOMString DefaultValue() {
			return (DOM.DOMString) interceptor.Invoke("defaultValue", "defaultValue() const", typeof(DOM.DOMString));
		}
		/// <remarks>
		///  see defaultValue
		///      </remarks>		<short>    see defaultValue      </short>
		public void SetDefaultValue(DOM.DOMString arg1) {
			interceptor.Invoke("setDefaultValue#", "setDefaultValue(const DOM::DOMString&)", typeof(void), typeof(DOM.DOMString), arg1);
		}
		/// <remarks>
		///  ### KDE 4.0: remove.
		///      </remarks>		<short>    ### KDE 4.</short>
		public new DOM.HTMLFormElement Form() {
			return (DOM.HTMLFormElement) interceptor.Invoke("form", "form() const", typeof(DOM.HTMLFormElement));
		}
		/// <remarks>
		///  A single character access key to give access to the form
		///  control. See the <a
		///  href="http://www.w3.org/TR/REC-html40/interact/forms.html#adef-accesskey">
		///  accesskey attribute definition </a> in HTML 4.0.
		///      </remarks>		<short>    A single character access key to give access to the form  control.</short>
		public DOM.DOMString AccessKey() {
			return (DOM.DOMString) interceptor.Invoke("accessKey", "accessKey() const", typeof(DOM.DOMString));
		}
		/// <remarks>
		///  see accessKey
		///      </remarks>		<short>    see accessKey      </short>
		public void SetAccessKey(DOM.DOMString arg1) {
			interceptor.Invoke("setAccessKey#", "setAccessKey(const DOM::DOMString&)", typeof(void), typeof(DOM.DOMString), arg1);
		}
		/// <remarks>
		///  Width of control (in characters). See the <a
		///  href="http://www.w3.org/TR/REC-html40/interact/forms.html#adef-cols-TEXTAREA">
		///  cols attribute definition </a> in HTML 4.0.
		///      </remarks>		<short>    Width of control (in characters).</short>
		public long Cols() {
			return (long) interceptor.Invoke("cols", "cols() const", typeof(long));
		}
		/// <remarks>
		///  see cols
		///      </remarks>		<short>    see cols      </short>
		public void SetCols(long arg1) {
			interceptor.Invoke("setCols$", "setCols(long)", typeof(void), typeof(long), arg1);
		}
		/// <remarks>
		///  The control is unavailable in this context. See the <a
		///  href="http://www.w3.org/TR/REC-html40/interact/forms.html#adef-disabled">
		///  disabled attribute definition </a> in HTML 4.0.
		///      </remarks>		<short>    The control is unavailable in this context.</short>
		public bool Disabled() {
			return (bool) interceptor.Invoke("disabled", "disabled() const", typeof(bool));
		}
		/// <remarks>
		///  see disabled
		///      </remarks>		<short>    see disabled      </short>
		public void SetDisabled(bool arg1) {
			interceptor.Invoke("setDisabled$", "setDisabled(bool)", typeof(void), typeof(bool), arg1);
		}
		/// <remarks>
		///  Form control or object name when submitted with a form. See the
		///  <a
		///  href="http://www.w3.org/TR/REC-html40/interact/forms.html#adef-name-TEXTAREA">
		///  name attribute definition </a> in HTML 4.0.
		///      </remarks>		<short>    Form control or object name when submitted with a form.</short>
		public DOM.DOMString Name() {
			return (DOM.DOMString) interceptor.Invoke("name", "name() const", typeof(DOM.DOMString));
		}
		/// <remarks>
		///  see name
		///      </remarks>		<short>    see name      </short>
		public void SetName(DOM.DOMString arg1) {
			interceptor.Invoke("setName#", "setName(const DOM::DOMString&)", typeof(void), typeof(DOM.DOMString), arg1);
		}
		/// <remarks>
		///  This control is read-only. See the <a
		///  href="http://www.w3.org/TR/REC-html40/interact/forms.html#adef-readonly">
		///  readonly attribute definition </a> in HTML 4.0.
		///      </remarks>		<short>    This control is read-only.</short>
		public bool ReadOnly() {
			return (bool) interceptor.Invoke("readOnly", "readOnly() const", typeof(bool));
		}
		/// <remarks>
		///  see readOnly
		///      </remarks>		<short>    see readOnly      </short>
		public void SetReadOnly(bool arg1) {
			interceptor.Invoke("setReadOnly$", "setReadOnly(bool)", typeof(void), typeof(bool), arg1);
		}
		/// <remarks>
		///  Number of text rows. See the <a
		///  href="http://www.w3.org/TR/REC-html40/interact/forms.html#adef-rows-TEXTAREA">
		///  rows attribute definition </a> in HTML 4.0.
		///      </remarks>		<short>    Number of text rows.</short>
		public long Rows() {
			return (long) interceptor.Invoke("rows", "rows() const", typeof(long));
		}
		/// <remarks>
		///  see rows
		///      </remarks>		<short>    see rows      </short>
		public void SetRows(long arg1) {
			interceptor.Invoke("setRows$", "setRows(long)", typeof(void), typeof(long), arg1);
		}
		/// <remarks>
		///  Index that represents the element's position in the tabbing
		///  order. See the <a
		///  href="http://www.w3.org/TR/REC-html40/interact/forms.html#adef-tabindex">
		///  tabindex attribute definition </a> in HTML 4.0.
		///      </remarks>		<short>    Index that represents the element's position in the tabbing  order.</short>
		public long TabIndex() {
			return (long) interceptor.Invoke("tabIndex", "tabIndex() const", typeof(long));
		}
		/// <remarks>
		///  see tabIndex
		///      </remarks>		<short>    see tabIndex      </short>
		public void SetTabIndex(long arg1) {
			interceptor.Invoke("setTabIndex$", "setTabIndex(long)", typeof(void), typeof(long), arg1);
		}
		/// <remarks>
		///  The type of this form control.
		///      </remarks>		<short>    The type of this form control.</short>
		public DOM.DOMString type() {
			return (DOM.DOMString) interceptor.Invoke("type", "type() const", typeof(DOM.DOMString));
		}
		/// <remarks>
		///  The current textual content of the multi-line text field. If
		///  the entirety of the data can not fit into a single wstring, the
		///  implementation may truncate the data.
		///      </remarks>		<short>    The current textual content of the multi-line text field.</short>
		public DOM.DOMString Value() {
			return (DOM.DOMString) interceptor.Invoke("value", "value() const", typeof(DOM.DOMString));
		}
		/// <remarks>
		///  see value
		///      </remarks>		<short>    see value      </short>
		public void SetValue(DOM.DOMString arg1) {
			interceptor.Invoke("setValue#", "setValue(const DOM::DOMString&)", typeof(void), typeof(DOM.DOMString), arg1);
		}
		/// <remarks>
		///  Removes keyboard focus from this element.
		///      </remarks>		<short>    Removes keyboard focus from this element.</short>
		public void Blur() {
			interceptor.Invoke("blur", "blur()", typeof(void));
		}
		/// <remarks>
		///  Gives keyboard focus to this element.
		///      </remarks>		<short>    Gives keyboard focus to this element.</short>
		public void Focus() {
			interceptor.Invoke("focus", "focus()", typeof(void));
		}
		/// <remarks>
		///  Select the contents of the <code>TEXTAREA</code> .
		///      </remarks>		<short>    Select the contents of the <code>TEXTAREA</code> .</short>
		public void Select() {
			interceptor.Invoke("select", "select()", typeof(void));
		}
		/// <remarks>
		///  Returns the character offset of beginning of selection, or if none,
		///  the cursor position.
		///  NOTE: this method is not part of the DOM, but a Mozilla extension
		///      </remarks>		<short>    Returns the character offset of beginning of selection, or if none,  the cursor position.</short>
		public long SelectionStart() {
			return (long) interceptor.Invoke("selectionStart", "selectionStart()", typeof(long));
		}
		/// <remarks>
		///  Move the beginning of the selection to the given offset in text
		///  NOTE: this method is not part of the DOM, but a Mozilla extension
		///       </remarks>		<short>    Move the beginning of the selection to the given offset in text  NOTE: this method is not part of the DOM, but a Mozilla extension       </short>
		public void SetSelectionStart(long offset) {
			interceptor.Invoke("setSelectionStart$", "setSelectionStart(long)", typeof(void), typeof(long), offset);
		}
		/// <remarks>
		///  Returns the character offset of end of selection, or if none,
		///  the cursor position.
		///  NOTE: this method is not part of the DOM, but a Mozilla extension
		///      </remarks>		<short>    Returns the character offset of end of selection, or if none,  the cursor position.</short>
		public long SelectionEnd() {
			return (long) interceptor.Invoke("selectionEnd", "selectionEnd()", typeof(long));
		}
		/// <remarks>
		///  Move the end of the selection (and the cursor) to the given offset in text
		///  NOTE: this method is not part of the DOM, but a Mozilla extension
		///       </remarks>		<short>    Move the end of the selection (and the cursor) to the given offset in text  NOTE: this method is not part of the DOM, but a Mozilla extension       </short>
		public void SetSelectionEnd(long offset) {
			interceptor.Invoke("setSelectionEnd$", "setSelectionEnd(long)", typeof(void), typeof(long), offset);
		}
		/// <remarks>
		///  Selects the text from start to end, and positions the cursor after the selection.
		///  NOTE: this method is not part of the DOM, but a Mozilla extension
		///       </remarks>		<short>    Selects the text from start to end, and positions the cursor after the selection.</short>
		public void SetSelectionRange(long start, long end) {
			interceptor.Invoke("setSelectionRange$$", "setSelectionRange(long, long)", typeof(void), typeof(long), start, typeof(long), end);
		}
		/// <remarks>
		///  Returns the length of the text.
		///  NOTE: this method is not part of the DOM, but a Mozilla extension
		///       </remarks>		<short>    Returns the length of the text.</short>
		public long TextLength() {
			return (long) interceptor.Invoke("textLength", "textLength()", typeof(long));
		}
		~HTMLTextAreaElement() {
			interceptor.Invoke("~HTMLTextAreaElement", "~HTMLTextAreaElement()", typeof(void));
		}
		public new void Dispose() {
			interceptor.Invoke("~HTMLTextAreaElement", "~HTMLTextAreaElement()", typeof(void));
		}
	}
}
