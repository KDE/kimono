//Auto-generated by kalyptus. DO NOT EDIT.
namespace DOM {
	using Kimono;
	using System;
	using Qyoto;
	/// <remarks>
	///  The <code>CSSFontFaceRule</code> interface represents a <a
	///  href="http://www.w3.org/TR/REC-CSS2/fonts.html#font-descriptions">
	///  <code>\@font-face</code> rule </a> in a CSS style sheet. The <code>\@font-face</code>
	///  rule is used to hold a set of font descriptions.
	///  </remarks>		<short>    The <code>CSSFontFaceRule</code> interface represents a <a  href="http://www.</short>
	[SmokeClass("DOM::CSSFontFaceRule")]
	public class CSSFontFaceRule : DOM.CSSRule, IDisposable {
 		protected CSSFontFaceRule(Type dummy) : base((Type) null) {}
		protected new void CreateProxy() {
			interceptor = new SmokeInvocation(typeof(CSSFontFaceRule), this);
		}
		// DOM::CSSFontFaceRule* CSSFontFaceRule(DOM::CSSFontFaceRuleImpl* arg1); >>>> NOT CONVERTED
		public CSSFontFaceRule() : this((Type) null) {
			CreateProxy();
			interceptor.Invoke("CSSFontFaceRule", "CSSFontFaceRule()", typeof(void));
		}
		public CSSFontFaceRule(DOM.CSSFontFaceRule other) : this((Type) null) {
			CreateProxy();
			interceptor.Invoke("CSSFontFaceRule#", "CSSFontFaceRule(const DOM::CSSFontFaceRule&)", typeof(void), typeof(DOM.CSSFontFaceRule), other);
		}
		public CSSFontFaceRule(DOM.CSSRule other) : this((Type) null) {
			CreateProxy();
			interceptor.Invoke("CSSFontFaceRule#", "CSSFontFaceRule(const DOM::CSSRule&)", typeof(void), typeof(DOM.CSSRule), other);
		}
		/// <remarks>
		///  The <a href="http://www.w3.org/TR/REC-CSS2/syndata.html#q8">
		///  declaration-block </a> of this rule.
		///      </remarks>		<short>    The <a href="http://www.</short>
		public DOM.CSSStyleDeclaration Style() {
			return (DOM.CSSStyleDeclaration) interceptor.Invoke("style", "style() const", typeof(DOM.CSSStyleDeclaration));
		}
		~CSSFontFaceRule() {
			interceptor.Invoke("~CSSFontFaceRule", "~CSSFontFaceRule()", typeof(void));
		}
		public new void Dispose() {
			interceptor.Invoke("~CSSFontFaceRule", "~CSSFontFaceRule()", typeof(void));
		}
	}
}
