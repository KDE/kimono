//Auto-generated by kalyptus. DO NOT EDIT.
namespace DOM {
	using Kimono;
	using System;
	using Qyoto;
	/// <remarks>
	///  Document head information. See the <a
	///  href="http://www.w3.org/TR/REC-html40/struct/global.html#edef-HEAD">
	///  HEAD element definition </a> in HTML 4.0.
	///  </remarks>		<short>    Document head information.</short>
	[SmokeClass("DOM::HTMLHeadElement")]
	public class HTMLHeadElement : DOM.HTMLElement, IDisposable {
 		protected HTMLHeadElement(Type dummy) : base((Type) null) {}
		protected new void CreateProxy() {
			interceptor = new SmokeInvocation(typeof(HTMLHeadElement), this);
		}
		// DOM::HTMLHeadElement* HTMLHeadElement(DOM::HTMLHeadElementImpl* arg1); >>>> NOT CONVERTED
		public HTMLHeadElement() : this((Type) null) {
			CreateProxy();
			interceptor.Invoke("HTMLHeadElement", "HTMLHeadElement()", typeof(void));
		}
		public HTMLHeadElement(DOM.HTMLHeadElement other) : this((Type) null) {
			CreateProxy();
			interceptor.Invoke("HTMLHeadElement#", "HTMLHeadElement(const DOM::HTMLHeadElement&)", typeof(void), typeof(DOM.HTMLHeadElement), other);
		}
		public HTMLHeadElement(DOM.Node other) : this((Type) null) {
			CreateProxy();
			interceptor.Invoke("HTMLHeadElement#", "HTMLHeadElement(const DOM::Node&)", typeof(void), typeof(DOM.Node), other);
		}
		/// <remarks>
		///  URI designating a metadata profile. See the <a
		///  href="http://www.w3.org/TR/REC-html40/struct/global.html#adef-profile">
		///  profile attribute definition </a> in HTML 4.0.
		///      </remarks>		<short>    URI designating a metadata profile.</short>
		public DOM.DOMString Profile() {
			return (DOM.DOMString) interceptor.Invoke("profile", "profile() const", typeof(DOM.DOMString));
		}
		/// <remarks>
		///  see profile
		///      </remarks>		<short>    see profile      </short>
		public void SetProfile(DOM.DOMString arg1) {
			interceptor.Invoke("setProfile#", "setProfile(const DOM::DOMString&)", typeof(void), typeof(DOM.DOMString), arg1);
		}
		~HTMLHeadElement() {
			interceptor.Invoke("~HTMLHeadElement", "~HTMLHeadElement()", typeof(void));
		}
		public new void Dispose() {
			interceptor.Invoke("~HTMLHeadElement", "~HTMLHeadElement()", typeof(void));
		}
	}
}
