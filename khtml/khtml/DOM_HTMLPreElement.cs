//Auto-generated by kalyptus. DO NOT EDIT.
namespace DOM {
	using Kimono;
	using System;
	using Qyoto;
	/// <remarks>
	///  Preformatted text. See the <a
	///  href="http://www.w3.org/TR/REC-html40/struct/text.html#edef-PRE">
	///  PRE element definition </a> in HTML 4.0.
	///  </remarks>		<short>    Preformatted text.</short>
	[SmokeClass("DOM::HTMLPreElement")]
	public class HTMLPreElement : DOM.HTMLElement, IDisposable {
 		protected HTMLPreElement(Type dummy) : base((Type) null) {}
		protected new void CreateProxy() {
			interceptor = new SmokeInvocation(typeof(HTMLPreElement), this);
		}
		// DOM::HTMLPreElement* HTMLPreElement(DOM::HTMLPreElementImpl* arg1); >>>> NOT CONVERTED
		public HTMLPreElement() : this((Type) null) {
			CreateProxy();
			interceptor.Invoke("HTMLPreElement", "HTMLPreElement()", typeof(void));
		}
		public HTMLPreElement(DOM.HTMLPreElement other) : this((Type) null) {
			CreateProxy();
			interceptor.Invoke("HTMLPreElement#", "HTMLPreElement(const DOM::HTMLPreElement&)", typeof(void), typeof(DOM.HTMLPreElement), other);
		}
		public HTMLPreElement(DOM.Node other) : this((Type) null) {
			CreateProxy();
			interceptor.Invoke("HTMLPreElement#", "HTMLPreElement(const DOM::Node&)", typeof(void), typeof(DOM.Node), other);
		}
		/// <remarks>
		///  Fixed width for content. See the <a
		///  href="http://www.w3.org/TR/REC-html40/struct/text.html#adef-width-PRE">
		///  width attribute definition </a> in HTML 4.0. This attribute is
		///  deprecated in HTML 4.0.
		///      </remarks>		<short>    Fixed width for content.</short>
		public long Width() {
			return (long) interceptor.Invoke("width", "width() const", typeof(long));
		}
		/// <remarks>
		///  see width
		///      </remarks>		<short>    see width      </short>
		public void SetWidth(long arg1) {
			interceptor.Invoke("setWidth$", "setWidth(long)", typeof(void), typeof(long), arg1);
		}
		~HTMLPreElement() {
			interceptor.Invoke("~HTMLPreElement", "~HTMLPreElement()", typeof(void));
		}
		public new void Dispose() {
			interceptor.Invoke("~HTMLPreElement", "~HTMLPreElement()", typeof(void));
		}
	}
}
