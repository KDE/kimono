//Auto-generated by kalyptus. DO NOT EDIT.
namespace DOM {
	using Kimono;
	using System;
	using Qyoto;
	/// <remarks>
	///  For the <code>Q</code> and <code>BLOCKQUOTE</code> elements.
	///  See the <a
	///  href="http://www.w3.org/TR/REC-html40/struct/text.html#edef-Q"> Q
	///  element definition </a> in HTML 4.0.
	///  Note: The DOM is not quite consistent here. They also define the
	///  HTMLBlockQuoteElement interface, to represent the <code>BLOCKQUOTE</code>
	///  element. To resolve ambiquities, we use this one for the <code>Q</code>
	///  element only.
	///  </remarks>		<short>    For the <code>Q</code> and <code>BLOCKQUOTE</code> elements.</short>
	[SmokeClass("DOM::HTMLQuoteElement")]
	public class HTMLQuoteElement : DOM.HTMLElement, IDisposable {
 		protected HTMLQuoteElement(Type dummy) : base((Type) null) {}
		protected new void CreateProxy() {
			interceptor = new SmokeInvocation(typeof(HTMLQuoteElement), this);
		}
		// DOM::HTMLQuoteElement* HTMLQuoteElement(DOM::HTMLGenericElementImpl* arg1); >>>> NOT CONVERTED
		public HTMLQuoteElement() : this((Type) null) {
			CreateProxy();
			interceptor.Invoke("HTMLQuoteElement", "HTMLQuoteElement()", typeof(void));
		}
		public HTMLQuoteElement(DOM.HTMLQuoteElement other) : this((Type) null) {
			CreateProxy();
			interceptor.Invoke("HTMLQuoteElement#", "HTMLQuoteElement(const DOM::HTMLQuoteElement&)", typeof(void), typeof(DOM.HTMLQuoteElement), other);
		}
		public HTMLQuoteElement(DOM.Node other) : this((Type) null) {
			CreateProxy();
			interceptor.Invoke("HTMLQuoteElement#", "HTMLQuoteElement(const DOM::Node&)", typeof(void), typeof(DOM.Node), other);
		}
		/// <remarks>
		///  A URI designating a document that designates a source document
		///  or message. See the <a
		///  href="http://www.w3.org/TR/REC-html40/struct/text.html#adef-cite-Q">
		///  cite attribute definition </a> in HTML 4.0.
		///      </remarks>		<short>    A URI designating a document that designates a source document  or message.</short>
		public DOM.DOMString Cite() {
			return (DOM.DOMString) interceptor.Invoke("cite", "cite() const", typeof(DOM.DOMString));
		}
		/// <remarks>
		///  see cite
		///      </remarks>		<short>    see cite      </short>
		public void SetCite(DOM.DOMString arg1) {
			interceptor.Invoke("setCite#", "setCite(const DOM::DOMString&)", typeof(void), typeof(DOM.DOMString), arg1);
		}
		~HTMLQuoteElement() {
			interceptor.Invoke("~HTMLQuoteElement", "~HTMLQuoteElement()", typeof(void));
		}
		public new void Dispose() {
			interceptor.Invoke("~HTMLQuoteElement", "~HTMLQuoteElement()", typeof(void));
		}
	}
}
