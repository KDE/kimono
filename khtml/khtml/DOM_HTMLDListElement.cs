//Auto-generated by kalyptus. DO NOT EDIT.
namespace DOM {
	using Kimono;
	using System;
	using Qyoto;
	/// <remarks>
	///  Definition list. See the <a
	///  href="http://www.w3.org/TR/REC-html40/struct/lists.html#edef-DL">
	///  DL element definition </a> in HTML 4.0.
	///  </remarks>		<short>    Definition list.</short>
	[SmokeClass("DOM::HTMLDListElement")]
	public class HTMLDListElement : DOM.HTMLElement, IDisposable {
 		protected HTMLDListElement(Type dummy) : base((Type) null) {}
		protected new void CreateProxy() {
			interceptor = new SmokeInvocation(typeof(HTMLDListElement), this);
		}
		// DOM::HTMLDListElement* HTMLDListElement(DOM::HTMLDListElementImpl* arg1); >>>> NOT CONVERTED
		public HTMLDListElement() : this((Type) null) {
			CreateProxy();
			interceptor.Invoke("HTMLDListElement", "HTMLDListElement()", typeof(void));
		}
		public HTMLDListElement(DOM.HTMLDListElement other) : this((Type) null) {
			CreateProxy();
			interceptor.Invoke("HTMLDListElement#", "HTMLDListElement(const DOM::HTMLDListElement&)", typeof(void), typeof(DOM.HTMLDListElement), other);
		}
		public HTMLDListElement(DOM.Node other) : this((Type) null) {
			CreateProxy();
			interceptor.Invoke("HTMLDListElement#", "HTMLDListElement(const DOM::Node&)", typeof(void), typeof(DOM.Node), other);
		}
		/// <remarks>
		///  Reduce spacing between list items. See the <a
		///  href="http://www.w3.org/TR/REC-html40/struct/lists.html#adef-compact">
		///  compact attribute definition </a> in HTML 4.0. This attribute
		///  is deprecated in HTML 4.0.
		///      </remarks>		<short>    Reduce spacing between list items.</short>
		public bool Compact() {
			return (bool) interceptor.Invoke("compact", "compact() const", typeof(bool));
		}
		/// <remarks>
		///  see compact
		///      </remarks>		<short>    see compact      </short>
		public void SetCompact(bool arg1) {
			interceptor.Invoke("setCompact$", "setCompact(bool)", typeof(void), typeof(bool), arg1);
		}
		~HTMLDListElement() {
			interceptor.Invoke("~HTMLDListElement", "~HTMLDListElement()", typeof(void));
		}
		public new void Dispose() {
			interceptor.Invoke("~HTMLDListElement", "~HTMLDListElement()", typeof(void));
		}
	}
}
