//Auto-generated by kalyptus. DO NOT EDIT.
namespace Kimono {
	using System;
	using Qyoto;
	using System.Text;
	using System.Collections.Generic;
	/// <remarks>
	///  Settings for the HTML view.
	///  </remarks>		<short>    Settings for the HTML view.</short>
	[SmokeClass("KHTMLSettings")]
	public class KHTMLSettings : Object, IDisposable {
		protected SmokeInvocation interceptor = null;
		private IntPtr smokeObject;
		protected KHTMLSettings(Type dummy) {}
		protected void CreateProxy() {
			interceptor = new SmokeInvocation(typeof(KHTMLSettings), this);
		}
		private static SmokeInvocation staticInterceptor = null;
		static KHTMLSettings() {
			staticInterceptor = new SmokeInvocation(typeof(KHTMLSettings), null);
		}
		/// <remarks>
		///  This enum specifies whether Java/JavaScript execution is allowed.
		///      </remarks>		<short>    This enum specifies whether Java/JavaScript execution is allowed.</short>
		public enum KJavaScriptAdvice {
			KJavaScriptDunno = 0,
			KJavaScriptAccept = 1,
			KJavaScriptReject = 2,
		}
		public enum KAnimationAdvice {
			KAnimationDisabled = 0,
			KAnimationLoopOnce = 1,
			KAnimationEnabled = 2,
		}
		public enum KSmoothScrollingMode {
			KSmoothScrollingDisabled = 0,
			KSmoothScrollingWhenEfficient = 1,
			KSmoothScrollingEnabled = 2,
		}
		/// <remarks>
		///  This enum specifies the policy for window.open
		///      </remarks>		<short>    This enum specifies the policy for window.</short>
		public enum KJSWindowOpenPolicy {
			KJSWindowOpenAllow = 0,
			KJSWindowOpenAsk = 1,
			KJSWindowOpenDeny = 2,
			KJSWindowOpenSmart = 3,
		}
		/// <remarks>
		///  This enum specifies the policy for window.status and .defaultStatus
		///      </remarks>		<short>    This enum specifies the policy for window.</short>
		public enum KJSWindowStatusPolicy {
			KJSWindowStatusAllow = 0,
			KJSWindowStatusIgnore = 1,
		}
		/// <remarks>
		///  This enum specifies the policy for window.moveBy and .moveTo
		///      </remarks>		<short>    This enum specifies the policy for window.</short>
		public enum KJSWindowMovePolicy {
			KJSWindowMoveAllow = 0,
			KJSWindowMoveIgnore = 1,
		}
		/// <remarks>
		///  This enum specifies the policy for window.resizeBy and .resizeTo
		///      </remarks>		<short>    This enum specifies the policy for window.</short>
		public enum KJSWindowResizePolicy {
			KJSWindowResizeAllow = 0,
			KJSWindowResizeIgnore = 1,
		}
		/// <remarks>
		///  This enum specifies the policy for window.focus
		///      </remarks>		<short>    This enum specifies the policy for window.</short>
		public enum KJSWindowFocusPolicy {
			KJSWindowFocusAllow = 0,
			KJSWindowFocusIgnore = 1,
		}
		// void readDomainSettings(const KConfigGroup& arg1,bool arg2,bool arg3,KPerDomainSettings& arg4); >>>> NOT CONVERTED
		/// <remarks>
		///      </remarks>		<short>   </short>
		public KHTMLSettings() : this((Type) null) {
			CreateProxy();
			interceptor.Invoke("KHTMLSettings", "KHTMLSettings()", typeof(void));
		}
		public KHTMLSettings(KHTMLSettings other) : this((Type) null) {
			CreateProxy();
			interceptor.Invoke("KHTMLSettings#", "KHTMLSettings(const KHTMLSettings&)", typeof(void), typeof(KHTMLSettings), other);
		}
		/// <remarks>
		///  Called by constructor and reparseConfiguration
		///      </remarks>		<short>    Called by constructor and reparseConfiguration      </short>
		public void Init() {
			interceptor.Invoke("init", "init()", typeof(void));
		}
		/// <remarks> Read settings from <code>config.</code>
		/// <param> name="config" is a pointer to KConfig object.
		/// </param><param> name="reset" if true, settings are always set; if false,
		///   settings are only set if the config file has a corresponding key.
		///      </param></remarks>		<short>   Read settings from <code>config.</code></short>
		public void Init(KConfig config, bool reset) {
			interceptor.Invoke("init#$", "init(KConfig*, bool)", typeof(void), typeof(KConfig), config, typeof(bool), reset);
		}
		public void Init(KConfig config) {
			interceptor.Invoke("init#", "init(KConfig*)", typeof(void), typeof(KConfig), config);
		}
		public bool ChangeCursor() {
			return (bool) interceptor.Invoke("changeCursor", "changeCursor() const", typeof(bool));
		}
		public bool UnderlineLink() {
			return (bool) interceptor.Invoke("underlineLink", "underlineLink() const", typeof(bool));
		}
		public bool HoverLink() {
			return (bool) interceptor.Invoke("hoverLink", "hoverLink() const", typeof(bool));
		}
		public bool AllowTabulation() {
			return (bool) interceptor.Invoke("allowTabulation", "allowTabulation() const", typeof(bool));
		}
		public bool AutoSpellCheck() {
			return (bool) interceptor.Invoke("autoSpellCheck", "autoSpellCheck() const", typeof(bool));
		}
		public KHTMLSettings.KAnimationAdvice ShowAnimations() {
			return (KHTMLSettings.KAnimationAdvice) interceptor.Invoke("showAnimations", "showAnimations() const", typeof(KHTMLSettings.KAnimationAdvice));
		}
		public KHTMLSettings.KSmoothScrollingMode SmoothScrolling() {
			return (KHTMLSettings.KSmoothScrollingMode) interceptor.Invoke("smoothScrolling", "smoothScrolling() const", typeof(KHTMLSettings.KSmoothScrollingMode));
		}
		public string StdFontName() {
			return (string) interceptor.Invoke("stdFontName", "stdFontName() const", typeof(string));
		}
		public string FixedFontName() {
			return (string) interceptor.Invoke("fixedFontName", "fixedFontName() const", typeof(string));
		}
		public string SerifFontName() {
			return (string) interceptor.Invoke("serifFontName", "serifFontName() const", typeof(string));
		}
		public string SansSerifFontName() {
			return (string) interceptor.Invoke("sansSerifFontName", "sansSerifFontName() const", typeof(string));
		}
		public string CursiveFontName() {
			return (string) interceptor.Invoke("cursiveFontName", "cursiveFontName() const", typeof(string));
		}
		public string FantasyFontName() {
			return (string) interceptor.Invoke("fantasyFontName", "fantasyFontName() const", typeof(string));
		}
		public void SetStdFontName(string n) {
			interceptor.Invoke("setStdFontName$", "setStdFontName(const QString&)", typeof(void), typeof(string), n);
		}
		public void SetFixedFontName(string n) {
			interceptor.Invoke("setFixedFontName$", "setFixedFontName(const QString&)", typeof(void), typeof(string), n);
		}
		public int MinFontSize() {
			return (int) interceptor.Invoke("minFontSize", "minFontSize() const", typeof(int));
		}
		public int MediumFontSize() {
			return (int) interceptor.Invoke("mediumFontSize", "mediumFontSize() const", typeof(int));
		}
		public bool JsErrorsEnabled() {
			return (bool) interceptor.Invoke("jsErrorsEnabled", "jsErrorsEnabled() const", typeof(bool));
		}
		public void SetJSErrorsEnabled(bool enabled) {
			interceptor.Invoke("setJSErrorsEnabled$", "setJSErrorsEnabled(bool)", typeof(void), typeof(bool), enabled);
		}
		public string Encoding() {
			return (string) interceptor.Invoke("encoding", "encoding() const", typeof(string));
		}
		public bool FollowSystemColors() {
			return (bool) interceptor.Invoke("followSystemColors", "followSystemColors() const", typeof(bool));
		}
		public QColor TextColor() {
			return (QColor) interceptor.Invoke("textColor", "textColor() const", typeof(QColor));
		}
		public QColor BaseColor() {
			return (QColor) interceptor.Invoke("baseColor", "baseColor() const", typeof(QColor));
		}
		public QColor LinkColor() {
			return (QColor) interceptor.Invoke("linkColor", "linkColor() const", typeof(QColor));
		}
		public QColor VLinkColor() {
			return (QColor) interceptor.Invoke("vLinkColor", "vLinkColor() const", typeof(QColor));
		}
		public bool AutoLoadImages() {
			return (bool) interceptor.Invoke("autoLoadImages", "autoLoadImages() const", typeof(bool));
		}
		public bool UnfinishedImageFrame() {
			return (bool) interceptor.Invoke("unfinishedImageFrame", "unfinishedImageFrame() const", typeof(bool));
		}
		public bool IsOpenMiddleClickEnabled() {
			return (bool) interceptor.Invoke("isOpenMiddleClickEnabled", "isOpenMiddleClickEnabled()", typeof(bool));
		}
		public bool IsBackRightClickEnabled() {
			return (bool) interceptor.Invoke("isBackRightClickEnabled", "isBackRightClickEnabled()", typeof(bool));
		}
		public bool IsJavaEnabled(string hostname) {
			return (bool) interceptor.Invoke("isJavaEnabled$", "isJavaEnabled(const QString&) const", typeof(bool), typeof(string), hostname);
		}
		public bool IsJavaEnabled() {
			return (bool) interceptor.Invoke("isJavaEnabled", "isJavaEnabled() const", typeof(bool));
		}
		public bool IsJavaScriptEnabled(string hostname) {
			return (bool) interceptor.Invoke("isJavaScriptEnabled$", "isJavaScriptEnabled(const QString&) const", typeof(bool), typeof(string), hostname);
		}
		public bool IsJavaScriptEnabled() {
			return (bool) interceptor.Invoke("isJavaScriptEnabled", "isJavaScriptEnabled() const", typeof(bool));
		}
		public bool IsJavaScriptDebugEnabled(string hostname) {
			return (bool) interceptor.Invoke("isJavaScriptDebugEnabled$", "isJavaScriptDebugEnabled(const QString&) const", typeof(bool), typeof(string), hostname);
		}
		public bool IsJavaScriptDebugEnabled() {
			return (bool) interceptor.Invoke("isJavaScriptDebugEnabled", "isJavaScriptDebugEnabled() const", typeof(bool));
		}
		public bool IsJavaScriptErrorReportingEnabled(string hostname) {
			return (bool) interceptor.Invoke("isJavaScriptErrorReportingEnabled$", "isJavaScriptErrorReportingEnabled(const QString&) const", typeof(bool), typeof(string), hostname);
		}
		public bool IsJavaScriptErrorReportingEnabled() {
			return (bool) interceptor.Invoke("isJavaScriptErrorReportingEnabled", "isJavaScriptErrorReportingEnabled() const", typeof(bool));
		}
		public bool IsPluginsEnabled(string hostname) {
			return (bool) interceptor.Invoke("isPluginsEnabled$", "isPluginsEnabled(const QString&) const", typeof(bool), typeof(string), hostname);
		}
		public bool IsPluginsEnabled() {
			return (bool) interceptor.Invoke("isPluginsEnabled", "isPluginsEnabled() const", typeof(bool));
		}
		public bool IsAdFiltered(string url) {
			return (bool) interceptor.Invoke("isAdFiltered$", "isAdFiltered(const QString&) const", typeof(bool), typeof(string), url);
		}
		public bool IsAdFilterEnabled() {
			return (bool) interceptor.Invoke("isAdFilterEnabled", "isAdFilterEnabled() const", typeof(bool));
		}
		public bool IsHideAdsEnabled() {
			return (bool) interceptor.Invoke("isHideAdsEnabled", "isHideAdsEnabled() const", typeof(bool));
		}
		public void AddAdFilter(string url) {
			interceptor.Invoke("addAdFilter$", "addAdFilter(const QString&)", typeof(void), typeof(string), url);
		}
		public bool AccessKeysEnabled() {
			return (bool) interceptor.Invoke("accessKeysEnabled", "accessKeysEnabled() const", typeof(bool));
		}
		public KHTMLSettings.KJSWindowOpenPolicy WindowOpenPolicy(string hostname) {
			return (KHTMLSettings.KJSWindowOpenPolicy) interceptor.Invoke("windowOpenPolicy$", "windowOpenPolicy(const QString&) const", typeof(KHTMLSettings.KJSWindowOpenPolicy), typeof(string), hostname);
		}
		public KHTMLSettings.KJSWindowOpenPolicy WindowOpenPolicy() {
			return (KHTMLSettings.KJSWindowOpenPolicy) interceptor.Invoke("windowOpenPolicy", "windowOpenPolicy() const", typeof(KHTMLSettings.KJSWindowOpenPolicy));
		}
		public KHTMLSettings.KJSWindowMovePolicy WindowMovePolicy(string hostname) {
			return (KHTMLSettings.KJSWindowMovePolicy) interceptor.Invoke("windowMovePolicy$", "windowMovePolicy(const QString&) const", typeof(KHTMLSettings.KJSWindowMovePolicy), typeof(string), hostname);
		}
		public KHTMLSettings.KJSWindowMovePolicy WindowMovePolicy() {
			return (KHTMLSettings.KJSWindowMovePolicy) interceptor.Invoke("windowMovePolicy", "windowMovePolicy() const", typeof(KHTMLSettings.KJSWindowMovePolicy));
		}
		public KHTMLSettings.KJSWindowResizePolicy WindowResizePolicy(string hostname) {
			return (KHTMLSettings.KJSWindowResizePolicy) interceptor.Invoke("windowResizePolicy$", "windowResizePolicy(const QString&) const", typeof(KHTMLSettings.KJSWindowResizePolicy), typeof(string), hostname);
		}
		public KHTMLSettings.KJSWindowResizePolicy WindowResizePolicy() {
			return (KHTMLSettings.KJSWindowResizePolicy) interceptor.Invoke("windowResizePolicy", "windowResizePolicy() const", typeof(KHTMLSettings.KJSWindowResizePolicy));
		}
		public KHTMLSettings.KJSWindowStatusPolicy WindowStatusPolicy(string hostname) {
			return (KHTMLSettings.KJSWindowStatusPolicy) interceptor.Invoke("windowStatusPolicy$", "windowStatusPolicy(const QString&) const", typeof(KHTMLSettings.KJSWindowStatusPolicy), typeof(string), hostname);
		}
		public KHTMLSettings.KJSWindowStatusPolicy WindowStatusPolicy() {
			return (KHTMLSettings.KJSWindowStatusPolicy) interceptor.Invoke("windowStatusPolicy", "windowStatusPolicy() const", typeof(KHTMLSettings.KJSWindowStatusPolicy));
		}
		public KHTMLSettings.KJSWindowFocusPolicy WindowFocusPolicy(string hostname) {
			return (KHTMLSettings.KJSWindowFocusPolicy) interceptor.Invoke("windowFocusPolicy$", "windowFocusPolicy(const QString&) const", typeof(KHTMLSettings.KJSWindowFocusPolicy), typeof(string), hostname);
		}
		public KHTMLSettings.KJSWindowFocusPolicy WindowFocusPolicy() {
			return (KHTMLSettings.KJSWindowFocusPolicy) interceptor.Invoke("windowFocusPolicy", "windowFocusPolicy() const", typeof(KHTMLSettings.KJSWindowFocusPolicy));
		}
		/// <remarks> reads from <code>config</code>'s current group, forcing initialization
		///  if <code>reset</code> is true.
		/// <param> name="config" is a pointer to KConfig object.
		/// </param><param> name="reset" true if initialization is to be forced.
		/// </param><param> name="global" true if the global domain is to be read.
		/// </param><param> name="pd_settings" will be initialised with the computed (inherited)
		/// 		settings.
		///       </param></remarks>		<short>   reads from <code>config</code>'s current group, forcing initialization  if <code>reset</code> is true.</short>
		public string SettingsToCSS() {
			return (string) interceptor.Invoke("settingsToCSS", "settingsToCSS() const", typeof(string));
		}
		public string UserStyleSheet() {
			return (string) interceptor.Invoke("userStyleSheet", "userStyleSheet() const", typeof(string));
		}
		public bool IsFormCompletionEnabled() {
			return (bool) interceptor.Invoke("isFormCompletionEnabled", "isFormCompletionEnabled() const", typeof(bool));
		}
		public int MaxFormCompletionItems() {
			return (int) interceptor.Invoke("maxFormCompletionItems", "maxFormCompletionItems() const", typeof(int));
		}
		public bool IsAutoDelayedActionsEnabled() {
			return (bool) interceptor.Invoke("isAutoDelayedActionsEnabled", "isAutoDelayedActionsEnabled() const", typeof(bool));
		}
		public List<QPair<QChar, string>> FallbackAccessKeysAssignments() {
			return (List<QPair<QChar, string>>) interceptor.Invoke("fallbackAccessKeysAssignments", "fallbackAccessKeysAssignments() const", typeof(List<QPair<QChar, string>>));
		}
		public void SetJSPopupBlockerPassivePopup(bool enabled) {
			interceptor.Invoke("setJSPopupBlockerPassivePopup$", "setJSPopupBlockerPassivePopup(bool)", typeof(void), typeof(bool), enabled);
		}
		public bool JsPopupBlockerPassivePopup() {
			return (bool) interceptor.Invoke("jsPopupBlockerPassivePopup", "jsPopupBlockerPassivePopup() const", typeof(bool));
		}
		~KHTMLSettings() {
			interceptor.Invoke("~KHTMLSettings", "~KHTMLSettings()", typeof(void));
		}
		public void Dispose() {
			interceptor.Invoke("~KHTMLSettings", "~KHTMLSettings()", typeof(void));
		}
		public static KHTMLSettings.KJavaScriptAdvice StrToAdvice(string _str) {
			return (KHTMLSettings.KJavaScriptAdvice) staticInterceptor.Invoke("strToAdvice$", "strToAdvice(const QString&)", typeof(KHTMLSettings.KJavaScriptAdvice), typeof(string), _str);
		}
		public static void SplitDomainAdvice(string configStr, StringBuilder domain, KHTMLSettings.KJavaScriptAdvice javaAdvice, KHTMLSettings.KJavaScriptAdvice javaScriptAdvice) {
			staticInterceptor.Invoke("splitDomainAdvice$$$$", "splitDomainAdvice(const QString&, QString&, KHTMLSettings::KJavaScriptAdvice&, KHTMLSettings::KJavaScriptAdvice&)", typeof(void), typeof(string), configStr, typeof(StringBuilder), domain, typeof(KHTMLSettings.KJavaScriptAdvice), javaAdvice, typeof(KHTMLSettings.KJavaScriptAdvice), javaScriptAdvice);
		}
		public static string AdviceToStr(KHTMLSettings.KJavaScriptAdvice _advice) {
			return (string) staticInterceptor.Invoke("adviceToStr$", "adviceToStr(KHTMLSettings::KJavaScriptAdvice)", typeof(string), typeof(KHTMLSettings.KJavaScriptAdvice), _advice);
		}
		public static string AvailableFamilies() {
			return (string) staticInterceptor.Invoke("availableFamilies", "availableFamilies()", typeof(string));
		}
	}
}
