//Auto-generated by kalyptus. DO NOT EDIT.
namespace DOM {
	using Kimono;
	using System;
	using Qyoto;
	[SmokeClass("DOM::LinkStyle")]
	public class LinkStyle : Object, IDisposable {
		protected SmokeInvocation interceptor = null;
		private IntPtr smokeObject;
		protected LinkStyle(Type dummy) {}
		protected void CreateProxy() {
			interceptor = new SmokeInvocation(typeof(LinkStyle), this);
		}
		public LinkStyle() : this((Type) null) {
			CreateProxy();
			interceptor.Invoke("LinkStyle", "LinkStyle()", typeof(void));
		}
		public LinkStyle(DOM.LinkStyle other) : this((Type) null) {
			CreateProxy();
			interceptor.Invoke("LinkStyle#", "LinkStyle(const DOM::LinkStyle&)", typeof(void), typeof(DOM.LinkStyle), other);
		}
		public DOM.StyleSheet Sheet() {
			return (DOM.StyleSheet) interceptor.Invoke("sheet", "sheet()", typeof(DOM.StyleSheet));
		}
		public bool IsNull() {
			return (bool) interceptor.Invoke("isNull", "isNull() const", typeof(bool));
		}
		~LinkStyle() {
			interceptor.Invoke("~LinkStyle", "~LinkStyle()", typeof(void));
		}
		public void Dispose() {
			interceptor.Invoke("~LinkStyle", "~LinkStyle()", typeof(void));
		}
	}
}
