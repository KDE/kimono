//Auto-generated by kalyptus. DO NOT EDIT.
namespace DOM {
	using Kimono;
	using System;
	using Qyoto;
	/// <remarks>
	///  Push button. See the <a
	///  href="http://www.w3.org/TR/REC-html40/interact/forms.html#edef-BUTTON">
	///  BUTTON element definition </a> in HTML 4.0.
	///  </remarks>		<short>    Push button.</short>
	[SmokeClass("DOM::HTMLButtonElement")]
	public class HTMLButtonElement : DOM.HTMLElement, IDisposable {
 		protected HTMLButtonElement(Type dummy) : base((Type) null) {}
		protected new void CreateProxy() {
			interceptor = new SmokeInvocation(typeof(HTMLButtonElement), this);
		}
		// DOM::HTMLButtonElement* HTMLButtonElement(DOM::HTMLButtonElementImpl* arg1); >>>> NOT CONVERTED
		public HTMLButtonElement() : this((Type) null) {
			CreateProxy();
			interceptor.Invoke("HTMLButtonElement", "HTMLButtonElement()", typeof(void));
		}
		public HTMLButtonElement(DOM.HTMLButtonElement other) : this((Type) null) {
			CreateProxy();
			interceptor.Invoke("HTMLButtonElement#", "HTMLButtonElement(const DOM::HTMLButtonElement&)", typeof(void), typeof(DOM.HTMLButtonElement), other);
		}
		public HTMLButtonElement(DOM.Node other) : this((Type) null) {
			CreateProxy();
			interceptor.Invoke("HTMLButtonElement#", "HTMLButtonElement(const DOM::Node&)", typeof(void), typeof(DOM.Node), other);
		}
		/// <remarks>
		///  Returns the <code>FORM</code> element containing this
		///  control. Returns null if this control is not within the context
		///  of a form.
		///      </remarks>		<short>    Returns the <code>FORM</code> element containing this  control.</short>
		public new DOM.HTMLFormElement Form() {
			return (DOM.HTMLFormElement) interceptor.Invoke("form", "form() const", typeof(DOM.HTMLFormElement));
		}
		/// <remarks>
		///  A single character access key to give access to the form
		///  control. See the <a
		///  href="http://www.w3.org/TR/REC-html40/interact/forms.html#adef-accesskey">
		///  accesskey attribute definition </a> in HTML 4.0.
		///      </remarks>		<short>    A single character access key to give access to the form  control.</short>
		public DOM.DOMString AccessKey() {
			return (DOM.DOMString) interceptor.Invoke("accessKey", "accessKey() const", typeof(DOM.DOMString));
		}
		/// <remarks>
		///  see accessKey
		///      </remarks>		<short>    see accessKey      </short>
		public void SetAccessKey(DOM.DOMString arg1) {
			interceptor.Invoke("setAccessKey#", "setAccessKey(const DOM::DOMString&)", typeof(void), typeof(DOM.DOMString), arg1);
		}
		/// <remarks>
		///  The control is unavailable in this context. See the <a
		///  href="http://www.w3.org/TR/REC-html40/interact/forms.html#adef-disabled">
		///  disabled attribute definition </a> in HTML 4.0.
		///      </remarks>		<short>    The control is unavailable in this context.</short>
		public bool Disabled() {
			return (bool) interceptor.Invoke("disabled", "disabled() const", typeof(bool));
		}
		/// <remarks>
		///  see disabled
		///      </remarks>		<short>    see disabled      </short>
		public void SetDisabled(bool arg1) {
			interceptor.Invoke("setDisabled$", "setDisabled(bool)", typeof(void), typeof(bool), arg1);
		}
		/// <remarks>
		///  Form control or object name when submitted with a form. See the
		///  <a
		///  href="http://www.w3.org/TR/REC-html40/interact/forms.html#adef-name-BUTTON">
		///  name attribute definition </a> in HTML 4.0.
		///      </remarks>		<short>    Form control or object name when submitted with a form.</short>
		public DOM.DOMString Name() {
			return (DOM.DOMString) interceptor.Invoke("name", "name() const", typeof(DOM.DOMString));
		}
		/// <remarks>
		///  see name
		///      </remarks>		<short>    see name      </short>
		public void SetName(DOM.DOMString arg1) {
			interceptor.Invoke("setName#", "setName(const DOM::DOMString&)", typeof(void), typeof(DOM.DOMString), arg1);
		}
		/// <remarks>
		///  Index that represents the element's position in the tabbing
		///  order. See the <a
		///  href="http://www.w3.org/TR/REC-html40/interact/forms.html#adef-tabindex">
		///  tabindex attribute definition </a> in HTML 4.0.
		///      </remarks>		<short>    Index that represents the element's position in the tabbing  order.</short>
		public long TabIndex() {
			return (long) interceptor.Invoke("tabIndex", "tabIndex() const", typeof(long));
		}
		/// <remarks>
		///  see tabIndex
		///      </remarks>		<short>    see tabIndex      </short>
		public void SetTabIndex(long arg1) {
			interceptor.Invoke("setTabIndex$", "setTabIndex(long)", typeof(void), typeof(long), arg1);
		}
		/// <remarks>
		///  The type of button. See the <a
		///  href="http://www.w3.org/TR/REC-html40/interact/forms.html#adef-type-BUTTON">
		///  type attribute definition </a> in HTML 4.0.
		///      </remarks>		<short>    The type of button.</short>
		public DOM.DOMString type() {
			return (DOM.DOMString) interceptor.Invoke("type", "type() const", typeof(DOM.DOMString));
		}
		/// <remarks>
		///  The current form control value. See the <a
		///  href="http://www.w3.org/TR/REC-html40/interact/forms.html#adef-value-BUTTON">
		///  value attribute definition </a> in HTML 4.0.
		///      </remarks>		<short>    The current form control value.</short>
		public DOM.DOMString Value() {
			return (DOM.DOMString) interceptor.Invoke("value", "value() const", typeof(DOM.DOMString));
		}
		/// <remarks>
		///  see value
		///      </remarks>		<short>    see value      </short>
		public void SetValue(DOM.DOMString arg1) {
			interceptor.Invoke("setValue#", "setValue(const DOM::DOMString&)", typeof(void), typeof(DOM.DOMString), arg1);
		}
		/// <remarks>
		///  Removes keyboard focus from this element.
		///      </remarks>		<short>    Removes keyboard focus from this element.</short>
		public void Blur() {
			interceptor.Invoke("blur", "blur()", typeof(void));
		}
		/// <remarks>
		///  Gives keyboard focus to this element.
		///      </remarks>		<short>    Gives keyboard focus to this element.</short>
		public void Focus() {
			interceptor.Invoke("focus", "focus()", typeof(void));
		}
		~HTMLButtonElement() {
			interceptor.Invoke("~HTMLButtonElement", "~HTMLButtonElement()", typeof(void));
		}
		public new void Dispose() {
			interceptor.Invoke("~HTMLButtonElement", "~HTMLButtonElement()", typeof(void));
		}
	}
}
