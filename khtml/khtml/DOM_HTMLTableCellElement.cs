//Auto-generated by kalyptus. DO NOT EDIT.
namespace DOM {
	using Kimono;
	using System;
	using Qyoto;
	/// <remarks>
	///  The object used to represent the <code>TH</code> and <code>TD</code>
	///  elements. See the <a
	///  href="http://www.w3.org/TR/REC-html40/struct/tables.html#edef-TD">
	///  TD element definition </a> in HTML 4.0.
	///  </remarks>		<short>    The object used to represent the <code>TH</code> and <code>TD</code>  elements.</short>
	[SmokeClass("DOM::HTMLTableCellElement")]
	public class HTMLTableCellElement : DOM.HTMLElement, IDisposable {
 		protected HTMLTableCellElement(Type dummy) : base((Type) null) {}
		protected new void CreateProxy() {
			interceptor = new SmokeInvocation(typeof(HTMLTableCellElement), this);
		}
		// DOM::HTMLTableCellElement* HTMLTableCellElement(DOM::HTMLTableCellElementImpl* arg1); >>>> NOT CONVERTED
		public HTMLTableCellElement() : this((Type) null) {
			CreateProxy();
			interceptor.Invoke("HTMLTableCellElement", "HTMLTableCellElement()", typeof(void));
		}
		public HTMLTableCellElement(DOM.HTMLTableCellElement other) : this((Type) null) {
			CreateProxy();
			interceptor.Invoke("HTMLTableCellElement#", "HTMLTableCellElement(const DOM::HTMLTableCellElement&)", typeof(void), typeof(DOM.HTMLTableCellElement), other);
		}
		public HTMLTableCellElement(DOM.Node other) : this((Type) null) {
			CreateProxy();
			interceptor.Invoke("HTMLTableCellElement#", "HTMLTableCellElement(const DOM::Node&)", typeof(void), typeof(DOM.Node), other);
		}
		/// <remarks>
		///  The index of this cell in the row.
		///      </remarks>		<short>    The index of this cell in the row.</short>
		public long CellIndex() {
			return (long) interceptor.Invoke("cellIndex", "cellIndex() const", typeof(long));
		}
		/// <remarks>
		///  see cellIndex
		///  This function is obsolete - the cellIndex property is actually supposed to be read-only
		///  (http://www.w3.org/DOM/updates/REC-DOM-Level-1-19981001-errata.html)
		///      </remarks>		<short>    see cellIndex </short>
		public void SetCellIndex(long arg1) {
			interceptor.Invoke("setCellIndex$", "setCellIndex(long)", typeof(void), typeof(long), arg1);
		}
		/// <remarks>
		///  Abbreviation for header cells. See the <a
		///  href="http://www.w3.org/TR/REC-html40/struct/tables.html#adef-abbr">
		///  abbr attribute definition </a> in HTML 4.0.
		///      </remarks>		<short>    Abbreviation for header cells.</short>
		public DOM.DOMString Abbr() {
			return (DOM.DOMString) interceptor.Invoke("abbr", "abbr() const", typeof(DOM.DOMString));
		}
		/// <remarks>
		///  see abbr
		///      </remarks>		<short>    see abbr      </short>
		public void SetAbbr(DOM.DOMString arg1) {
			interceptor.Invoke("setAbbr#", "setAbbr(const DOM::DOMString&)", typeof(void), typeof(DOM.DOMString), arg1);
		}
		/// <remarks>
		///  Horizontal alignment of data in cell. See the <a
		///  href="http://www.w3.org/TR/REC-html40/struct/tables.html#adef-align-TD">
		///  align attribute definition </a> in HTML 4.0.
		///      </remarks>		<short>    Horizontal alignment of data in cell.</short>
		public DOM.DOMString Align() {
			return (DOM.DOMString) interceptor.Invoke("align", "align() const", typeof(DOM.DOMString));
		}
		/// <remarks>
		///  see align
		///      </remarks>		<short>    see align      </short>
		public void SetAlign(DOM.DOMString arg1) {
			interceptor.Invoke("setAlign#", "setAlign(const DOM::DOMString&)", typeof(void), typeof(DOM.DOMString), arg1);
		}
		/// <remarks>
		///  Names group of related headers. See the <a
		///  href="http://www.w3.org/TR/REC-html40/struct/tables.html#adef-axis">
		///  axis attribute definition </a> in HTML 4.0.
		///      </remarks>		<short>    Names group of related headers.</short>
		public DOM.DOMString Axis() {
			return (DOM.DOMString) interceptor.Invoke("axis", "axis() const", typeof(DOM.DOMString));
		}
		/// <remarks>
		///  see axis
		///      </remarks>		<short>    see axis      </short>
		public void SetAxis(DOM.DOMString arg1) {
			interceptor.Invoke("setAxis#", "setAxis(const DOM::DOMString&)", typeof(void), typeof(DOM.DOMString), arg1);
		}
		/// <remarks>
		///  Cell background color. See the <a
		///  href="http://www.w3.org/TR/REC-html40/present/graphics.html#adef-bgcolor">
		///  bgcolor attribute definition </a> in HTML 4.0. This attribute
		///  is deprecated in HTML 4.0.
		///      </remarks>		<short>    Cell background color.</short>
		public DOM.DOMString BgColor() {
			return (DOM.DOMString) interceptor.Invoke("bgColor", "bgColor() const", typeof(DOM.DOMString));
		}
		/// <remarks>
		///  see bgColor
		///      </remarks>		<short>    see bgColor      </short>
		public void SetBgColor(DOM.DOMString arg1) {
			interceptor.Invoke("setBgColor#", "setBgColor(const DOM::DOMString&)", typeof(void), typeof(DOM.DOMString), arg1);
		}
		/// <remarks>
		///  Alignment character for cells in a column. See the <a
		///  href="http://www.w3.org/TR/REC-html40/struct/tables.html#adef-char">
		///  char attribute definition </a> in HTML 4.0.
		///      </remarks>		<short>    Alignment character for cells in a column.</short>
		public DOM.DOMString Ch() {
			return (DOM.DOMString) interceptor.Invoke("ch", "ch() const", typeof(DOM.DOMString));
		}
		/// <remarks>
		///  see ch
		///      </remarks>		<short>    see ch      </short>
		public void SetCh(DOM.DOMString arg1) {
			interceptor.Invoke("setCh#", "setCh(const DOM::DOMString&)", typeof(void), typeof(DOM.DOMString), arg1);
		}
		/// <remarks>
		///  Offset of alignment character. See the <a
		///  href="http://www.w3.org/TR/REC-html40/struct/tables.html#adef-charoff">
		///  charoff attribute definition </a> in HTML 4.0.
		///      </remarks>		<short>    Offset of alignment character.</short>
		public DOM.DOMString ChOff() {
			return (DOM.DOMString) interceptor.Invoke("chOff", "chOff() const", typeof(DOM.DOMString));
		}
		/// <remarks>
		///  see chOff
		///      </remarks>		<short>    see chOff      </short>
		public void SetChOff(DOM.DOMString arg1) {
			interceptor.Invoke("setChOff#", "setChOff(const DOM::DOMString&)", typeof(void), typeof(DOM.DOMString), arg1);
		}
		/// <remarks>
		///  Number of columns spanned by cell. See the <a
		///  href="http://www.w3.org/TR/REC-html40/struct/tables.html#adef-colspan">
		///  colspan attribute definition </a> in HTML 4.0.
		///      </remarks>		<short>    Number of columns spanned by cell.</short>
		public long ColSpan() {
			return (long) interceptor.Invoke("colSpan", "colSpan() const", typeof(long));
		}
		/// <remarks>
		///  see colSpan
		///      </remarks>		<short>    see colSpan      </short>
		public void SetColSpan(long arg1) {
			interceptor.Invoke("setColSpan$", "setColSpan(long)", typeof(void), typeof(long), arg1);
		}
		/// <remarks>
		///  List of <code>id</code> attribute values for header cells.
		///  See the <a
		///  href="http://www.w3.org/TR/REC-html40/struct/tables.html#adef-headers">
		///  headers attribute definition </a> in HTML 4.0.
		///      </remarks>		<short>    List of <code>id</code> attribute values for header cells.</short>
		public DOM.DOMString Headers() {
			return (DOM.DOMString) interceptor.Invoke("headers", "headers() const", typeof(DOM.DOMString));
		}
		/// <remarks>
		///  see headers
		///      </remarks>		<short>    see headers      </short>
		public void SetHeaders(DOM.DOMString arg1) {
			interceptor.Invoke("setHeaders#", "setHeaders(const DOM::DOMString&)", typeof(void), typeof(DOM.DOMString), arg1);
		}
		/// <remarks>
		///  Cell height. See the <a
		///  href="http://www.w3.org/TR/REC-html40/struct/tables.html#adef-height-TH">
		///  height attribute definition </a> in HTML 4.0. This attribute is
		///  deprecated in HTML 4.0.
		///      </remarks>		<short>    Cell height.</short>
		public DOM.DOMString Height() {
			return (DOM.DOMString) interceptor.Invoke("height", "height() const", typeof(DOM.DOMString));
		}
		/// <remarks>
		///  see height
		///      </remarks>		<short>    see height      </short>
		public void SetHeight(DOM.DOMString arg1) {
			interceptor.Invoke("setHeight#", "setHeight(const DOM::DOMString&)", typeof(void), typeof(DOM.DOMString), arg1);
		}
		/// <remarks>
		///  Suppress word wrapping. See the <a
		///  href="http://www.w3.org/TR/REC-html40/struct/tables.html#adef-nowrap">
		///  nowrap attribute definition </a> in HTML 4.0. This attribute is
		///  deprecated in HTML 4.0.
		///      </remarks>		<short>    Suppress word wrapping.</short>
		public bool NoWrap() {
			return (bool) interceptor.Invoke("noWrap", "noWrap() const", typeof(bool));
		}
		/// <remarks>
		///  see noWrap
		///      </remarks>		<short>    see noWrap      </short>
		public void SetNoWrap(bool arg1) {
			interceptor.Invoke("setNoWrap$", "setNoWrap(bool)", typeof(void), typeof(bool), arg1);
		}
		/// <remarks>
		///  Number of rows spanned by cell. See the <a
		///  href="http://www.w3.org/TR/REC-html40/struct/tables.html#adef-rowspan">
		///  rowspan attribute definition </a> in HTML 4.0.
		///      </remarks>		<short>    Number of rows spanned by cell.</short>
		public long RowSpan() {
			return (long) interceptor.Invoke("rowSpan", "rowSpan() const", typeof(long));
		}
		/// <remarks>
		///  see rowSpan
		///      </remarks>		<short>    see rowSpan      </short>
		public void SetRowSpan(long arg1) {
			interceptor.Invoke("setRowSpan$", "setRowSpan(long)", typeof(void), typeof(long), arg1);
		}
		/// <remarks>
		///  Scope covered by header cells. See the <a
		///  href="http://www.w3.org/TR/REC-html40/struct/tables.html#adef-scope">
		///  scope attribute definition </a> in HTML 4.0.
		///      </remarks>		<short>    Scope covered by header cells.</short>
		public DOM.DOMString Scope() {
			return (DOM.DOMString) interceptor.Invoke("scope", "scope() const", typeof(DOM.DOMString));
		}
		/// <remarks>
		///  see scope
		///      </remarks>		<short>    see scope      </short>
		public void SetScope(DOM.DOMString arg1) {
			interceptor.Invoke("setScope#", "setScope(const DOM::DOMString&)", typeof(void), typeof(DOM.DOMString), arg1);
		}
		/// <remarks>
		///  Vertical alignment of data in cell. See the <a
		///  href="http://www.w3.org/TR/REC-html40/struct/tables.html#adef-valign">
		///  valign attribute definition </a> in HTML 4.0.
		///      </remarks>		<short>    Vertical alignment of data in cell.</short>
		public DOM.DOMString VAlign() {
			return (DOM.DOMString) interceptor.Invoke("vAlign", "vAlign() const", typeof(DOM.DOMString));
		}
		/// <remarks>
		///  see vAlign
		///      </remarks>		<short>    see vAlign      </short>
		public void SetVAlign(DOM.DOMString arg1) {
			interceptor.Invoke("setVAlign#", "setVAlign(const DOM::DOMString&)", typeof(void), typeof(DOM.DOMString), arg1);
		}
		/// <remarks>
		///  Cell width. See the <a
		///  href="http://www.w3.org/TR/REC-html40/struct/tables.html#adef-width-TH">
		///  width attribute definition </a> in HTML 4.0. This attribute is
		///  deprecated in HTML 4.0.
		///      </remarks>		<short>    Cell width.</short>
		public DOM.DOMString Width() {
			return (DOM.DOMString) interceptor.Invoke("width", "width() const", typeof(DOM.DOMString));
		}
		/// <remarks>
		///  see width
		///      </remarks>		<short>    see width      </short>
		public void SetWidth(DOM.DOMString arg1) {
			interceptor.Invoke("setWidth#", "setWidth(const DOM::DOMString&)", typeof(void), typeof(DOM.DOMString), arg1);
		}
		~HTMLTableCellElement() {
			interceptor.Invoke("~HTMLTableCellElement", "~HTMLTableCellElement()", typeof(void));
		}
		public new void Dispose() {
			interceptor.Invoke("~HTMLTableCellElement", "~HTMLTableCellElement()", typeof(void));
		}
	}
}
