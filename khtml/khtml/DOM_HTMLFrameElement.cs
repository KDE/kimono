//Auto-generated by kalyptus. DO NOT EDIT.
namespace DOM {
	using Kimono;
	using System;
	using Qyoto;
	/// <remarks>
	///  Create a frame. See the <a
	///  href="http://www.w3.org/TR/REC-html40/present/frames.html#edef-FRAME">
	///  FRAME element definition </a> in HTML 4.0.
	///  </remarks>		<short>    Create a frame.</short>
	[SmokeClass("DOM::HTMLFrameElement")]
	public class HTMLFrameElement : DOM.HTMLElement, IDisposable {
 		protected HTMLFrameElement(Type dummy) : base((Type) null) {}
		protected new void CreateProxy() {
			interceptor = new SmokeInvocation(typeof(HTMLFrameElement), this);
		}
		// DOM::HTMLFrameElement* HTMLFrameElement(DOM::HTMLFrameElementImpl* arg1); >>>> NOT CONVERTED
		public HTMLFrameElement() : this((Type) null) {
			CreateProxy();
			interceptor.Invoke("HTMLFrameElement", "HTMLFrameElement()", typeof(void));
		}
		public HTMLFrameElement(DOM.HTMLFrameElement other) : this((Type) null) {
			CreateProxy();
			interceptor.Invoke("HTMLFrameElement#", "HTMLFrameElement(const DOM::HTMLFrameElement&)", typeof(void), typeof(DOM.HTMLFrameElement), other);
		}
		public HTMLFrameElement(DOM.Node other) : this((Type) null) {
			CreateProxy();
			interceptor.Invoke("HTMLFrameElement#", "HTMLFrameElement(const DOM::Node&)", typeof(void), typeof(DOM.Node), other);
		}
		/// <remarks>
		///  Request frame borders. See the <a
		///  href="http://www.w3.org/TR/REC-html40/present/frames.html#adef-frameborder">
		///  frameborder attribute definition </a> in HTML 4.0.
		///      </remarks>		<short>    Request frame borders.</short>
		public DOM.DOMString FrameBorder() {
			return (DOM.DOMString) interceptor.Invoke("frameBorder", "frameBorder() const", typeof(DOM.DOMString));
		}
		/// <remarks>
		///  see frameBorder
		///      </remarks>		<short>    see frameBorder      </short>
		public void SetFrameBorder(DOM.DOMString arg1) {
			interceptor.Invoke("setFrameBorder#", "setFrameBorder(const DOM::DOMString&)", typeof(void), typeof(DOM.DOMString), arg1);
		}
		/// <remarks>
		///  URI designating a long description of this image or frame. See
		///  the <a
		///  href="http://www.w3.org/TR/REC-html40/present/frames.html#adef-longdesc-FRAME">
		///  longdesc attribute definition </a> in HTML 4.0.
		///      </remarks>		<short>    URI designating a long description of this image or frame.</short>
		public DOM.DOMString LongDesc() {
			return (DOM.DOMString) interceptor.Invoke("longDesc", "longDesc() const", typeof(DOM.DOMString));
		}
		/// <remarks>
		///  see longDesc
		///      </remarks>		<short>    see longDesc      </short>
		public void SetLongDesc(DOM.DOMString arg1) {
			interceptor.Invoke("setLongDesc#", "setLongDesc(const DOM::DOMString&)", typeof(void), typeof(DOM.DOMString), arg1);
		}
		/// <remarks>
		///  Frame margin height, in pixels. See the <a
		///  href="http://www.w3.org/TR/REC-html40/present/frames.html#adef-marginheight">
		///  marginheight attribute definition </a> in HTML 4.0.
		///      </remarks>		<short>    Frame margin height, in pixels.</short>
		public DOM.DOMString MarginHeight() {
			return (DOM.DOMString) interceptor.Invoke("marginHeight", "marginHeight() const", typeof(DOM.DOMString));
		}
		/// <remarks>
		///  see marginHeight
		///      </remarks>		<short>    see marginHeight      </short>
		public void SetMarginHeight(DOM.DOMString arg1) {
			interceptor.Invoke("setMarginHeight#", "setMarginHeight(const DOM::DOMString&)", typeof(void), typeof(DOM.DOMString), arg1);
		}
		/// <remarks>
		///  Frame margin width, in pixels. See the <a
		///  href="http://www.w3.org/TR/REC-html40/present/frames.html#adef-marginwidth">
		///  marginwidth attribute definition </a> in HTML 4.0.
		///      </remarks>		<short>    Frame margin width, in pixels.</short>
		public DOM.DOMString MarginWidth() {
			return (DOM.DOMString) interceptor.Invoke("marginWidth", "marginWidth() const", typeof(DOM.DOMString));
		}
		/// <remarks>
		///  see marginWidth
		///      </remarks>		<short>    see marginWidth      </short>
		public void SetMarginWidth(DOM.DOMString arg1) {
			interceptor.Invoke("setMarginWidth#", "setMarginWidth(const DOM::DOMString&)", typeof(void), typeof(DOM.DOMString), arg1);
		}
		/// <remarks>
		///  The frame name (object of the <code>target</code> attribute).
		///  See the <a
		///  href="http://www.w3.org/TR/REC-html40/present/frames.html#adef-name-FRAME">
		///  name attribute definition </a> in HTML 4.0.
		///      </remarks>		<short>    The frame name (object of the <code>target</code> attribute).</short>
		public DOM.DOMString Name() {
			return (DOM.DOMString) interceptor.Invoke("name", "name() const", typeof(DOM.DOMString));
		}
		/// <remarks>
		///  see name
		///      </remarks>		<short>    see name      </short>
		public void SetName(DOM.DOMString arg1) {
			interceptor.Invoke("setName#", "setName(const DOM::DOMString&)", typeof(void), typeof(DOM.DOMString), arg1);
		}
		/// <remarks>
		///  When true, forbid user from resizing frame. See the <a
		///  href="http://www.w3.org/TR/REC-html40/present/frames.html#adef-noresize">
		///  noresize attribute definition </a> in HTML 4.0.
		///      </remarks>		<short>    When true, forbid user from resizing frame.</short>
		public bool NoResize() {
			return (bool) interceptor.Invoke("noResize", "noResize() const", typeof(bool));
		}
		/// <remarks>
		///  see noResize
		///      </remarks>		<short>    see noResize      </short>
		public void SetNoResize(bool arg1) {
			interceptor.Invoke("setNoResize$", "setNoResize(bool)", typeof(void), typeof(bool), arg1);
		}
		/// <remarks>
		///  Specify whether or not the frame should have scrollbars. See
		///  the <a
		///  href="http://www.w3.org/TR/REC-html40/present/frames.html#adef-scrolling">
		///  scrolling attribute definition </a> in HTML 4.0.
		///      </remarks>		<short>    Specify whether or not the frame should have scrollbars.</short>
		public DOM.DOMString Scrolling() {
			return (DOM.DOMString) interceptor.Invoke("scrolling", "scrolling() const", typeof(DOM.DOMString));
		}
		/// <remarks>
		///  see scrolling
		///      </remarks>		<short>    see scrolling      </short>
		public void SetScrolling(DOM.DOMString arg1) {
			interceptor.Invoke("setScrolling#", "setScrolling(const DOM::DOMString&)", typeof(void), typeof(DOM.DOMString), arg1);
		}
		/// <remarks>
		///  A URI designating the initial frame contents. See the <a
		///  href="http://www.w3.org/TR/REC-html40/present/frames.html#adef-src-FRAME">
		///  src attribute definition </a> in HTML 4.0.
		///      </remarks>		<short>    A URI designating the initial frame contents.</short>
		public DOM.DOMString Src() {
			return (DOM.DOMString) interceptor.Invoke("src", "src() const", typeof(DOM.DOMString));
		}
		/// <remarks>
		///  see src
		///      </remarks>		<short>    see src      </short>
		public void SetSrc(DOM.DOMString arg1) {
			interceptor.Invoke("setSrc#", "setSrc(const DOM::DOMString&)", typeof(void), typeof(DOM.DOMString), arg1);
		}
		/// <remarks>
		///  Introduced in DOM Level 2
		///  Returns the document this frame contains, if there is any and
		///  it is available, a Null document otherwise. The attribute is
		///  read-only.
		/// </remarks>		<return> The content Document if available.
		///      </return>
		/// 		<short>    Introduced in DOM Level 2 </short>
		public DOM.Document ContentDocument() {
			return (DOM.Document) interceptor.Invoke("contentDocument", "contentDocument() const", typeof(DOM.Document));
		}
		~HTMLFrameElement() {
			interceptor.Invoke("~HTMLFrameElement", "~HTMLFrameElement()", typeof(void));
		}
		public new void Dispose() {
			interceptor.Invoke("~HTMLFrameElement", "~HTMLFrameElement()", typeof(void));
		}
	}
}
