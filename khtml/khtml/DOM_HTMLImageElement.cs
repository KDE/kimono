//Auto-generated by kalyptus. DO NOT EDIT.
namespace DOM {
	using Kimono;
	using System;
	using Qyoto;
	/// <remarks>
	///  Embedded image. See the <a
	///  href="http://www.w3.org/TR/REC-html40/struct/objects.html#edef-IMG">
	///  IMG element definition </a> in HTML 4.0.
	///  </remarks>		<short>    Embedded image.</short>
	[SmokeClass("DOM::HTMLImageElement")]
	public class HTMLImageElement : DOM.HTMLElement, IDisposable {
 		protected HTMLImageElement(Type dummy) : base((Type) null) {}
		protected new void CreateProxy() {
			interceptor = new SmokeInvocation(typeof(HTMLImageElement), this);
		}
		// DOM::HTMLImageElement* HTMLImageElement(DOM::HTMLImageElementImpl* arg1); >>>> NOT CONVERTED
		public HTMLImageElement() : this((Type) null) {
			CreateProxy();
			interceptor.Invoke("HTMLImageElement", "HTMLImageElement()", typeof(void));
		}
		public HTMLImageElement(DOM.HTMLImageElement other) : this((Type) null) {
			CreateProxy();
			interceptor.Invoke("HTMLImageElement#", "HTMLImageElement(const DOM::HTMLImageElement&)", typeof(void), typeof(DOM.HTMLImageElement), other);
		}
		public HTMLImageElement(DOM.Node other) : this((Type) null) {
			CreateProxy();
			interceptor.Invoke("HTMLImageElement#", "HTMLImageElement(const DOM::Node&)", typeof(void), typeof(DOM.Node), other);
		}
		/// <remarks>
		///  The name of the element (for backwards compatibility).
		///      </remarks>		<short>    The name of the element (for backwards compatibility).</short>
		public DOM.DOMString Name() {
			return (DOM.DOMString) interceptor.Invoke("name", "name() const", typeof(DOM.DOMString));
		}
		/// <remarks>
		///  see name
		///      </remarks>		<short>    see name      </short>
		public void SetName(DOM.DOMString arg1) {
			interceptor.Invoke("setName#", "setName(const DOM::DOMString&)", typeof(void), typeof(DOM.DOMString), arg1);
		}
		/// <remarks>
		///  Aligns this object (vertically or horizontally) with respect to
		///  its surrounding text. See the <a
		///  href="http://www.w3.org/TR/REC-html40/struct/objects.html#adef-align-IMG">
		///  align attribute definition </a> in HTML 4.0. This attribute is
		///  deprecated in HTML 4.0.
		///      </remarks>		<short>    Aligns this object (vertically or horizontally) with respect to  its surrounding text.</short>
		public DOM.DOMString Align() {
			return (DOM.DOMString) interceptor.Invoke("align", "align() const", typeof(DOM.DOMString));
		}
		/// <remarks>
		///  see align
		///      </remarks>		<short>    see align      </short>
		public void SetAlign(DOM.DOMString arg1) {
			interceptor.Invoke("setAlign#", "setAlign(const DOM::DOMString&)", typeof(void), typeof(DOM.DOMString), arg1);
		}
		/// <remarks>
		///  Alternate text for user agents not rendering the normal content
		///  of this element. See the <a
		///  href="http://www.w3.org/TR/REC-html40/struct/objects.html#adef-alt">
		///  alt attribute definition </a> in HTML 4.0.
		///      </remarks>		<short>    Alternate text for user agents not rendering the normal content  of this element.</short>
		public DOM.DOMString Alt() {
			return (DOM.DOMString) interceptor.Invoke("alt", "alt() const", typeof(DOM.DOMString));
		}
		/// <remarks>
		///  see alt
		///      </remarks>		<short>    see alt      </short>
		public void SetAlt(DOM.DOMString arg1) {
			interceptor.Invoke("setAlt#", "setAlt(const DOM::DOMString&)", typeof(void), typeof(DOM.DOMString), arg1);
		}
		/// <remarks>
		///  Width of border around image. See the <a
		///  href="http://www.w3.org/TR/REC-html40/struct/objects.html#adef-border-IMG">
		///  border attribute definition </a> in HTML 4.0. This attribute is
		///  deprecated in HTML 4.0.
		///      </remarks>		<short>    Width of border around image.</short>
		public DOM.DOMString GetBorder() {
			return (DOM.DOMString) interceptor.Invoke("getBorder", "getBorder() const", typeof(DOM.DOMString));
		}
		/// <remarks>
		///  see border
		///       </remarks>		<short>    see border       </short>
		public void SetBorder(DOM.DOMString arg1) {
			interceptor.Invoke("setBorder#", "setBorder(const DOM::DOMString&)", typeof(void), typeof(DOM.DOMString), arg1);
		}
		/// <remarks>
		///  Override height. See the <a
		///  href="http://www.w3.org/TR/REC-html40/struct/objects.html#adef-height-IMG">
		///  height attribute definition </a> in HTML 4.0.
		///      </remarks>		<short>    Override height.</short>
		public long Height() {
			return (long) interceptor.Invoke("height", "height() const", typeof(long));
		}
		/// <remarks>
		///  see height
		///      </remarks>		<short>    see height      </short>
		public void SetHeight(long arg1) {
			interceptor.Invoke("setHeight$", "setHeight(long)", typeof(void), typeof(long), arg1);
		}
		/// <remarks>
		///  Horizontal space to the left and right of this image. See the
		///  <a
		///  href="http://www.w3.org/TR/REC-html40/struct/objects.html#adef-hspace">
		///  hspace attribute definition </a> in HTML 4.0. This attribute is
		///  deprecated in HTML 4.0.
		///      </remarks>		<short>    Horizontal space to the left and right of this image.</short>
		public long Hspace() {
			return (long) interceptor.Invoke("hspace", "hspace() const", typeof(long));
		}
		/// <remarks>
		///  see hspace
		///      </remarks>		<short>    see hspace      </short>
		public void SetHspace(long arg1) {
			interceptor.Invoke("setHspace$", "setHspace(long)", typeof(void), typeof(long), arg1);
		}
		/// <remarks>
		///  Use server-side image map. See the <a
		///  href="http://www.w3.org/TR/REC-html40/struct/objects.html#adef-ismap">
		///  ismap attribute definition </a> in HTML 4.0.
		///      </remarks>		<short>    Use server-side image map.</short>
		public bool IsMap() {
			return (bool) interceptor.Invoke("isMap", "isMap() const", typeof(bool));
		}
		/// <remarks>
		///  see isMap
		///      </remarks>		<short>    see isMap      </short>
		public void SetIsMap(bool arg1) {
			interceptor.Invoke("setIsMap$", "setIsMap(bool)", typeof(void), typeof(bool), arg1);
		}
		/// <remarks>
		///  URI designating a long description of this image or frame. See
		///  the <a
		///  href="http://www.w3.org/TR/REC-html40/struct/objects.html#adef-longdesc-IMG">
		///  longdesc attribute definition </a> in HTML 4.0.
		///      </remarks>		<short>    URI designating a long description of this image or frame.</short>
		public DOM.DOMString LongDesc() {
			return (DOM.DOMString) interceptor.Invoke("longDesc", "longDesc() const", typeof(DOM.DOMString));
		}
		/// <remarks>
		///  see longDesc
		///      </remarks>		<short>    see longDesc      </short>
		public void SetLongDesc(DOM.DOMString arg1) {
			interceptor.Invoke("setLongDesc#", "setLongDesc(const DOM::DOMString&)", typeof(void), typeof(DOM.DOMString), arg1);
		}
		/// <remarks>
		///  URI designating the source of this image. See the <a
		///  href="http://www.w3.org/TR/REC-html40/struct/objects.html#adef-src-IMG">
		///  src attribute definition </a> in HTML 4.0.
		///      </remarks>		<short>    URI designating the source of this image.</short>
		public DOM.DOMString Src() {
			return (DOM.DOMString) interceptor.Invoke("src", "src() const", typeof(DOM.DOMString));
		}
		/// <remarks>
		///  see src
		///      </remarks>		<short>    see src      </short>
		public void SetSrc(DOM.DOMString arg1) {
			interceptor.Invoke("setSrc#", "setSrc(const DOM::DOMString&)", typeof(void), typeof(DOM.DOMString), arg1);
		}
		/// <remarks>
		///  Use client-side image map. See the <a
		///  href="http://www.w3.org/TR/REC-html40/struct/objects.html#adef-usemap">
		///  usemap attribute definition </a> in HTML 4.0.
		///      </remarks>		<short>    Use client-side image map.</short>
		public DOM.DOMString UseMap() {
			return (DOM.DOMString) interceptor.Invoke("useMap", "useMap() const", typeof(DOM.DOMString));
		}
		/// <remarks>
		///  see useMap
		///      </remarks>		<short>    see useMap      </short>
		public void SetUseMap(DOM.DOMString arg1) {
			interceptor.Invoke("setUseMap#", "setUseMap(const DOM::DOMString&)", typeof(void), typeof(DOM.DOMString), arg1);
		}
		/// <remarks>
		///  Vertical space above and below this image. See the <a
		///  href="http://www.w3.org/TR/REC-html40/struct/objects.html#adef-vspace">
		///  vspace attribute definition </a> in HTML 4.0. This attribute is
		///  deprecated in HTML 4.0.
		///      </remarks>		<short>    Vertical space above and below this image.</short>
		public long Vspace() {
			return (long) interceptor.Invoke("vspace", "vspace() const", typeof(long));
		}
		/// <remarks>
		///  see vspace
		///      </remarks>		<short>    see vspace      </short>
		public void SetVspace(long arg1) {
			interceptor.Invoke("setVspace$", "setVspace(long)", typeof(void), typeof(long), arg1);
		}
		/// <remarks>
		///  Override width. See the <a
		///  href="http://www.w3.org/TR/REC-html40/struct/objects.html#adef-width-IMG">
		///  width attribute definition </a> in HTML 4.0.
		///      </remarks>		<short>    Override width.</short>
		public long Width() {
			return (long) interceptor.Invoke("width", "width() const", typeof(long));
		}
		/// <remarks>
		///  see width
		///      </remarks>		<short>    see width      </short>
		public void SetWidth(long arg1) {
			interceptor.Invoke("setWidth$", "setWidth(long)", typeof(void), typeof(long), arg1);
		}
		/// <remarks>
		///  Nonstandard extension to DOM.ImgElement
		///      </remarks>		<short>    Nonstandard extension to DOM.ImgElement      </short>
		public long X() {
			return (long) interceptor.Invoke("x", "x() const", typeof(long));
		}
		public long Y() {
			return (long) interceptor.Invoke("y", "y() const", typeof(long));
		}
		~HTMLImageElement() {
			interceptor.Invoke("~HTMLImageElement", "~HTMLImageElement()", typeof(void));
		}
		public new void Dispose() {
			interceptor.Invoke("~HTMLImageElement", "~HTMLImageElement()", typeof(void));
		}
	}
}
