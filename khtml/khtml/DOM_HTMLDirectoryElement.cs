//Auto-generated by kalyptus. DO NOT EDIT.
namespace DOM {
	using Kimono;
	using System;
	using Qyoto;
	/// <remarks>
	///  Directory list. See the <a
	///  href="http://www.w3.org/TR/REC-html40/struct/lists.html#edef-DIR">
	///  DIR element definition </a> in HTML 4.0. This element is deprecated
	///  in HTML 4.0.
	///  </remarks>		<short>    Directory list.</short>
	[SmokeClass("DOM::HTMLDirectoryElement")]
	public class HTMLDirectoryElement : DOM.HTMLElement, IDisposable {
 		protected HTMLDirectoryElement(Type dummy) : base((Type) null) {}
		protected new void CreateProxy() {
			interceptor = new SmokeInvocation(typeof(HTMLDirectoryElement), this);
		}
		// DOM::HTMLDirectoryElement* HTMLDirectoryElement(DOM::HTMLDirectoryElementImpl* arg1); >>>> NOT CONVERTED
		public HTMLDirectoryElement() : this((Type) null) {
			CreateProxy();
			interceptor.Invoke("HTMLDirectoryElement", "HTMLDirectoryElement()", typeof(void));
		}
		public HTMLDirectoryElement(DOM.HTMLDirectoryElement other) : this((Type) null) {
			CreateProxy();
			interceptor.Invoke("HTMLDirectoryElement#", "HTMLDirectoryElement(const DOM::HTMLDirectoryElement&)", typeof(void), typeof(DOM.HTMLDirectoryElement), other);
		}
		public HTMLDirectoryElement(DOM.Node other) : this((Type) null) {
			CreateProxy();
			interceptor.Invoke("HTMLDirectoryElement#", "HTMLDirectoryElement(const DOM::Node&)", typeof(void), typeof(DOM.Node), other);
		}
		/// <remarks>
		///  Reduce spacing between list items. See the <a
		///  href="http://www.w3.org/TR/REC-html40/struct/lists.html#adef-compact">
		///  compact attribute definition </a> in HTML 4.0. This attribute
		///  is deprecated in HTML 4.0.
		///      </remarks>		<short>    Reduce spacing between list items.</short>
		public bool Compact() {
			return (bool) interceptor.Invoke("compact", "compact() const", typeof(bool));
		}
		/// <remarks>
		///  see compact
		///      </remarks>		<short>    see compact      </short>
		public void SetCompact(bool arg1) {
			interceptor.Invoke("setCompact$", "setCompact(bool)", typeof(void), typeof(bool), arg1);
		}
		~HTMLDirectoryElement() {
			interceptor.Invoke("~HTMLDirectoryElement", "~HTMLDirectoryElement()", typeof(void));
		}
		public new void Dispose() {
			interceptor.Invoke("~HTMLDirectoryElement", "~HTMLDirectoryElement()", typeof(void));
		}
	}
}
