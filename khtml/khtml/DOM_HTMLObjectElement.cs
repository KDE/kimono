//Auto-generated by kalyptus. DO NOT EDIT.
namespace DOM {
	using Kimono;
	using System;
	using Qyoto;
	/// <remarks>
	///  Generic embedded object. Note. In principle, all properties on the
	///  object element are read-write but in some environments some
	///  properties may be read-only once the underlying object is
	///  instantiated. See the <a
	///  href="http://www.w3.org/TR/REC-html40/struct/objects.html#edef-OBJECT">
	///  OBJECT element definition </a> in HTML 4.0.
	///  </remarks>		<short>    Generic embedded object.</short>
	[SmokeClass("DOM::HTMLObjectElement")]
	public class HTMLObjectElement : DOM.HTMLElement, IDisposable {
 		protected HTMLObjectElement(Type dummy) : base((Type) null) {}
		protected new void CreateProxy() {
			interceptor = new SmokeInvocation(typeof(HTMLObjectElement), this);
		}
		// DOM::HTMLObjectElement* HTMLObjectElement(DOM::HTMLObjectElementImpl* arg1); >>>> NOT CONVERTED
		public HTMLObjectElement() : this((Type) null) {
			CreateProxy();
			interceptor.Invoke("HTMLObjectElement", "HTMLObjectElement()", typeof(void));
		}
		public HTMLObjectElement(DOM.HTMLObjectElement other) : this((Type) null) {
			CreateProxy();
			interceptor.Invoke("HTMLObjectElement#", "HTMLObjectElement(const DOM::HTMLObjectElement&)", typeof(void), typeof(DOM.HTMLObjectElement), other);
		}
		public HTMLObjectElement(DOM.Node other) : this((Type) null) {
			CreateProxy();
			interceptor.Invoke("HTMLObjectElement#", "HTMLObjectElement(const DOM::Node&)", typeof(void), typeof(DOM.Node), other);
		}
		/// <remarks>
		///  Returns the <code>FORM</code> element containing this
		///  control. Returns null if this control is not within the context
		///  of a form.
		///      </remarks>		<short>    Returns the <code>FORM</code> element containing this  control.</short>
		public new DOM.HTMLFormElement Form() {
			return (DOM.HTMLFormElement) interceptor.Invoke("form", "form() const", typeof(DOM.HTMLFormElement));
		}
		/// <remarks>
		///  Applet class file. See the <code>code</code> attribute for
		///  HTMLAppletElement.
		///      </remarks>		<short>    Applet class file.</short>
		public DOM.DOMString Code() {
			return (DOM.DOMString) interceptor.Invoke("code", "code() const", typeof(DOM.DOMString));
		}
		/// <remarks>
		///  see code
		///      </remarks>		<short>    see code      </short>
		public void SetCode(DOM.DOMString arg1) {
			interceptor.Invoke("setCode#", "setCode(const DOM::DOMString&)", typeof(void), typeof(DOM.DOMString), arg1);
		}
		/// <remarks>
		///  Aligns this object (vertically or horizontally) with respect to
		///  its surrounding text. See the <a
		///  href="http://www.w3.org/TR/REC-html40/struct/objects.html#adef-align-IMG">
		///  align attribute definition </a> in HTML 4.0. This attribute is
		///  deprecated in HTML 4.0.
		///      </remarks>		<short>    Aligns this object (vertically or horizontally) with respect to  its surrounding text.</short>
		public DOM.DOMString Align() {
			return (DOM.DOMString) interceptor.Invoke("align", "align() const", typeof(DOM.DOMString));
		}
		/// <remarks>
		///  see align
		///      </remarks>		<short>    see align      </short>
		public void SetAlign(DOM.DOMString arg1) {
			interceptor.Invoke("setAlign#", "setAlign(const DOM::DOMString&)", typeof(void), typeof(DOM.DOMString), arg1);
		}
		/// <remarks>
		///  Space-separated list of archives. See the <a
		///  href="http://www.w3.org/TR/REC-html40/struct/objects.html#adef-archive-OBJECT">
		///  archive attribute definition </a> in HTML 4.0.
		///      </remarks>		<short>    Space-separated list of archives.</short>
		public DOM.DOMString Archive() {
			return (DOM.DOMString) interceptor.Invoke("archive", "archive() const", typeof(DOM.DOMString));
		}
		/// <remarks>
		///  see archive
		///      </remarks>		<short>    see archive      </short>
		public void SetArchive(DOM.DOMString arg1) {
			interceptor.Invoke("setArchive#", "setArchive(const DOM::DOMString&)", typeof(void), typeof(DOM.DOMString), arg1);
		}
		/// <remarks>
		///  Width of border around the object. See the <a
		///  href="http://www.w3.org/TR/REC-html40/struct/objects.html#adef-border">
		///  border attribute definition </a> in HTML 4.0. This attribute is
		///  deprecated in HTML 4.0.
		///      </remarks>		<short>    Width of border around the object.</short>
		public DOM.DOMString Border() {
			return (DOM.DOMString) interceptor.Invoke("border", "border() const", typeof(DOM.DOMString));
		}
		/// <remarks>
		///  see border
		///      </remarks>		<short>    see border      </short>
		public void SetBorder(DOM.DOMString arg1) {
			interceptor.Invoke("setBorder#", "setBorder(const DOM::DOMString&)", typeof(void), typeof(DOM.DOMString), arg1);
		}
		/// <remarks>
		///  Base URI for <code>classid</code> , <code>data</code> , and
		///  <code>archive</code> attributes. See the <a
		///  href="http://www.w3.org/TR/REC-html40/struct/objects.html#adef-codebase-OBJECT">
		///  codebase attribute definition </a> in HTML 4.0.
		///      </remarks>		<short>    Base URI for <code>classid</code> , <code>data</code> , and  <code>archive</code> attributes.</short>
		public DOM.DOMString CodeBase() {
			return (DOM.DOMString) interceptor.Invoke("codeBase", "codeBase() const", typeof(DOM.DOMString));
		}
		/// <remarks>
		///  see codeBase
		///      </remarks>		<short>    see codeBase      </short>
		public void SetCodeBase(DOM.DOMString arg1) {
			interceptor.Invoke("setCodeBase#", "setCodeBase(const DOM::DOMString&)", typeof(void), typeof(DOM.DOMString), arg1);
		}
		/// <remarks>
		///  Content type for data downloaded via <code>classid</code>
		///  attribute. See the <a
		///  href="http://www.w3.org/TR/REC-html40/struct/objects.html#adef-codetype">
		///  codetype attribute definition </a> in HTML 4.0.
		///      </remarks>		<short>    Content type for data downloaded via <code>classid</code>  attribute.</short>
		public DOM.DOMString CodeType() {
			return (DOM.DOMString) interceptor.Invoke("codeType", "codeType() const", typeof(DOM.DOMString));
		}
		/// <remarks>
		///  see codeType
		///      </remarks>		<short>    see codeType      </short>
		public void SetCodeType(DOM.DOMString arg1) {
			interceptor.Invoke("setCodeType#", "setCodeType(const DOM::DOMString&)", typeof(void), typeof(DOM.DOMString), arg1);
		}
		/// <remarks>
		///  A URI specifying the location of the object's data. See the <a
		///  href="http://www.w3.org/TR/REC-html40/struct/objects.html#adef-data">
		///  data attribute definition </a> in HTML 4.0.
		///      </remarks>		<short>    A URI specifying the location of the object's data.</short>
		public DOM.DOMString Data() {
			return (DOM.DOMString) interceptor.Invoke("data", "data() const", typeof(DOM.DOMString));
		}
		/// <remarks>
		///  see data
		///      </remarks>		<short>    see data      </short>
		public void SetData(DOM.DOMString arg1) {
			interceptor.Invoke("setData#", "setData(const DOM::DOMString&)", typeof(void), typeof(DOM.DOMString), arg1);
		}
		/// <remarks>
		///  Declare (for future reference), but do not instantiate, this
		///  object. See the <a
		///  href="http://www.w3.org/TR/REC-html40/struct/objects.html#adef-declare">
		///  declare attribute definition </a> in HTML 4.0.
		///      </remarks>		<short>    Declare (for future reference), but do not instantiate, this  object.</short>
		public bool Declare() {
			return (bool) interceptor.Invoke("declare", "declare() const", typeof(bool));
		}
		/// <remarks>
		///  see declare
		///      </remarks>		<short>    see declare      </short>
		public void SetDeclare(bool arg1) {
			interceptor.Invoke("setDeclare$", "setDeclare(bool)", typeof(void), typeof(bool), arg1);
		}
		/// <remarks>
		///  Override height. See the <a
		///  href="http://www.w3.org/TR/REC-html40/struct/objects.html#adef-height-IMG">
		///  height attribute definition </a> in HTML 4.0.
		///      </remarks>		<short>    Override height.</short>
		public DOM.DOMString Height() {
			return (DOM.DOMString) interceptor.Invoke("height", "height() const", typeof(DOM.DOMString));
		}
		/// <remarks>
		///  see height
		///      </remarks>		<short>    see height      </short>
		public void SetHeight(DOM.DOMString arg1) {
			interceptor.Invoke("setHeight#", "setHeight(const DOM::DOMString&)", typeof(void), typeof(DOM.DOMString), arg1);
		}
		/// <remarks>
		///  Horizontal space, in pixels, to the left and right of this image, applet,
		///  or object. See the <a
		///  href="http://www.w3.org/TR/REC-html40/struct/objects.html#adef-hspace">
		///  hspace attribute definition </a> in HTML 4.0. This attribute is
		///  deprecated in HTML 4.0.
		///      </remarks>		<short>    Horizontal space, in pixels, to the left and right of this image, applet,  or object.</short>
		public long GetHspace() {
			return (long) interceptor.Invoke("getHspace", "getHspace() const", typeof(long));
		}
		/// <remarks>
		///  see hspace
		///       </remarks>		<short>    see hspace       </short>
		public void SetHspace(long arg1) {
			interceptor.Invoke("setHspace$", "setHspace(long)", typeof(void), typeof(long), arg1);
		}
		/// <remarks>
		///  Form control or object name when submitted with a form. See the
		///  <a
		///  href="http://www.w3.org/TR/REC-html40/interact/forms.html#adef-name-INPUT">
		///  name attribute definition </a> in HTML 4.0.
		///      </remarks>		<short>    Form control or object name when submitted with a form.</short>
		public DOM.DOMString Name() {
			return (DOM.DOMString) interceptor.Invoke("name", "name() const", typeof(DOM.DOMString));
		}
		/// <remarks>
		///  see name
		///      </remarks>		<short>    see name      </short>
		public void SetName(DOM.DOMString arg1) {
			interceptor.Invoke("setName#", "setName(const DOM::DOMString&)", typeof(void), typeof(DOM.DOMString), arg1);
		}
		/// <remarks>
		///  Message to render while loading the object. See the <a
		///  href="http://www.w3.org/TR/REC-html40/struct/objects.html#adef-standby">
		///  standby attribute definition </a> in HTML 4.0.
		///      </remarks>		<short>    Message to render while loading the object.</short>
		public DOM.DOMString Standby() {
			return (DOM.DOMString) interceptor.Invoke("standby", "standby() const", typeof(DOM.DOMString));
		}
		/// <remarks>
		///  see standby
		///      </remarks>		<short>    see standby      </short>
		public void SetStandby(DOM.DOMString arg1) {
			interceptor.Invoke("setStandby#", "setStandby(const DOM::DOMString&)", typeof(void), typeof(DOM.DOMString), arg1);
		}
		/// <remarks>
		///  Index that represents the element's position in the tabbing
		///  order. See the <a
		///  href="http://www.w3.org/TR/REC-html40/interact/forms.html#adef-tabindex">
		///  tabindex attribute definition </a> in HTML 4.0.
		///      </remarks>		<short>    Index that represents the element's position in the tabbing  order.</short>
		public long TabIndex() {
			return (long) interceptor.Invoke("tabIndex", "tabIndex() const", typeof(long));
		}
		/// <remarks>
		///  see tabIndex
		///      </remarks>		<short>    see tabIndex      </short>
		public void SetTabIndex(long arg1) {
			interceptor.Invoke("setTabIndex$", "setTabIndex(long)", typeof(void), typeof(long), arg1);
		}
		/// <remarks>
		///  Content type for data downloaded via <code>data</code>
		///  attribute. See the <a
		///  href="http://www.w3.org/TR/REC-html40/struct/objects.html#adef-type-OBJECT">
		///  type attribute definition </a> in HTML 4.0.
		///      </remarks>		<short>    Content type for data downloaded via <code>data</code>  attribute.</short>
		public DOM.DOMString type() {
			return (DOM.DOMString) interceptor.Invoke("type", "type() const", typeof(DOM.DOMString));
		}
		/// <remarks>
		///  see type
		///      </remarks>		<short>    see type      </short>
		public void SetType(DOM.DOMString arg1) {
			interceptor.Invoke("setType#", "setType(const DOM::DOMString&)", typeof(void), typeof(DOM.DOMString), arg1);
		}
		/// <remarks>
		///  Use client-side image map. See the <a
		///  href="http://www.w3.org/TR/REC-html40/struct/objects.html#adef-usemap">
		///  usemap attribute definition </a> in HTML 4.0.
		///      </remarks>		<short>    Use client-side image map.</short>
		public DOM.DOMString UseMap() {
			return (DOM.DOMString) interceptor.Invoke("useMap", "useMap() const", typeof(DOM.DOMString));
		}
		/// <remarks>
		///  see useMap
		///      </remarks>		<short>    see useMap      </short>
		public void SetUseMap(DOM.DOMString arg1) {
			interceptor.Invoke("setUseMap#", "setUseMap(const DOM::DOMString&)", typeof(void), typeof(DOM.DOMString), arg1);
		}
		/// <remarks>
		///  Vertical space, in pixels, above and below this image, applet, or object.
		///  See the <a
		///  href="http://www.w3.org/TR/REC-html40/struct/objects.html#adef-vspace">
		///  vspace attribute definition </a> in HTML 4.0. This attribute is
		///  deprecated in HTML 4.0.
		///      </remarks>		<short>    Vertical space, in pixels, above and below this image, applet, or object.</short>
		public long GetVspace() {
			return (long) interceptor.Invoke("getVspace", "getVspace() const", typeof(long));
		}
		/// <remarks>
		///  see vspace
		///       </remarks>		<short>    see vspace       </short>
		public void SetVspace(long arg1) {
			interceptor.Invoke("setVspace$", "setVspace(long)", typeof(void), typeof(long), arg1);
		}
		/// <remarks>
		///  Override width. See the <a
		///  href="http://www.w3.org/TR/REC-html40/struct/objects.html#adef-width-IMG">
		///  width attribute definition </a> in HTML 4.0.
		///      </remarks>		<short>    Override width.</short>
		public DOM.DOMString Width() {
			return (DOM.DOMString) interceptor.Invoke("width", "width() const", typeof(DOM.DOMString));
		}
		/// <remarks>
		///  see width
		///      </remarks>		<short>    see width      </short>
		public void SetWidth(DOM.DOMString arg1) {
			interceptor.Invoke("setWidth#", "setWidth(const DOM::DOMString&)", typeof(void), typeof(DOM.DOMString), arg1);
		}
		/// <remarks>
		///  Introduced in DOM Level 2
		///  Returns the document this iframe contains, if there is any and
		///  it is available, a Null document otherwise. The attribute is
		///  read-only.
		/// </remarks>		<return> The content Document if available.
		///      </return>
		/// 		<short>    Introduced in DOM Level 2 </short>
		public DOM.Document ContentDocument() {
			return (DOM.Document) interceptor.Invoke("contentDocument", "contentDocument() const", typeof(DOM.Document));
		}
		~HTMLObjectElement() {
			interceptor.Invoke("~HTMLObjectElement", "~HTMLObjectElement()", typeof(void));
		}
		public new void Dispose() {
			interceptor.Invoke("~HTMLObjectElement", "~HTMLObjectElement()", typeof(void));
		}
	}
}
