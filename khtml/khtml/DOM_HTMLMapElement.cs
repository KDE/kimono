//Auto-generated by kalyptus. DO NOT EDIT.
namespace DOM {
	using Kimono;
	using System;
	using Qyoto;
	/// <remarks>
	///  Client-side image map. See the <a
	///  href="http://www.w3.org/TR/REC-html40/struct/objects.html#edef-MAP">
	///  MAP element definition </a> in HTML 4.0.
	///  </remarks>		<short>    Client-side image map.</short>
	[SmokeClass("DOM::HTMLMapElement")]
	public class HTMLMapElement : DOM.HTMLElement, IDisposable {
 		protected HTMLMapElement(Type dummy) : base((Type) null) {}
		protected new void CreateProxy() {
			interceptor = new SmokeInvocation(typeof(HTMLMapElement), this);
		}
		// DOM::HTMLMapElement* HTMLMapElement(DOM::HTMLMapElementImpl* arg1); >>>> NOT CONVERTED
		public HTMLMapElement() : this((Type) null) {
			CreateProxy();
			interceptor.Invoke("HTMLMapElement", "HTMLMapElement()", typeof(void));
		}
		public HTMLMapElement(DOM.HTMLMapElement other) : this((Type) null) {
			CreateProxy();
			interceptor.Invoke("HTMLMapElement#", "HTMLMapElement(const DOM::HTMLMapElement&)", typeof(void), typeof(DOM.HTMLMapElement), other);
		}
		public HTMLMapElement(DOM.Node other) : this((Type) null) {
			CreateProxy();
			interceptor.Invoke("HTMLMapElement#", "HTMLMapElement(const DOM::Node&)", typeof(void), typeof(DOM.Node), other);
		}
		/// <remarks>
		///  The list of areas defined for the image map.
		///      </remarks>		<short>    The list of areas defined for the image map.</short>
		public DOM.HTMLCollection Areas() {
			return (DOM.HTMLCollection) interceptor.Invoke("areas", "areas() const", typeof(DOM.HTMLCollection));
		}
		/// <remarks>
		///  Names the map (for use with <code>usemap</code> ). See the <a
		///  href="http://www.w3.org/TR/REC-html40/struct/objects.html#adef-name-MAP">
		///  name attribute definition </a> in HTML 4.0.
		///      </remarks>		<short>    Names the map (for use with <code>usemap</code> ).</short>
		public DOM.DOMString Name() {
			return (DOM.DOMString) interceptor.Invoke("name", "name() const", typeof(DOM.DOMString));
		}
		/// <remarks>
		///  see name
		///      </remarks>		<short>    see name      </short>
		public void SetName(DOM.DOMString arg1) {
			interceptor.Invoke("setName#", "setName(const DOM::DOMString&)", typeof(void), typeof(DOM.DOMString), arg1);
		}
		~HTMLMapElement() {
			interceptor.Invoke("~HTMLMapElement", "~HTMLMapElement()", typeof(void));
		}
		public new void Dispose() {
			interceptor.Invoke("~HTMLMapElement", "~HTMLMapElement()", typeof(void));
		}
	}
}
