//Auto-generated by kalyptus. DO NOT EDIT.
namespace DOM {
	using Kimono;
	using System;
	using Qyoto;
	/// <remarks>
	///  The <code>CSSUnkownRule</code> interface represents an at-rule
	///  not supported by this user agent.
	///  </remarks>		<short>    The <code>CSSUnkownRule</code> interface represents an at-rule  not supported by this user agent.</short>
	[SmokeClass("DOM::CSSUnknownRule")]
	public class CSSUnknownRule : DOM.CSSRule, IDisposable {
 		protected CSSUnknownRule(Type dummy) : base((Type) null) {}
		protected new void CreateProxy() {
			interceptor = new SmokeInvocation(typeof(CSSUnknownRule), this);
		}
		// DOM::CSSUnknownRule* CSSUnknownRule(DOM::CSSUnknownRuleImpl* arg1); >>>> NOT CONVERTED
		public CSSUnknownRule() : this((Type) null) {
			CreateProxy();
			interceptor.Invoke("CSSUnknownRule", "CSSUnknownRule()", typeof(void));
		}
		public CSSUnknownRule(DOM.CSSUnknownRule other) : this((Type) null) {
			CreateProxy();
			interceptor.Invoke("CSSUnknownRule#", "CSSUnknownRule(const DOM::CSSUnknownRule&)", typeof(void), typeof(DOM.CSSUnknownRule), other);
		}
		public CSSUnknownRule(DOM.CSSRule other) : this((Type) null) {
			CreateProxy();
			interceptor.Invoke("CSSUnknownRule#", "CSSUnknownRule(const DOM::CSSRule&)", typeof(void), typeof(DOM.CSSRule), other);
		}
		~CSSUnknownRule() {
			interceptor.Invoke("~CSSUnknownRule", "~CSSUnknownRule()", typeof(void));
		}
		public new void Dispose() {
			interceptor.Invoke("~CSSUnknownRule", "~CSSUnknownRule()", typeof(void));
		}
	}
}
