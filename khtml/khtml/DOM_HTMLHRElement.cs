//Auto-generated by kalyptus. DO NOT EDIT.
namespace DOM {
	using Kimono;
	using System;
	using Qyoto;
	/// <remarks>
	///  Create a horizontal rule. See the <a
	///  href="http://www.w3.org/TR/REC-html40/present/graphics.html#edef-HR">
	///  HR element definition </a> in HTML 4.0.
	///  </remarks>		<short>    Create a horizontal rule.</short>
	[SmokeClass("DOM::HTMLHRElement")]
	public class HTMLHRElement : DOM.HTMLElement, IDisposable {
 		protected HTMLHRElement(Type dummy) : base((Type) null) {}
		protected new void CreateProxy() {
			interceptor = new SmokeInvocation(typeof(HTMLHRElement), this);
		}
		// DOM::HTMLHRElement* HTMLHRElement(DOM::HTMLHRElementImpl* arg1); >>>> NOT CONVERTED
		public HTMLHRElement() : this((Type) null) {
			CreateProxy();
			interceptor.Invoke("HTMLHRElement", "HTMLHRElement()", typeof(void));
		}
		public HTMLHRElement(DOM.HTMLHRElement other) : this((Type) null) {
			CreateProxy();
			interceptor.Invoke("HTMLHRElement#", "HTMLHRElement(const DOM::HTMLHRElement&)", typeof(void), typeof(DOM.HTMLHRElement), other);
		}
		public HTMLHRElement(DOM.Node other) : this((Type) null) {
			CreateProxy();
			interceptor.Invoke("HTMLHRElement#", "HTMLHRElement(const DOM::Node&)", typeof(void), typeof(DOM.Node), other);
		}
		/// <remarks>
		///  Align the rule on the page. See the <a
		///  href="http://www.w3.org/TR/REC-html40/present/graphics.html#adef-align-HR">
		///  align attribute definition </a> in HTML 4.0. This attribute is
		///  deprecated in HTML 4.0.
		///      </remarks>		<short>    Align the rule on the page.</short>
		public DOM.DOMString Align() {
			return (DOM.DOMString) interceptor.Invoke("align", "align() const", typeof(DOM.DOMString));
		}
		/// <remarks>
		///  see align
		///      </remarks>		<short>    see align      </short>
		public void SetAlign(DOM.DOMString arg1) {
			interceptor.Invoke("setAlign#", "setAlign(const DOM::DOMString&)", typeof(void), typeof(DOM.DOMString), arg1);
		}
		/// <remarks>
		///  Indicates to the user agent that there should be no shading in
		///  the rendering of this element. See the <a
		///  href="http://www.w3.org/TR/REC-html40/present/graphics.html#adef-noshade">
		///  noshade attribute definition </a> in HTML 4.0. This attribute
		///  is deprecated in HTML 4.0.
		///      </remarks>		<short>    Indicates to the user agent that there should be no shading in  the rendering of this element.</short>
		public bool NoShade() {
			return (bool) interceptor.Invoke("noShade", "noShade() const", typeof(bool));
		}
		/// <remarks>
		///  see noShade
		///      </remarks>		<short>    see noShade      </short>
		public void SetNoShade(bool arg1) {
			interceptor.Invoke("setNoShade$", "setNoShade(bool)", typeof(void), typeof(bool), arg1);
		}
		/// <remarks>
		///  The height of the rule. See the <a
		///  href="http://www.w3.org/TR/REC-html40/present/graphics.html#adef-size-HR">
		///  size attribute definition </a> in HTML 4.0. This attribute is
		///  deprecated in HTML 4.0.
		///      </remarks>		<short>    The height of the rule.</short>
		public DOM.DOMString Size() {
			return (DOM.DOMString) interceptor.Invoke("size", "size() const", typeof(DOM.DOMString));
		}
		/// <remarks>
		///  see size
		///      </remarks>		<short>    see size      </short>
		public void SetSize(DOM.DOMString arg1) {
			interceptor.Invoke("setSize#", "setSize(const DOM::DOMString&)", typeof(void), typeof(DOM.DOMString), arg1);
		}
		/// <remarks>
		///  The width of the rule. See the <a
		///  href="http://www.w3.org/TR/REC-html40/present/graphics.html#adef-width-HR">
		///  width attribute definition </a> in HTML 4.0. This attribute is
		///  deprecated in HTML 4.0.
		///      </remarks>		<short>    The width of the rule.</short>
		public DOM.DOMString Width() {
			return (DOM.DOMString) interceptor.Invoke("width", "width() const", typeof(DOM.DOMString));
		}
		/// <remarks>
		///  see width
		///      </remarks>		<short>    see width      </short>
		public void SetWidth(DOM.DOMString arg1) {
			interceptor.Invoke("setWidth#", "setWidth(const DOM::DOMString&)", typeof(void), typeof(DOM.DOMString), arg1);
		}
		~HTMLHRElement() {
			interceptor.Invoke("~HTMLHRElement", "~HTMLHRElement()", typeof(void));
		}
		public new void Dispose() {
			interceptor.Invoke("~HTMLHRElement", "~HTMLHRElement()", typeof(void));
		}
	}
}
