//Auto-generated by kalyptus. DO NOT EDIT.
namespace DOM {
	using Kimono;
	using System;
	using Qyoto;
	/// <remarks>
	///  Form control. Note. Depending upon the environment the page is
	///  being viewed, the value property may be read-only for the file
	///  upload input type. For the "password" input type, the actual value
	///  returned may be masked to prevent unauthorized use. See the <a
	///  href="http://www.w3.org/TR/REC-html40/interact/forms.html#edef-INPUT">
	///  INPUT element definition </a> in HTML 4.0.
	///  </remarks>		<short>    Form control.</short>
	[SmokeClass("DOM::HTMLInputElement")]
	public class HTMLInputElement : DOM.HTMLElement, IDisposable {
 		protected HTMLInputElement(Type dummy) : base((Type) null) {}
		protected new void CreateProxy() {
			interceptor = new SmokeInvocation(typeof(HTMLInputElement), this);
		}
		// DOM::HTMLInputElement* HTMLInputElement(DOM::HTMLInputElementImpl* arg1); >>>> NOT CONVERTED
		public HTMLInputElement() : this((Type) null) {
			CreateProxy();
			interceptor.Invoke("HTMLInputElement", "HTMLInputElement()", typeof(void));
		}
		public HTMLInputElement(DOM.HTMLInputElement other) : this((Type) null) {
			CreateProxy();
			interceptor.Invoke("HTMLInputElement#", "HTMLInputElement(const DOM::HTMLInputElement&)", typeof(void), typeof(DOM.HTMLInputElement), other);
		}
		public HTMLInputElement(DOM.Node other) : this((Type) null) {
			CreateProxy();
			interceptor.Invoke("HTMLInputElement#", "HTMLInputElement(const DOM::Node&)", typeof(void), typeof(DOM.Node), other);
		}
		/// <remarks>
		///  Stores the initial control value (i.e., the initial value of
		///  <code>value</code> ).
		///      </remarks>		<short>    Stores the initial control value (i.</short>
		public DOM.DOMString DefaultValue() {
			return (DOM.DOMString) interceptor.Invoke("defaultValue", "defaultValue() const", typeof(DOM.DOMString));
		}
		/// <remarks>
		///  see defaultValue
		///      </remarks>		<short>    see defaultValue      </short>
		public void SetDefaultValue(DOM.DOMString arg1) {
			interceptor.Invoke("setDefaultValue#", "setDefaultValue(const DOM::DOMString&)", typeof(void), typeof(DOM.DOMString), arg1);
		}
		/// <remarks>
		///  When <code>type</code> has the value "Radio" or "Checkbox",
		///  stores the initial value of the <code>checked</code>
		///  attribute.
		///      </remarks>		<short>    When <code>type</code> has the value "Radio" or "Checkbox",  stores the initial value of the <code>checked</code>  attribute.</short>
		public bool DefaultChecked() {
			return (bool) interceptor.Invoke("defaultChecked", "defaultChecked() const", typeof(bool));
		}
		/// <remarks>
		///  see defaultChecked
		///      </remarks>		<short>    see defaultChecked      </short>
		public void SetDefaultChecked(bool arg1) {
			interceptor.Invoke("setDefaultChecked$", "setDefaultChecked(bool)", typeof(void), typeof(bool), arg1);
		}
		/// <remarks>
		///  ### KDE 4.0: remove.
		///      </remarks>		<short>    ### KDE 4.</short>
		public new DOM.HTMLFormElement Form() {
			return (DOM.HTMLFormElement) interceptor.Invoke("form", "form() const", typeof(DOM.HTMLFormElement));
		}
		/// <remarks>
		///  A comma-separated list of content types that a server
		///  processing this form will handle correctly. See the <a
		///  href="http://www.w3.org/TR/REC-html40/interact/forms.html#adef-accept">
		///  accept attribute definition </a> in HTML 4.0.
		///      </remarks>		<short>    A comma-separated list of content types that a server  processing this form will handle correctly.</short>
		public DOM.DOMString Accept() {
			return (DOM.DOMString) interceptor.Invoke("accept", "accept() const", typeof(DOM.DOMString));
		}
		/// <remarks>
		///  see accept
		///      </remarks>		<short>    see accept      </short>
		public void SetAccept(DOM.DOMString arg1) {
			interceptor.Invoke("setAccept#", "setAccept(const DOM::DOMString&)", typeof(void), typeof(DOM.DOMString), arg1);
		}
		/// <remarks>
		///  A single character access key to give access to the form
		///  control. See the <a
		///  href="http://www.w3.org/TR/REC-html40/interact/forms.html#adef-accesskey">
		///  accesskey attribute definition </a> in HTML 4.0.
		///      </remarks>		<short>    A single character access key to give access to the form  control.</short>
		public DOM.DOMString AccessKey() {
			return (DOM.DOMString) interceptor.Invoke("accessKey", "accessKey() const", typeof(DOM.DOMString));
		}
		/// <remarks>
		///  see accessKey
		///      </remarks>		<short>    see accessKey      </short>
		public void SetAccessKey(DOM.DOMString arg1) {
			interceptor.Invoke("setAccessKey#", "setAccessKey(const DOM::DOMString&)", typeof(void), typeof(DOM.DOMString), arg1);
		}
		/// <remarks>
		///  Aligns this object (vertically or horizontally) with respect to
		///  its surrounding text. See the <a
		///  href="http://www.w3.org/TR/REC-html40/struct/objects.html#adef-align-IMG">
		///  align attribute definition </a> in HTML 4.0. This attribute is
		///  deprecated in HTML 4.0.
		///      </remarks>		<short>    Aligns this object (vertically or horizontally) with respect to  its surrounding text.</short>
		public DOM.DOMString Align() {
			return (DOM.DOMString) interceptor.Invoke("align", "align() const", typeof(DOM.DOMString));
		}
		/// <remarks>
		///  see align
		///      </remarks>		<short>    see align      </short>
		public void SetAlign(DOM.DOMString arg1) {
			interceptor.Invoke("setAlign#", "setAlign(const DOM::DOMString&)", typeof(void), typeof(DOM.DOMString), arg1);
		}
		/// <remarks>
		///  Alternate text for user agents not rendering the normal content
		///  of this element. See the <a
		///  href="http://www.w3.org/TR/REC-html40/struct/objects.html#adef-alt">
		///  alt attribute definition </a> in HTML 4.0.
		///      </remarks>		<short>    Alternate text for user agents not rendering the normal content  of this element.</short>
		public DOM.DOMString Alt() {
			return (DOM.DOMString) interceptor.Invoke("alt", "alt() const", typeof(DOM.DOMString));
		}
		/// <remarks>
		///  see alt
		///      </remarks>		<short>    see alt      </short>
		public void SetAlt(DOM.DOMString arg1) {
			interceptor.Invoke("setAlt#", "setAlt(const DOM::DOMString&)", typeof(void), typeof(DOM.DOMString), arg1);
		}
		/// <remarks>
		///  Describes whether a radio or check box is checked, when
		///  <code>type</code> has the value "Radio" or "Checkbox". The value is
		///  true if explicitly set. Represents the current state of the
		///  checkbox or radio button. See the <a
		///  href="http://www.w3.org/TR/REC-html40/interact/forms.html#adef-checked">
		///  checked attribute definition </a> in HTML 4.0.
		///      </remarks>		<short>    Describes whether a radio or check box is checked, when  <code>type</code> has the value "Radio" or "Checkbox".</short>
		public bool Checked() {
			return (bool) interceptor.Invoke("checked", "checked() const", typeof(bool));
		}
		/// <remarks>
		///  see checked
		///      </remarks>		<short>    see checked      </short>
		public void SetChecked(bool arg1) {
			interceptor.Invoke("setChecked$", "setChecked(bool)", typeof(void), typeof(bool), arg1);
		}
		/// <remarks>
		///  Describes whether a radio box is indeterminate
		///      </remarks>		<short>    Describes whether a radio box is indeterminate      </short>
		public bool Indeterminate() {
			return (bool) interceptor.Invoke("indeterminate", "indeterminate() const", typeof(bool));
		}
		/// <remarks>
		///  see indeterminate
		///      </remarks>		<short>    see indeterminate      </short>
		public void SetIndeterminate(bool arg1) {
			interceptor.Invoke("setIndeterminate$", "setIndeterminate(bool)", typeof(void), typeof(bool), arg1);
		}
		/// <remarks>
		///  The control is unavailable in this context. See the <a
		///  href="http://www.w3.org/TR/REC-html40/interact/forms.html#adef-disabled">
		///  disabled attribute definition </a> in HTML 4.0.
		///      </remarks>		<short>    The control is unavailable in this context.</short>
		public bool Disabled() {
			return (bool) interceptor.Invoke("disabled", "disabled() const", typeof(bool));
		}
		/// <remarks>
		///  see disabled
		///      </remarks>		<short>    see disabled      </short>
		public void SetDisabled(bool arg1) {
			interceptor.Invoke("setDisabled$", "setDisabled(bool)", typeof(void), typeof(bool), arg1);
		}
		/// <remarks>
		///  Maximum number of characters for text fields, when <code>type</code>
		///  has the value "Text" or "Password". See the <a
		///  href="http://www.w3.org/TR/REC-html40/interact/forms.html#adef-maxlength">
		///  maxlength attribute definition </a> in HTML 4.0.
		///      </remarks>		<short>    Maximum number of characters for text fields, when <code>type</code>  has the value "Text" or "Password".</short>
		public long MaxLength() {
			return (long) interceptor.Invoke("maxLength", "maxLength() const", typeof(long));
		}
		/// <remarks>
		///  see maxLength
		///      </remarks>		<short>    see maxLength      </short>
		public void SetMaxLength(long arg1) {
			interceptor.Invoke("setMaxLength$", "setMaxLength(long)", typeof(void), typeof(long), arg1);
		}
		/// <remarks>
		///  Form control or object name when submitted with a form. See the
		///  <a
		///  href="http://www.w3.org/TR/REC-html40/interact/forms.html#adef-name-INPUT">
		///  name attribute definition </a> in HTML 4.0.
		///      </remarks>		<short>    Form control or object name when submitted with a form.</short>
		public DOM.DOMString Name() {
			return (DOM.DOMString) interceptor.Invoke("name", "name() const", typeof(DOM.DOMString));
		}
		/// <remarks>
		///  see name
		///      </remarks>		<short>    see name      </short>
		public void SetName(DOM.DOMString arg1) {
			interceptor.Invoke("setName#", "setName(const DOM::DOMString&)", typeof(void), typeof(DOM.DOMString), arg1);
		}
		/// <remarks>
		///  This control is read-only. When <code>type</code> has the
		///  value "text" or "password" only. See the <a
		///  href="http://www.w3.org/TR/REC-html40/interact/forms.html#adef-readonly">
		///  readonly attribute definition </a> in HTML 4.0.
		///      </remarks>		<short>    This control is read-only.</short>
		public bool ReadOnly() {
			return (bool) interceptor.Invoke("readOnly", "readOnly() const", typeof(bool));
		}
		/// <remarks>
		///  see readOnly
		///      </remarks>		<short>    see readOnly      </short>
		public void SetReadOnly(bool arg1) {
			interceptor.Invoke("setReadOnly$", "setReadOnly(bool)", typeof(void), typeof(bool), arg1);
		}
		/// <remarks>
		///  Size information. The precise meaning is specific to each type
		///  of field. See the <a
		///  href="http://www.w3.org/TR/REC-html40/interact/forms.html#adef-size-INPUT">
		///  size attribute definition </a> in HTML 4.0.
		///      </remarks>		<short>    Size information.</short>
		public long GetSize() {
			return (long) interceptor.Invoke("getSize", "getSize() const", typeof(long));
		}
		/// <remarks>
		///  see getSize
		///      </remarks>		<short>    see getSize      </short>
		public void SetSize(long arg1) {
			interceptor.Invoke("setSize$", "setSize(long)", typeof(void), typeof(long), arg1);
		}
		/// <remarks>
		///  When the <code>type</code> attribute has the value "Image",
		///  this attribute specifies the location of the image to be used
		///  to decorate the graphical submit button. See the <a
		///  href="http://www.w3.org/TR/REC-html40/interact/forms.html#adef-src">
		///  src attribute definition </a> in HTML 4.0.
		///      </remarks>		<short>    When the <code>type</code> attribute has the value "Image",  this attribute specifies the location of the image to be used  to decorate the graphical submit button.</short>
		public DOM.DOMString Src() {
			return (DOM.DOMString) interceptor.Invoke("src", "src() const", typeof(DOM.DOMString));
		}
		/// <remarks>
		///  see src
		///      </remarks>		<short>    see src      </short>
		public void SetSrc(DOM.DOMString arg1) {
			interceptor.Invoke("setSrc#", "setSrc(const DOM::DOMString&)", typeof(void), typeof(DOM.DOMString), arg1);
		}
		/// <remarks>
		///  Index that represents the element's position in the tabbing
		///  order. See the <a
		///  href="http://www.w3.org/TR/REC-html40/interact/forms.html#adef-tabindex">
		///  tabindex attribute definition </a> in HTML 4.0.
		///      </remarks>		<short>    Index that represents the element's position in the tabbing  order.</short>
		public long TabIndex() {
			return (long) interceptor.Invoke("tabIndex", "tabIndex() const", typeof(long));
		}
		/// <remarks>
		///  see tabIndex
		///      </remarks>		<short>    see tabIndex      </short>
		public void SetTabIndex(long arg1) {
			interceptor.Invoke("setTabIndex$", "setTabIndex(long)", typeof(void), typeof(long), arg1);
		}
		/// <remarks>
		///  The type of control created. See the <a
		///  href="http://www.w3.org/TR/REC-html40/interact/forms.html#adef-type-INPUT">
		///  type attribute definition </a> in HTML 4.0.
		///      </remarks>		<short>    The type of control created.</short>
		public DOM.DOMString type() {
			return (DOM.DOMString) interceptor.Invoke("type", "type() const", typeof(DOM.DOMString));
		}
		/// <remarks>
		///  see type
		///      </remarks>		<short>    see type      </short>
		public void SetType(DOM.DOMString arg1) {
			interceptor.Invoke("setType#", "setType(const DOM::DOMString&)", typeof(void), typeof(DOM.DOMString), arg1);
		}
		/// <remarks>
		///  Use client-side image map. See the <a
		///  href="http://www.w3.org/TR/REC-html40/struct/objects.html#adef-usemap">
		///  usemap attribute definition </a> in HTML 4.0.
		///      </remarks>		<short>    Use client-side image map.</short>
		public DOM.DOMString UseMap() {
			return (DOM.DOMString) interceptor.Invoke("useMap", "useMap() const", typeof(DOM.DOMString));
		}
		/// <remarks>
		///  see useMap
		///      </remarks>		<short>    see useMap      </short>
		public void SetUseMap(DOM.DOMString arg1) {
			interceptor.Invoke("setUseMap#", "setUseMap(const DOM::DOMString&)", typeof(void), typeof(DOM.DOMString), arg1);
		}
		/// <remarks>
		///  The current form control value. Used for radio buttons and
		///  check boxes. See the <a
		///  href="http://www.w3.org/TR/REC-html40/interact/forms.html#adef-value-INPUT">
		///  value attribute definition </a> in HTML 4.0.
		///      </remarks>		<short>    The current form control value.</short>
		public DOM.DOMString Value() {
			return (DOM.DOMString) interceptor.Invoke("value", "value() const", typeof(DOM.DOMString));
		}
		/// <remarks>
		///  see value
		///      </remarks>		<short>    see value      </short>
		public void SetValue(DOM.DOMString arg1) {
			interceptor.Invoke("setValue#", "setValue(const DOM::DOMString&)", typeof(void), typeof(DOM.DOMString), arg1);
		}
		/// <remarks>
		///  Removes keyboard focus from this element.
		///      </remarks>		<short>    Removes keyboard focus from this element.</short>
		public void Blur() {
			interceptor.Invoke("blur", "blur()", typeof(void));
		}
		/// <remarks>
		///  Gives keyboard focus to this element.
		///      </remarks>		<short>    Gives keyboard focus to this element.</short>
		public void Focus() {
			interceptor.Invoke("focus", "focus()", typeof(void));
		}
		/// <remarks>
		///  Select the contents of the text area. For <code>INPUT</code>
		///  elements whose <code>type</code> attribute has one of the
		///  following values: "Text", "File", or "Password".
		///      </remarks>		<short>    Select the contents of the text area.</short>
		public void Select() {
			interceptor.Invoke("select", "select()", typeof(void));
		}
		/// <remarks>
		///  Simulate a mouse-click. For <code>INPUT</code> elements whose
		///  <code>type</code> attribute has one of the following values:
		///  "Button", "Checkbox", "Radio", "Reset", or "Submit".
		///      </remarks>		<short>    Simulate a mouse-click.</short>
		public void Click() {
			interceptor.Invoke("click", "click()", typeof(void));
		}
		/// <remarks>
		///  Returns the character offset of beginning of selection, or if none,
		///  the cursor position.
		///  This operation is only supported if the type of this element is text;
		///  otherwise -1 is returned.
		///  NOTE: this method is not part of the DOM, but a Mozilla extension
		///      </remarks>		<short>    Returns the character offset of beginning of selection, or if none,  the cursor position.</short>
		public long SelectionStart() {
			return (long) interceptor.Invoke("selectionStart", "selectionStart()", typeof(long));
		}
		/// <remarks>
		///  Move the beginning of the selection to the given offset in text
		///  This call has no effect if the type of this input element isn't text
		///  NOTE: this method is not part of the DOM, but a Mozilla extension
		///       </remarks>		<short>    Move the beginning of the selection to the given offset in text  This call has no effect if the type of this input element isn't text  NOTE: this method is not part of the DOM, but a Mozilla extension       </short>
		public void SetSelectionStart(long offset) {
			interceptor.Invoke("setSelectionStart$", "setSelectionStart(long)", typeof(void), typeof(long), offset);
		}
		/// <remarks>
		///  Returns the character offset of end of selection, or if none,
		///  the cursor position.
		///  This operation is only supported if the type of this element is text;
		///  otherwise -1 is returned.
		///  NOTE: this method is not part of the DOM, but a Mozilla extension
		///      </remarks>		<short>    Returns the character offset of end of selection, or if none,  the cursor position.</short>
		public long SelectionEnd() {
			return (long) interceptor.Invoke("selectionEnd", "selectionEnd()", typeof(long));
		}
		/// <remarks>
		///  Move the end of the selection (and the cursor) to the given offset in text
		///  This call has no effect if the type of this input element isn't text
		///  NOTE: this method is not part of the DOM, but a Mozilla extension
		///       </remarks>		<short>    Move the end of the selection (and the cursor) to the given offset in text  This call has no effect if the type of this input element isn't text  NOTE: this method is not part of the DOM, but a Mozilla extension       </short>
		public void SetSelectionEnd(long offset) {
			interceptor.Invoke("setSelectionEnd$", "setSelectionEnd(long)", typeof(void), typeof(long), offset);
		}
		/// <remarks>
		///  Makes the position span from start to end, and positions the cursor after the selection.
		///  This call has no effect if the type of this input element isn't text or if it is not rendered.
		///  NOTE: this method is not part of the DOM, but a Mozilla extension
		///       </remarks>		<short>    Makes the position span from start to end, and positions the cursor after the selection.</short>
		public void SetSelectionRange(long start, long end) {
			interceptor.Invoke("setSelectionRange$$", "setSelectionRange(long, long)", typeof(void), typeof(long), start, typeof(long), end);
		}
		~HTMLInputElement() {
			interceptor.Invoke("~HTMLInputElement", "~HTMLInputElement()", typeof(void));
		}
		public new void Dispose() {
			interceptor.Invoke("~HTMLInputElement", "~HTMLInputElement()", typeof(void));
		}
	}
}
