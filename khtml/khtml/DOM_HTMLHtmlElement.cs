//Auto-generated by kalyptus. DO NOT EDIT.
namespace DOM {
	using Kimono;
	using System;
	using Qyoto;
	/// <remarks>
	///  Root of an HTML document. See the <a
	///  href="http://www.w3.org/TR/REC-html40/struct/global.html#edef-HTML">
	///  HTML element definition </a> in HTML 4.0.
	///  </remarks>		<short>    Root of an HTML document.</short>
	[SmokeClass("DOM::HTMLHtmlElement")]
	public class HTMLHtmlElement : DOM.HTMLElement, IDisposable {
 		protected HTMLHtmlElement(Type dummy) : base((Type) null) {}
		protected new void CreateProxy() {
			interceptor = new SmokeInvocation(typeof(HTMLHtmlElement), this);
		}
		// DOM::HTMLHtmlElement* HTMLHtmlElement(DOM::HTMLHtmlElementImpl* arg1); >>>> NOT CONVERTED
		public HTMLHtmlElement() : this((Type) null) {
			CreateProxy();
			interceptor.Invoke("HTMLHtmlElement", "HTMLHtmlElement()", typeof(void));
		}
		public HTMLHtmlElement(DOM.HTMLHtmlElement other) : this((Type) null) {
			CreateProxy();
			interceptor.Invoke("HTMLHtmlElement#", "HTMLHtmlElement(const DOM::HTMLHtmlElement&)", typeof(void), typeof(DOM.HTMLHtmlElement), other);
		}
		public HTMLHtmlElement(DOM.Node other) : this((Type) null) {
			CreateProxy();
			interceptor.Invoke("HTMLHtmlElement#", "HTMLHtmlElement(const DOM::Node&)", typeof(void), typeof(DOM.Node), other);
		}
		/// <remarks>
		///  Version information about the document's DTD. See the <a
		///  href="http://www.w3.org/TR/REC-html40/struct/global.html#adef-version">
		///  version attribute definition </a> in HTML 4.0. This attribute
		///  is deprecated in HTML 4.0.
		///      </remarks>		<short>    Version information about the document's DTD.</short>
		public DOM.DOMString Version() {
			return (DOM.DOMString) interceptor.Invoke("version", "version() const", typeof(DOM.DOMString));
		}
		/// <remarks>
		///  see version
		///      </remarks>		<short>    see version      </short>
		public void SetVersion(DOM.DOMString arg1) {
			interceptor.Invoke("setVersion#", "setVersion(const DOM::DOMString&)", typeof(void), typeof(DOM.DOMString), arg1);
		}
		~HTMLHtmlElement() {
			interceptor.Invoke("~HTMLHtmlElement", "~HTMLHtmlElement()", typeof(void));
		}
		public new void Dispose() {
			interceptor.Invoke("~HTMLHtmlElement", "~HTMLHtmlElement()", typeof(void));
		}
	}
}
