//Auto-generated by kalyptus. DO NOT EDIT.
namespace DOM {
	using Kimono;
	using System;
	using Qyoto;
	/// <remarks>
	///  Client-side image map area definition. See the <a
	///  href="http://www.w3.org/TR/REC-html40/struct/objects.html#edef-AREA">
	///  AREA element definition </a> in HTML 4.0.
	///  </remarks>		<short>    Client-side image map area definition.</short>
	[SmokeClass("DOM::HTMLAreaElement")]
	public class HTMLAreaElement : DOM.HTMLElement, IDisposable {
 		protected HTMLAreaElement(Type dummy) : base((Type) null) {}
		protected new void CreateProxy() {
			interceptor = new SmokeInvocation(typeof(HTMLAreaElement), this);
		}
		// DOM::HTMLAreaElement* HTMLAreaElement(DOM::HTMLAreaElementImpl* arg1); >>>> NOT CONVERTED
		public HTMLAreaElement() : this((Type) null) {
			CreateProxy();
			interceptor.Invoke("HTMLAreaElement", "HTMLAreaElement()", typeof(void));
		}
		public HTMLAreaElement(DOM.HTMLAreaElement other) : this((Type) null) {
			CreateProxy();
			interceptor.Invoke("HTMLAreaElement#", "HTMLAreaElement(const DOM::HTMLAreaElement&)", typeof(void), typeof(DOM.HTMLAreaElement), other);
		}
		public HTMLAreaElement(DOM.Node other) : this((Type) null) {
			CreateProxy();
			interceptor.Invoke("HTMLAreaElement#", "HTMLAreaElement(const DOM::Node&)", typeof(void), typeof(DOM.Node), other);
		}
		/// <remarks>
		///  A single character access key to give access to the form
		///  control. See the <a
		///  href="http://www.w3.org/TR/REC-html40/interact/forms.html#adef-accesskey">
		///  accesskey attribute definition </a> in HTML 4.0.
		///      </remarks>		<short>    A single character access key to give access to the form  control.</short>
		public DOM.DOMString AccessKey() {
			return (DOM.DOMString) interceptor.Invoke("accessKey", "accessKey() const", typeof(DOM.DOMString));
		}
		/// <remarks>
		///  see accessKey
		///      </remarks>		<short>    see accessKey      </short>
		public void SetAccessKey(DOM.DOMString arg1) {
			interceptor.Invoke("setAccessKey#", "setAccessKey(const DOM::DOMString&)", typeof(void), typeof(DOM.DOMString), arg1);
		}
		/// <remarks>
		///  Alternate text for user agents not rendering the normal content
		///  of this element. See the <a
		///  href="http://www.w3.org/TR/REC-html40/struct/objects.html#adef-alt">
		///  alt attribute definition </a> in HTML 4.0.
		///      </remarks>		<short>    Alternate text for user agents not rendering the normal content  of this element.</short>
		public DOM.DOMString Alt() {
			return (DOM.DOMString) interceptor.Invoke("alt", "alt() const", typeof(DOM.DOMString));
		}
		/// <remarks>
		///  see alt
		///      </remarks>		<short>    see alt      </short>
		public void SetAlt(DOM.DOMString arg1) {
			interceptor.Invoke("setAlt#", "setAlt(const DOM::DOMString&)", typeof(void), typeof(DOM.DOMString), arg1);
		}
		/// <remarks>
		///  Comma-separated list of lengths, defining an active region
		///  geometry. See also <code>shape</code> for the shape of the
		///  region. See the <a
		///  href="http://www.w3.org/TR/REC-html40/struct/objects.html#adef-coords">
		///  coords attribute definition </a> in HTML 4.0.
		///      </remarks>		<short>    Comma-separated list of lengths, defining an active region  geometry.</short>
		public DOM.DOMString Coords() {
			return (DOM.DOMString) interceptor.Invoke("coords", "coords() const", typeof(DOM.DOMString));
		}
		/// <remarks>
		///  see coords
		///      </remarks>		<short>    see coords      </short>
		public void SetCoords(DOM.DOMString arg1) {
			interceptor.Invoke("setCoords#", "setCoords(const DOM::DOMString&)", typeof(void), typeof(DOM.DOMString), arg1);
		}
		/// <remarks>
		///  The URI of the linked resource. See the <a
		///  href="http://www.w3.org/TR/REC-html40/struct/links.html#adef-href">
		///  href attribute definition </a> in HTML 4.0.
		///      </remarks>		<short>    The URI of the linked resource.</short>
		public DOM.DOMString Href() {
			return (DOM.DOMString) interceptor.Invoke("href", "href() const", typeof(DOM.DOMString));
		}
		/// <remarks>
		///  see href
		///      </remarks>		<short>    see href      </short>
		public void SetHref(DOM.DOMString arg1) {
			interceptor.Invoke("setHref#", "setHref(const DOM::DOMString&)", typeof(void), typeof(DOM.DOMString), arg1);
		}
		/// <remarks>
		///  Specifies that this area is inactive, i.e., has no associated
		///  action. See the <a
		///  href="http://www.w3.org/TR/REC-html40/struct/objects.html#adef-nohref">
		///  nohref attribute definition </a> in HTML 4.0.
		///      </remarks>		<short>    Specifies that this area is inactive, i.</short>
		public bool NoHref() {
			return (bool) interceptor.Invoke("noHref", "noHref() const", typeof(bool));
		}
		/// <remarks>
		///  see noHref
		///      </remarks>		<short>    see noHref      </short>
		public void SetNoHref(bool arg1) {
			interceptor.Invoke("setNoHref$", "setNoHref(bool)", typeof(void), typeof(bool), arg1);
		}
		/// <remarks>
		///  The shape of the active area. The coordinates are given by
		///  <code>coords</code> . See the <a
		///  href="http://www.w3.org/TR/REC-html40/struct/objects.html#adef-shape">
		///  shape attribute definition </a> in HTML 4.0.
		///      </remarks>		<short>    The shape of the active area.</short>
		public DOM.DOMString Shape() {
			return (DOM.DOMString) interceptor.Invoke("shape", "shape() const", typeof(DOM.DOMString));
		}
		/// <remarks>
		///  see shape
		///      </remarks>		<short>    see shape      </short>
		public void SetShape(DOM.DOMString arg1) {
			interceptor.Invoke("setShape#", "setShape(const DOM::DOMString&)", typeof(void), typeof(DOM.DOMString), arg1);
		}
		/// <remarks>
		///  Index that represents the element's position in the tabbing
		///  order. See the <a
		///  href="http://www.w3.org/TR/REC-html40/interact/forms.html#adef-tabindex">
		///  tabindex attribute definition </a> in HTML 4.0.
		///      </remarks>		<short>    Index that represents the element's position in the tabbing  order.</short>
		public long TabIndex() {
			return (long) interceptor.Invoke("tabIndex", "tabIndex() const", typeof(long));
		}
		/// <remarks>
		///  see tabIndex
		///      </remarks>		<short>    see tabIndex      </short>
		public void SetTabIndex(long arg1) {
			interceptor.Invoke("setTabIndex$", "setTabIndex(long)", typeof(void), typeof(long), arg1);
		}
		/// <remarks>
		///  Frame to render the resource in. See the <a
		///  href="http://www.w3.org/TR/REC-html40/present/frames.html#adef-target">
		///  target attribute definition </a> in HTML 4.0.
		///      </remarks>		<short>    Frame to render the resource in.</short>
		public DOM.DOMString Target() {
			return (DOM.DOMString) interceptor.Invoke("target", "target() const", typeof(DOM.DOMString));
		}
		/// <remarks>
		///  see target
		///      </remarks>		<short>    see target      </short>
		public void SetTarget(DOM.DOMString arg1) {
			interceptor.Invoke("setTarget#", "setTarget(const DOM::DOMString&)", typeof(void), typeof(DOM.DOMString), arg1);
		}
		~HTMLAreaElement() {
			interceptor.Invoke("~HTMLAreaElement", "~HTMLAreaElement()", typeof(void));
		}
		public new void Dispose() {
			interceptor.Invoke("~HTMLAreaElement", "~HTMLAreaElement()", typeof(void));
		}
	}
}
