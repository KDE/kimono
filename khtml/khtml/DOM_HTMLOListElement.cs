//Auto-generated by kalyptus. DO NOT EDIT.
namespace DOM {
	using Kimono;
	using System;
	using Qyoto;
	/// <remarks>
	///  Ordered list. See the <a
	///  href="http://www.w3.org/TR/REC-html40/struct/lists.html#edef-OL">
	///  OL element definition </a> in HTML 4.0.
	///  </remarks>		<short>    Ordered list.</short>
	[SmokeClass("DOM::HTMLOListElement")]
	public class HTMLOListElement : DOM.HTMLElement, IDisposable {
 		protected HTMLOListElement(Type dummy) : base((Type) null) {}
		protected new void CreateProxy() {
			interceptor = new SmokeInvocation(typeof(HTMLOListElement), this);
		}
		// DOM::HTMLOListElement* HTMLOListElement(DOM::HTMLOListElementImpl* arg1); >>>> NOT CONVERTED
		public HTMLOListElement() : this((Type) null) {
			CreateProxy();
			interceptor.Invoke("HTMLOListElement", "HTMLOListElement()", typeof(void));
		}
		public HTMLOListElement(DOM.HTMLOListElement other) : this((Type) null) {
			CreateProxy();
			interceptor.Invoke("HTMLOListElement#", "HTMLOListElement(const DOM::HTMLOListElement&)", typeof(void), typeof(DOM.HTMLOListElement), other);
		}
		public HTMLOListElement(DOM.Node other) : this((Type) null) {
			CreateProxy();
			interceptor.Invoke("HTMLOListElement#", "HTMLOListElement(const DOM::Node&)", typeof(void), typeof(DOM.Node), other);
		}
		/// <remarks>
		///  Reduce spacing between list items. See the <a
		///  href="http://www.w3.org/TR/REC-html40/struct/lists.html#adef-compact">
		///  compact attribute definition </a> in HTML 4.0. This attribute
		///  is deprecated in HTML 4.0.
		///      </remarks>		<short>    Reduce spacing between list items.</short>
		public bool Compact() {
			return (bool) interceptor.Invoke("compact", "compact() const", typeof(bool));
		}
		/// <remarks>
		///  see compact
		///      </remarks>		<short>    see compact      </short>
		public void SetCompact(bool arg1) {
			interceptor.Invoke("setCompact$", "setCompact(bool)", typeof(void), typeof(bool), arg1);
		}
		/// <remarks>
		///  Starting sequence number. See the <a
		///  href="http://www.w3.org/TR/REC-html40/struct/lists.html#adef-start">
		///  start attribute definition </a> in HTML 4.0. This attribute is
		///  deprecated in HTML 4.0.
		///      </remarks>		<short>    Starting sequence number.</short>
		public long Start() {
			return (long) interceptor.Invoke("start", "start() const", typeof(long));
		}
		/// <remarks>
		///  see start
		///      </remarks>		<short>    see start      </short>
		public void SetStart(long arg1) {
			interceptor.Invoke("setStart$", "setStart(long)", typeof(void), typeof(long), arg1);
		}
		/// <remarks>
		///  Numbering style. See the <a
		///  href="http://www.w3.org/TR/REC-html40/struct/lists.html#adef-type-OL">
		///  type attribute definition </a> in HTML 4.0. This attribute is
		///  deprecated in HTML 4.0.
		///      </remarks>		<short>    Numbering style.</short>
		public DOM.DOMString type() {
			return (DOM.DOMString) interceptor.Invoke("type", "type() const", typeof(DOM.DOMString));
		}
		/// <remarks>
		///  see type
		///      </remarks>		<short>    see type      </short>
		public void SetType(DOM.DOMString arg1) {
			interceptor.Invoke("setType#", "setType(const DOM::DOMString&)", typeof(void), typeof(DOM.DOMString), arg1);
		}
		~HTMLOListElement() {
			interceptor.Invoke("~HTMLOListElement", "~HTMLOListElement()", typeof(void));
		}
		public new void Dispose() {
			interceptor.Invoke("~HTMLOListElement", "~HTMLOListElement()", typeof(void));
		}
	}
}
