//Auto-generated by kalyptus. DO NOT EDIT.
namespace DOM {
	using Kimono;
	using System;
	using Qyoto;
	/// <remarks>
	///  This represents the content of a comment, i.e., all the characters
	///  between the starting ' <code>&lt;</code>!-- ' and ending '
	///  <code>--&gt;</code> '. Note that this is the definition of a comment in
	///  XML, and, in practice, HTML, although some HTML tools may implement
	///  the full SGML comment structure.
	///  </remarks>		<short>    This represents the content of a comment, i.</short>
	[SmokeClass("DOM::Comment")]
	public class Comment : DOM.CharacterData, IDisposable {
 		protected Comment(Type dummy) : base((Type) null) {}
		protected new void CreateProxy() {
			interceptor = new SmokeInvocation(typeof(Comment), this);
		}
		// DOM::Comment* Comment(DOM::CommentImpl* arg1); >>>> NOT CONVERTED
		public Comment() : this((Type) null) {
			CreateProxy();
			interceptor.Invoke("Comment", "Comment()", typeof(void));
		}
		public Comment(DOM.Comment other) : this((Type) null) {
			CreateProxy();
			interceptor.Invoke("Comment#", "Comment(const DOM::Comment&)", typeof(void), typeof(DOM.Comment), other);
		}
		public Comment(DOM.Node other) : this((Type) null) {
			CreateProxy();
			interceptor.Invoke("Comment#", "Comment(const DOM::Node&)", typeof(void), typeof(DOM.Node), other);
		}
		~Comment() {
			interceptor.Invoke("~Comment", "~Comment()", typeof(void));
		}
		public new void Dispose() {
			interceptor.Invoke("~Comment", "~Comment()", typeof(void));
		}
	}
}
