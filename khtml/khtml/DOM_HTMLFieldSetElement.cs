//Auto-generated by kalyptus. DO NOT EDIT.
namespace DOM {
	using Kimono;
	using System;
	using Qyoto;
	/// <remarks>
	///  Organizes form controls into logical groups. See the <a
	///  href="http://www.w3.org/TR/REC-html40/interact/forms.html#edef-FIELDSET">
	///  FIELDSET element definition </a> in HTML 4.0.
	///  </remarks>		<short>    Organizes form controls into logical groups.</short>
	[SmokeClass("DOM::HTMLFieldSetElement")]
	public class HTMLFieldSetElement : DOM.HTMLElement, IDisposable {
 		protected HTMLFieldSetElement(Type dummy) : base((Type) null) {}
		protected new void CreateProxy() {
			interceptor = new SmokeInvocation(typeof(HTMLFieldSetElement), this);
		}
		// DOM::HTMLFieldSetElement* HTMLFieldSetElement(DOM::HTMLFieldSetElementImpl* arg1); >>>> NOT CONVERTED
		public HTMLFieldSetElement() : this((Type) null) {
			CreateProxy();
			interceptor.Invoke("HTMLFieldSetElement", "HTMLFieldSetElement()", typeof(void));
		}
		public HTMLFieldSetElement(DOM.HTMLFieldSetElement other) : this((Type) null) {
			CreateProxy();
			interceptor.Invoke("HTMLFieldSetElement#", "HTMLFieldSetElement(const DOM::HTMLFieldSetElement&)", typeof(void), typeof(DOM.HTMLFieldSetElement), other);
		}
		public HTMLFieldSetElement(DOM.Node other) : this((Type) null) {
			CreateProxy();
			interceptor.Invoke("HTMLFieldSetElement#", "HTMLFieldSetElement(const DOM::Node&)", typeof(void), typeof(DOM.Node), other);
		}
		/// <remarks>
		///  ### KDE 4.0: remove.
		///      </remarks>		<short>    ### KDE 4.</short>
		public new DOM.HTMLFormElement Form() {
			return (DOM.HTMLFormElement) interceptor.Invoke("form", "form() const", typeof(DOM.HTMLFormElement));
		}
		~HTMLFieldSetElement() {
			interceptor.Invoke("~HTMLFieldSetElement", "~HTMLFieldSetElement()", typeof(void));
		}
		public new void Dispose() {
			interceptor.Invoke("~HTMLFieldSetElement", "~HTMLFieldSetElement()", typeof(void));
		}
	}
}
