//Auto-generated by kalyptus. DO NOT EDIT.
namespace DOM {
	using Kimono;
	using System;
	using Qyoto;
	/// <remarks>
	///  Introduced in DOM Level 3
	///  DOM.TextEvent is used to indicate actual text entry 
	///  during text input. It corresponds to the HTML keypress events
	///  </remarks>		<short>    Introduced in DOM Level 3 </short>
	[SmokeClass("DOM::TextEvent")]
	public class TextEvent : DOM.UIEvent, IDisposable {
 		protected TextEvent(Type dummy) : base((Type) null) {}
		protected new void CreateProxy() {
			interceptor = new SmokeInvocation(typeof(TextEvent), this);
		}
		public TextEvent() : this((Type) null) {
			CreateProxy();
			interceptor.Invoke("TextEvent", "TextEvent()", typeof(void));
		}
		public TextEvent(DOM.TextEvent other) : this((Type) null) {
			CreateProxy();
			interceptor.Invoke("TextEvent#", "TextEvent(const DOM::TextEvent&)", typeof(void), typeof(DOM.TextEvent), other);
		}
		public TextEvent(DOM.Event other) : this((Type) null) {
			CreateProxy();
			interceptor.Invoke("TextEvent#", "TextEvent(const DOM::Event&)", typeof(void), typeof(DOM.Event), other);
		}
		/// <remarks>
		///  initTextEvent
		///  The initTextEvent method is used to initialize the value of a TextEvent
		///  object and has the same behavior as UIEvent.initUIEvent(). 
		///  The value of UIEvent.detail remains undefined. 
		///  Parameters:
		///    Specifies the event type.
		///  canBubbleArg of type boolean
		///    Specifies whether or not the event can bubble.
		///  cancelableArg of type boolean
		///    Specifies whether or not the event's default action can be prevent.
		///  viewArg of type views.AbstractView
		///    Specifies the TextEvent's AbstractView.
		///  dataArg of type DOMString
		///    Specifies TextEvent.data. 
		///      </remarks>		<short>    initTextEvent  The initTextEvent method is used to initialize the value of a TextEvent  object and has the same behavior as UIEvent.</short>
		public void InitTextEvent(DOM.DOMString typeArg, bool canBubbleArg, bool cancelableArg, DOM.AbstractView viewArg, DOM.DOMString dataArg) {
			interceptor.Invoke("initTextEvent#$$##", "initTextEvent(const DOM::DOMString&, bool, bool, const DOM::AbstractView&, const DOM::DOMString&)", typeof(void), typeof(DOM.DOMString), typeArg, typeof(bool), canBubbleArg, typeof(bool), cancelableArg, typeof(DOM.AbstractView), viewArg, typeof(DOM.DOMString), dataArg);
		}
		~TextEvent() {
			interceptor.Invoke("~TextEvent", "~TextEvent()", typeof(void));
		}
		public new void Dispose() {
			interceptor.Invoke("~TextEvent", "~TextEvent()", typeof(void));
		}
	}
}
