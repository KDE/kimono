//Auto-generated by kalyptus. DO NOT EDIT.
namespace DOM {
	using Kimono;
	using System;
	using Qyoto;
	/// <remarks>
	///  The create and delete methods on the table allow authors to
	///  construct and modify tables. HTML 4.0 specifies that only one of
	///  each of the <code>CAPTION</code> , <code>THEAD</code> , and
	///  <code>TFOOT</code> elements may exist in a table. Therefore, if
	///  one exists, and the createTHead() or createTFoot() method is
	///  called, the method returns the existing THead or TFoot element. See
	///  the <a
	///  href="http://www.w3.org/TR/REC-html40/struct/tables.html#edef-TABLE">
	///  TABLE element definition </a> in HTML 4.0.
	///  </remarks>		<short>    The create  and delete  methods on the table allow authors to  construct and modify tables.</short>
	[SmokeClass("DOM::HTMLTableElement")]
	public class HTMLTableElement : DOM.HTMLElement, IDisposable {
 		protected HTMLTableElement(Type dummy) : base((Type) null) {}
		protected new void CreateProxy() {
			interceptor = new SmokeInvocation(typeof(HTMLTableElement), this);
		}
		// DOM::HTMLTableElement* HTMLTableElement(DOM::HTMLTableElementImpl* arg1); >>>> NOT CONVERTED
		public HTMLTableElement() : this((Type) null) {
			CreateProxy();
			interceptor.Invoke("HTMLTableElement", "HTMLTableElement()", typeof(void));
		}
		public HTMLTableElement(DOM.HTMLTableElement other) : this((Type) null) {
			CreateProxy();
			interceptor.Invoke("HTMLTableElement#", "HTMLTableElement(const DOM::HTMLTableElement&)", typeof(void), typeof(DOM.HTMLTableElement), other);
		}
		public HTMLTableElement(DOM.Node other) : this((Type) null) {
			CreateProxy();
			interceptor.Invoke("HTMLTableElement#", "HTMLTableElement(const DOM::Node&)", typeof(void), typeof(DOM.Node), other);
		}
		/// <remarks>
		///  Returns the table's <code>CAPTION</code> , or void if none
		///  exists.
		///      </remarks>		<short>    Returns the table's <code>CAPTION</code> , or void if none  exists.</short>
		public DOM.HTMLTableCaptionElement Caption() {
			return (DOM.HTMLTableCaptionElement) interceptor.Invoke("caption", "caption() const", typeof(DOM.HTMLTableCaptionElement));
		}
		/// <remarks>
		///  see caption
		///      </remarks>		<short>    see caption      </short>
		public void SetCaption(DOM.HTMLTableCaptionElement arg1) {
			interceptor.Invoke("setCaption#", "setCaption(const DOM::HTMLTableCaptionElement&)", typeof(void), typeof(DOM.HTMLTableCaptionElement), arg1);
		}
		/// <remarks>
		///  Returns the table's <code>THEAD</code> , or <code>null</code>
		///  if none exists.
		///      </remarks>		<short>    Returns the table's <code>THEAD</code> , or <code>null</code>  if none exists.</short>
		public DOM.HTMLTableSectionElement THead() {
			return (DOM.HTMLTableSectionElement) interceptor.Invoke("tHead", "tHead() const", typeof(DOM.HTMLTableSectionElement));
		}
		/// <remarks>
		///  see tHead
		///      </remarks>		<short>    see tHead      </short>
		public void SetTHead(DOM.HTMLTableSectionElement arg1) {
			interceptor.Invoke("setTHead#", "setTHead(const DOM::HTMLTableSectionElement&)", typeof(void), typeof(DOM.HTMLTableSectionElement), arg1);
		}
		/// <remarks>
		///  Returns the table's <code>TFOOT</code> , or <code>null</code>
		///  if none exists.
		///      </remarks>		<short>    Returns the table's <code>TFOOT</code> , or <code>null</code>  if none exists.</short>
		public DOM.HTMLTableSectionElement TFoot() {
			return (DOM.HTMLTableSectionElement) interceptor.Invoke("tFoot", "tFoot() const", typeof(DOM.HTMLTableSectionElement));
		}
		/// <remarks>
		///  see tFoot
		///      </remarks>		<short>    see tFoot      </short>
		public void SetTFoot(DOM.HTMLTableSectionElement arg1) {
			interceptor.Invoke("setTFoot#", "setTFoot(const DOM::HTMLTableSectionElement&)", typeof(void), typeof(DOM.HTMLTableSectionElement), arg1);
		}
		/// <remarks>
		///  Returns a collection of all the rows in the table, including
		///  all in <code>THEAD</code> , <code>TFOOT</code> , all
		///  <code>TBODY</code> elements.
		///      </remarks>		<short>    Returns a collection of all the rows in the table, including  all in <code>THEAD</code> , <code>TFOOT</code> , all  <code>TBODY</code> elements.</short>
		public DOM.HTMLCollection Rows() {
			return (DOM.HTMLCollection) interceptor.Invoke("rows", "rows() const", typeof(DOM.HTMLCollection));
		}
		/// <remarks>
		///  Returns a collection of the table bodies (including implicit ones).
		///      </remarks>		<short>    Returns a collection of the table bodies (including implicit ones).</short>
		public DOM.HTMLCollection TBodies() {
			return (DOM.HTMLCollection) interceptor.Invoke("tBodies", "tBodies() const", typeof(DOM.HTMLCollection));
		}
		/// <remarks>
		///  Specifies the table's position with respect to the rest of the
		///  document. See the <a
		///  href="http://www.w3.org/TR/REC-html40/struct/tables.html#adef-align-TABLE">
		///  align attribute definition </a> in HTML 4.0. This attribute is
		///  deprecated in HTML 4.0.
		///      </remarks>		<short>    Specifies the table's position with respect to the rest of the  document.</short>
		public DOM.DOMString Align() {
			return (DOM.DOMString) interceptor.Invoke("align", "align() const", typeof(DOM.DOMString));
		}
		/// <remarks>
		///  see align
		///      </remarks>		<short>    see align      </short>
		public void SetAlign(DOM.DOMString arg1) {
			interceptor.Invoke("setAlign#", "setAlign(const DOM::DOMString&)", typeof(void), typeof(DOM.DOMString), arg1);
		}
		/// <remarks>
		///  Cell background color. See the <a
		///  href="http://www.w3.org/TR/REC-html40/present/graphics.html#adef-bgcolor">
		///  bgcolor attribute definition </a> in HTML 4.0. This attribute
		///  is deprecated in HTML 4.0.
		///      </remarks>		<short>    Cell background color.</short>
		public DOM.DOMString BgColor() {
			return (DOM.DOMString) interceptor.Invoke("bgColor", "bgColor() const", typeof(DOM.DOMString));
		}
		/// <remarks>
		///  see bgColor
		///      </remarks>		<short>    see bgColor      </short>
		public void SetBgColor(DOM.DOMString arg1) {
			interceptor.Invoke("setBgColor#", "setBgColor(const DOM::DOMString&)", typeof(void), typeof(DOM.DOMString), arg1);
		}
		/// <remarks>
		///  The width of the border around the table. See the <a
		///  href="http://www.w3.org/TR/REC-html40/struct/tables.html#adef-border-TABLE">
		///  border attribute definition </a> in HTML 4.0.
		///      </remarks>		<short>    The width of the border around the table.</short>
		public DOM.DOMString Border() {
			return (DOM.DOMString) interceptor.Invoke("border", "border() const", typeof(DOM.DOMString));
		}
		/// <remarks>
		///  see border
		///      </remarks>		<short>    see border      </short>
		public void SetBorder(DOM.DOMString arg1) {
			interceptor.Invoke("setBorder#", "setBorder(const DOM::DOMString&)", typeof(void), typeof(DOM.DOMString), arg1);
		}
		/// <remarks>
		///  Specifies the horizontal and vertical space between cell
		///  content and cell borders. See the <a
		///  href="http://www.w3.org/TR/REC-html40/struct/tables.html#adef-cellpadding">
		///  cellpadding attribute definition </a> in HTML 4.0.
		///      </remarks>		<short>    Specifies the horizontal and vertical space between cell  content and cell borders.</short>
		public DOM.DOMString CellPadding() {
			return (DOM.DOMString) interceptor.Invoke("cellPadding", "cellPadding() const", typeof(DOM.DOMString));
		}
		/// <remarks>
		///  see cellPadding
		///      </remarks>		<short>    see cellPadding      </short>
		public void SetCellPadding(DOM.DOMString arg1) {
			interceptor.Invoke("setCellPadding#", "setCellPadding(const DOM::DOMString&)", typeof(void), typeof(DOM.DOMString), arg1);
		}
		/// <remarks>
		///  Specifies the horizontal and vertical separation between cells.
		///  See the <a
		///  href="http://www.w3.org/TR/REC-html40/struct/tables.html#adef-cellspacing">
		///  cellspacing attribute definition </a> in HTML 4.0.
		///      </remarks>		<short>    Specifies the horizontal and vertical separation between cells.</short>
		public DOM.DOMString CellSpacing() {
			return (DOM.DOMString) interceptor.Invoke("cellSpacing", "cellSpacing() const", typeof(DOM.DOMString));
		}
		/// <remarks>
		///  see cellSpacing
		///      </remarks>		<short>    see cellSpacing      </short>
		public void SetCellSpacing(DOM.DOMString arg1) {
			interceptor.Invoke("setCellSpacing#", "setCellSpacing(const DOM::DOMString&)", typeof(void), typeof(DOM.DOMString), arg1);
		}
		/// <remarks>
		///  Specifies which external table borders to render. See the <a
		///  href="http://www.w3.org/TR/REC-html40/struct/tables.html#adef-frame">
		///  frame attribute definition </a> in HTML 4.0.
		///      </remarks>		<short>    Specifies which external table borders to render.</short>
		public DOM.DOMString Frame() {
			return (DOM.DOMString) interceptor.Invoke("frame", "frame() const", typeof(DOM.DOMString));
		}
		/// <remarks>
		///  see frame
		///      </remarks>		<short>    see frame      </short>
		public void SetFrame(DOM.DOMString arg1) {
			interceptor.Invoke("setFrame#", "setFrame(const DOM::DOMString&)", typeof(void), typeof(DOM.DOMString), arg1);
		}
		/// <remarks>
		///  Specifies which internal table borders to render. See the <a
		///  href="http://www.w3.org/TR/REC-html40/struct/tables.html#adef-rules">
		///  rules attribute definition </a> in HTML 4.0.
		///      </remarks>		<short>    Specifies which internal table borders to render.</short>
		public DOM.DOMString Rules() {
			return (DOM.DOMString) interceptor.Invoke("rules", "rules() const", typeof(DOM.DOMString));
		}
		/// <remarks>
		///  see rules
		///      </remarks>		<short>    see rules      </short>
		public void SetRules(DOM.DOMString arg1) {
			interceptor.Invoke("setRules#", "setRules(const DOM::DOMString&)", typeof(void), typeof(DOM.DOMString), arg1);
		}
		/// <remarks>
		///  Supplementary description about the purpose or structure of a
		///  table. See the <a
		///  href="http://www.w3.org/TR/REC-html40/struct/tables.html#adef-summary">
		///  summary attribute definition </a> in HTML 4.0.
		///      </remarks>		<short>    Supplementary description about the purpose or structure of a  table.</short>
		public DOM.DOMString Summary() {
			return (DOM.DOMString) interceptor.Invoke("summary", "summary() const", typeof(DOM.DOMString));
		}
		/// <remarks>
		///  see summary
		///      </remarks>		<short>    see summary      </short>
		public void SetSummary(DOM.DOMString arg1) {
			interceptor.Invoke("setSummary#", "setSummary(const DOM::DOMString&)", typeof(void), typeof(DOM.DOMString), arg1);
		}
		/// <remarks>
		///  Specifies the desired table width. See the <a
		///  href="http://www.w3.org/TR/REC-html40/struct/tables.html#adef-width-TABLE">
		///  width attribute definition </a> in HTML 4.0.
		///      </remarks>		<short>    Specifies the desired table width.</short>
		public DOM.DOMString Width() {
			return (DOM.DOMString) interceptor.Invoke("width", "width() const", typeof(DOM.DOMString));
		}
		/// <remarks>
		///  see width
		///      </remarks>		<short>    see width      </short>
		public void SetWidth(DOM.DOMString arg1) {
			interceptor.Invoke("setWidth#", "setWidth(const DOM::DOMString&)", typeof(void), typeof(DOM.DOMString), arg1);
		}
		/// <remarks>
		///  Create a table header row or return an existing one.
		///      </remarks>		<return> A new table header element ( <code>THEAD</code> ).
		/// </return>
		/// 		<short>    Create a table header row or return an existing one.</short>
		public DOM.HTMLElement CreateTHead() {
			return (DOM.HTMLElement) interceptor.Invoke("createTHead", "createTHead()", typeof(DOM.HTMLElement));
		}
		/// <remarks>
		///  Delete the header from the table, if one exists.
		///      </remarks>		<short>    Delete the header from the table, if one exists.</short>
		public void DeleteTHead() {
			interceptor.Invoke("deleteTHead", "deleteTHead()", typeof(void));
		}
		/// <remarks>
		///  Create a table footer row or return an existing one.
		///      </remarks>		<return> A footer element ( <code>TFOOT</code> ).
		/// </return>
		/// 		<short>    Create a table footer row or return an existing one.</short>
		public DOM.HTMLElement CreateTFoot() {
			return (DOM.HTMLElement) interceptor.Invoke("createTFoot", "createTFoot()", typeof(DOM.HTMLElement));
		}
		/// <remarks>
		///  Delete the footer from the table, if one exists.
		///      </remarks>		<short>    Delete the footer from the table, if one exists.</short>
		public void DeleteTFoot() {
			interceptor.Invoke("deleteTFoot", "deleteTFoot()", typeof(void));
		}
		/// <remarks>
		///  Create a new table caption object or return an existing one.
		///      </remarks>		<return> A <code>CAPTION</code> element.
		/// </return>
		/// 		<short>    Create a new table caption object or return an existing one.</short>
		public DOM.HTMLElement CreateCaption() {
			return (DOM.HTMLElement) interceptor.Invoke("createCaption", "createCaption()", typeof(DOM.HTMLElement));
		}
		/// <remarks>
		///  Delete the table caption, if one exists.
		///      </remarks>		<short>    Delete the table caption, if one exists.</short>
		public void DeleteCaption() {
			interceptor.Invoke("deleteCaption", "deleteCaption()", typeof(void));
		}
		/// <remarks>
		///  Insert a new empty row in the table.
		///  The new row is inserted immediately before and in the same section
		///  as the current indexth row in the table. If index is -1 or equal
		///  to the number of rows, the new row is appended. In addition, when
		///  the table is empty the row is inserted into a TBODY which is created
		///  and inserted into the table.
		///   Note. A table row cannot
		///   be empty according to HTML 4.0 Recommendation.
		/// <param> name="index" The row number where to insert a new row.
		///  The index starts from 0 and is relative to the logical order
		///  (not document order) of all the rows contained inside the table.
		/// </param>     </remarks>		<return> The newly created row.
		/// </return>
		/// 		<short>    Insert a new empty row in the table.</short>
		public DOM.HTMLElement InsertRow(long index) {
			return (DOM.HTMLElement) interceptor.Invoke("insertRow$", "insertRow(long)", typeof(DOM.HTMLElement), typeof(long), index);
		}
		/// <remarks>
		///  Delete a table row.
		/// <param> name="index" The index of the row to be deleted.
		///  This index starts from 0 and is relative to the logical order
		///  (not document order) of all the rows contained inside the table.
		///  If the index is -1 the last row in the table is deleted.
		/// </param>     </remarks>		<short>    Delete a table row.</short>
		public void DeleteRow(long index) {
			interceptor.Invoke("deleteRow$", "deleteRow(long)", typeof(void), typeof(long), index);
		}
		~HTMLTableElement() {
			interceptor.Invoke("~HTMLTableElement", "~HTMLTableElement()", typeof(void));
		}
		public new void Dispose() {
			interceptor.Invoke("~HTMLTableElement", "~HTMLTableElement()", typeof(void));
		}
	}
}
