//Auto-generated by kalyptus. DO NOT EDIT.
namespace DOM {
	using Kimono;
	using System;
	using Qyoto;
	/// <remarks>
	///  Menu list. See the <a
	///  href="http://www.w3.org/TR/REC-html40/struct/lists.html#edef-MENU">
	///  MENU element definition </a> in HTML 4.0. This element is
	///  deprecated in HTML 4.0.
	///  </remarks>		<short>    Menu list.</short>
	[SmokeClass("DOM::HTMLMenuElement")]
	public class HTMLMenuElement : DOM.HTMLElement, IDisposable {
 		protected HTMLMenuElement(Type dummy) : base((Type) null) {}
		protected new void CreateProxy() {
			interceptor = new SmokeInvocation(typeof(HTMLMenuElement), this);
		}
		// DOM::HTMLMenuElement* HTMLMenuElement(DOM::HTMLMenuElementImpl* arg1); >>>> NOT CONVERTED
		public HTMLMenuElement() : this((Type) null) {
			CreateProxy();
			interceptor.Invoke("HTMLMenuElement", "HTMLMenuElement()", typeof(void));
		}
		public HTMLMenuElement(DOM.HTMLMenuElement other) : this((Type) null) {
			CreateProxy();
			interceptor.Invoke("HTMLMenuElement#", "HTMLMenuElement(const DOM::HTMLMenuElement&)", typeof(void), typeof(DOM.HTMLMenuElement), other);
		}
		public HTMLMenuElement(DOM.Node other) : this((Type) null) {
			CreateProxy();
			interceptor.Invoke("HTMLMenuElement#", "HTMLMenuElement(const DOM::Node&)", typeof(void), typeof(DOM.Node), other);
		}
		/// <remarks>
		///  Reduce spacing between list items. See the <a
		///  href="http://www.w3.org/TR/REC-html40/struct/lists.html#adef-compact">
		///  compact attribute definition </a> in HTML 4.0. This attribute
		///  is deprecated in HTML 4.0.
		///      </remarks>		<short>    Reduce spacing between list items.</short>
		public bool Compact() {
			return (bool) interceptor.Invoke("compact", "compact() const", typeof(bool));
		}
		/// <remarks>
		///  see compact
		///      </remarks>		<short>    see compact      </short>
		public void SetCompact(bool arg1) {
			interceptor.Invoke("setCompact$", "setCompact(bool)", typeof(void), typeof(bool), arg1);
		}
		~HTMLMenuElement() {
			interceptor.Invoke("~HTMLMenuElement", "~HTMLMenuElement()", typeof(void));
		}
		public new void Dispose() {
			interceptor.Invoke("~HTMLMenuElement", "~HTMLMenuElement()", typeof(void));
		}
	}
}
