//Auto-generated by kalyptus. DO NOT EDIT.
namespace DOM {
	using Kimono;
	using System;
	using Qyoto;
	/// <remarks>
	///  Generic block container. See the <a
	///  href="http://www.w3.org/TR/REC-html40/struct/global.html#edef-DIV">
	///  DIV element definition </a> in HTML 4.0.
	///  </remarks>		<short>    Generic block container.</short>
	[SmokeClass("DOM::HTMLDivElement")]
	public class HTMLDivElement : DOM.HTMLElement, IDisposable {
 		protected HTMLDivElement(Type dummy) : base((Type) null) {}
		protected new void CreateProxy() {
			interceptor = new SmokeInvocation(typeof(HTMLDivElement), this);
		}
		// DOM::HTMLDivElement* HTMLDivElement(DOM::HTMLDivElementImpl* arg1); >>>> NOT CONVERTED
		public HTMLDivElement() : this((Type) null) {
			CreateProxy();
			interceptor.Invoke("HTMLDivElement", "HTMLDivElement()", typeof(void));
		}
		public HTMLDivElement(DOM.HTMLDivElement other) : this((Type) null) {
			CreateProxy();
			interceptor.Invoke("HTMLDivElement#", "HTMLDivElement(const DOM::HTMLDivElement&)", typeof(void), typeof(DOM.HTMLDivElement), other);
		}
		public HTMLDivElement(DOM.Node other) : this((Type) null) {
			CreateProxy();
			interceptor.Invoke("HTMLDivElement#", "HTMLDivElement(const DOM::Node&)", typeof(void), typeof(DOM.Node), other);
		}
		/// <remarks>
		///  Horizontal text alignment. See the <a
		///  href="http://www.w3.org/TR/REC-html40/present/graphics.html#adef-align">
		///  align attribute definition </a> in HTML 4.0. This attribute is
		///  deprecated in HTML 4.0.
		///      </remarks>		<short>    Horizontal text alignment.</short>
		public DOM.DOMString Align() {
			return (DOM.DOMString) interceptor.Invoke("align", "align() const", typeof(DOM.DOMString));
		}
		/// <remarks>
		///  see align
		///      </remarks>		<short>    see align      </short>
		public void SetAlign(DOM.DOMString arg1) {
			interceptor.Invoke("setAlign#", "setAlign(const DOM::DOMString&)", typeof(void), typeof(DOM.DOMString), arg1);
		}
		~HTMLDivElement() {
			interceptor.Invoke("~HTMLDivElement", "~HTMLDivElement()", typeof(void));
		}
		public new void Dispose() {
			interceptor.Invoke("~HTMLDivElement", "~HTMLDivElement()", typeof(void));
		}
	}
}
