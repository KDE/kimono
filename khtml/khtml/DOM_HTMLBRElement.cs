//Auto-generated by kalyptus. DO NOT EDIT.
namespace DOM {
	using Kimono;
	using System;
	using Qyoto;
	/// <remarks>
	///  Force a line break. See the <a
	///  href="http://www.w3.org/TR/REC-html40/struct/text.html#edef-BR"> BR
	///  element definition </a> in HTML 4.0.
	///  </remarks>		<short>    Force a line break.</short>
	[SmokeClass("DOM::HTMLBRElement")]
	public class HTMLBRElement : DOM.HTMLElement, IDisposable {
 		protected HTMLBRElement(Type dummy) : base((Type) null) {}
		protected new void CreateProxy() {
			interceptor = new SmokeInvocation(typeof(HTMLBRElement), this);
		}
		// DOM::HTMLBRElement* HTMLBRElement(DOM::HTMLBRElementImpl* arg1); >>>> NOT CONVERTED
		public HTMLBRElement() : this((Type) null) {
			CreateProxy();
			interceptor.Invoke("HTMLBRElement", "HTMLBRElement()", typeof(void));
		}
		public HTMLBRElement(DOM.HTMLBRElement other) : this((Type) null) {
			CreateProxy();
			interceptor.Invoke("HTMLBRElement#", "HTMLBRElement(const DOM::HTMLBRElement&)", typeof(void), typeof(DOM.HTMLBRElement), other);
		}
		public HTMLBRElement(DOM.Node other) : this((Type) null) {
			CreateProxy();
			interceptor.Invoke("HTMLBRElement#", "HTMLBRElement(const DOM::Node&)", typeof(void), typeof(DOM.Node), other);
		}
		/// <remarks>
		///  Control flow of text around floats. See the <a
		///  href="http://www.w3.org/TR/REC-html40/present/graphics.html#adef-clear">
		///  clear attribute definition </a> in HTML 4.0. This attribute is
		///  deprecated in HTML 4.0.
		///      </remarks>		<short>    Control flow of text around floats.</short>
		public DOM.DOMString Clear() {
			return (DOM.DOMString) interceptor.Invoke("clear", "clear() const", typeof(DOM.DOMString));
		}
		/// <remarks>
		///  see clear
		///      </remarks>		<short>    see clear      </short>
		public void SetClear(DOM.DOMString arg1) {
			interceptor.Invoke("setClear#", "setClear(const DOM::DOMString&)", typeof(void), typeof(DOM.DOMString), arg1);
		}
		~HTMLBRElement() {
			interceptor.Invoke("~HTMLBRElement", "~HTMLBRElement()", typeof(void));
		}
		public new void Dispose() {
			interceptor.Invoke("~HTMLBRElement", "~HTMLBRElement()", typeof(void));
		}
	}
}
