//Auto-generated by kalyptus. DO NOT EDIT.
namespace KTextEditor {
    using Kimono;
    using System;
    using Qyoto;
    /// <remarks>
    ///  \brief Mark class containing line and mark types.
    ///  \section mark_intro Introduction
    ///  The class Mark represents a mark in a Document. It contains the \e line
    ///  and \e type. A line can have multiple marks, like a \e bookmark and a
    ///  \e breakpoint, i.e. the \e type contains all marks combined with a logical
    ///  \e OR (<tt>|</tt>). There are several predefined mark types, look into the
    ///  MarkInterface for further details.
    ///  \see KTextEditor.MarkInterface, KTextEditor.Document
    ///  </remarks>        <short>    \brief Mark class containing line and mark types.</short>
    [SmokeClass("KTextEditor::Mark")]
    public class Mark : Object, IDisposable {
        protected SmokeInvocation interceptor = null;
        private IntPtr smokeObject;
        protected Mark(Type dummy) {}
        protected void CreateProxy() {
            interceptor = new SmokeInvocation(typeof(Mark), this);
        }
        public Mark() : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("Mark", "Mark()", typeof(void));
        }
        ~Mark() {
            interceptor.Invoke("~Mark", "~Mark()", typeof(void));
        }
        public void Dispose() {
            interceptor.Invoke("~Mark", "~Mark()", typeof(void));
        }
    }
}
