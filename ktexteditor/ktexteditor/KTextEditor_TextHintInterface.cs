//Auto-generated by kalyptus. DO NOT EDIT.
namespace KTextEditor {
    using Kimono;
    using System;
    using Qyoto;
    using System.Text;
    /// <remarks>
    ///  This is an interface for the KTextEditor.View class.
    ///  \ingroup kte_group_view_extensions
    ///  </remarks>        <short>    This is an interface for the KTextEditor.View class.</short>
    [SmokeClass("KTextEditor::TextHintInterface")]
    public class TextHintInterface : Object, IDisposable {
        protected SmokeInvocation interceptor = null;
        private IntPtr smokeObject;
        protected TextHintInterface(Type dummy) {}
        protected void CreateProxy() {
            interceptor = new SmokeInvocation(typeof(TextHintInterface), this);
        }
        public TextHintInterface() : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("TextHintInterface", "TextHintInterface()", typeof(void));
        }
        /// <remarks>
        ///  enable Texthints. If they are enabled a signal needTextHint is emitted, if the mouse
        ///  changed the position and a new character is beneath the mouse cursor. The signal is delayed
        ///  for a certain time, specifiedin the timeout parameter.
        ///      </remarks>        <short>    enable Texthints.</short>
        [SmokeMethod("enableTextHints(int)")]
        public virtual void EnableTextHints(int timeout) {
            interceptor.Invoke("enableTextHints$", "enableTextHints(int)", typeof(void), typeof(int), timeout);
        }
        /// <remarks>
        ///  Disable texthints. Per default they are disabled.
        ///      </remarks>        <short>    Disable texthints.</short>
        [SmokeMethod("disableTextHints()")]
        public virtual void DisableTextHints() {
            interceptor.Invoke("disableTextHints", "disableTextHints()", typeof(void));
        }
        /// <remarks>
        ///  emit this signal, if a tooltip text is needed for displaying.
        ///  I you don't want a tooltip to be displayd set text to an emtpy string in a connected slot,
        ///  otherwise set text to the string you want the editor to display
        ///      </remarks>        <short>    emit this signal, if a tooltip text is needed for displaying.</short>
        [SmokeMethod("needTextHint(const KTextEditor::Cursor&, QString&)")]
        public virtual void NeedTextHint(KTextEditor.Cursor position, StringBuilder text) {
            interceptor.Invoke("needTextHint#$", "needTextHint(const KTextEditor::Cursor&, QString&)", typeof(void), typeof(KTextEditor.Cursor), position, typeof(StringBuilder), text);
        }
        ~TextHintInterface() {
            interceptor.Invoke("~TextHintInterface", "~TextHintInterface()", typeof(void));
        }
        public void Dispose() {
            interceptor.Invoke("~TextHintInterface", "~TextHintInterface()", typeof(void));
        }
    }
}
