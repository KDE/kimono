//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {
    using System;
    using System.Collections.Generic;
    [SmokeClass("QWebSecurityOrigin")]
    public class QWebSecurityOrigin : Object, IDisposable {
        protected SmokeInvocation interceptor = null;
        private IntPtr smokeObject;
        protected QWebSecurityOrigin(Type dummy) {}
        protected void CreateProxy() {
            interceptor = new SmokeInvocation(typeof(QWebSecurityOrigin), this);
        }
        private static SmokeInvocation staticInterceptor = null;
        static QWebSecurityOrigin() {
            staticInterceptor = new SmokeInvocation(typeof(QWebSecurityOrigin), null);
        }
        public string Scheme() {
            return (string) interceptor.Invoke("scheme", "scheme() const", typeof(string));
        }
        public string Host() {
            return (string) interceptor.Invoke("host", "host() const", typeof(string));
        }
        public int Port() {
            return (int) interceptor.Invoke("port", "port() const", typeof(int));
        }
        public long DatabaseUsage() {
            return (long) interceptor.Invoke("databaseUsage", "databaseUsage() const", typeof(long));
        }
        public long DatabaseQuota() {
            return (long) interceptor.Invoke("databaseQuota", "databaseQuota() const", typeof(long));
        }
        public void SetDatabaseQuota(long quota) {
            interceptor.Invoke("setDatabaseQuota$", "setDatabaseQuota(qint64)", typeof(void), typeof(long), quota);
        }
        public List<QWebDatabase> Databases() {
            return (List<QWebDatabase>) interceptor.Invoke("databases", "databases() const", typeof(List<QWebDatabase>));
        }
        public QWebSecurityOrigin(QWebSecurityOrigin other) : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("QWebSecurityOrigin#", "QWebSecurityOrigin(const QWebSecurityOrigin&)", typeof(void), typeof(QWebSecurityOrigin), other);
        }
        ~QWebSecurityOrigin() {
            interceptor.Invoke("~QWebSecurityOrigin", "~QWebSecurityOrigin()", typeof(void));
        }
        public void Dispose() {
            interceptor.Invoke("~QWebSecurityOrigin", "~QWebSecurityOrigin()", typeof(void));
        }
        public static List<QWebSecurityOrigin> AllOrigins() {
            return (List<QWebSecurityOrigin>) staticInterceptor.Invoke("allOrigins", "allOrigins()", typeof(List<QWebSecurityOrigin>));
        }
        public static void AddLocalScheme(string scheme) {
            staticInterceptor.Invoke("addLocalScheme$", "addLocalScheme(const QString&)", typeof(void), typeof(string), scheme);
        }
        public static void RemoveLocalScheme(string scheme) {
            staticInterceptor.Invoke("removeLocalScheme$", "removeLocalScheme(const QString&)", typeof(void), typeof(string), scheme);
        }
        public static List<string> LocalSchemes() {
            return (List<string>) staticInterceptor.Invoke("localSchemes", "localSchemes()", typeof(List<string>));
        }
    }
}
