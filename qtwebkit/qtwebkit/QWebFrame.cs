//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {
    using System;
    using System.Collections.Generic;
    [SmokeClass("QWebFrame")]
    public class QWebFrame : QObject {
        protected QWebFrame(Type dummy) : base((Type) null) {}
        protected new void CreateProxy() {
            interceptor = new SmokeInvocation(typeof(QWebFrame), this);
        }
        private static SmokeInvocation staticInterceptor = null;
        static QWebFrame() {
            staticInterceptor = new SmokeInvocation(typeof(QWebFrame), null);
        }
        [Q_PROPERTY("qreal", "textSizeMultiplier")]
        public double TextSizeMultiplier {
            get { return (double) interceptor.Invoke("textSizeMultiplier", "textSizeMultiplier()", typeof(double)); }
            set { interceptor.Invoke("setTextSizeMultiplier$", "setTextSizeMultiplier(qreal)", typeof(void), typeof(double), value); }
        }
        [Q_PROPERTY("QString", "title")]
        public string Title {
            get { return (string) interceptor.Invoke("title", "title()", typeof(string)); }
        }
        [Q_PROPERTY("QUrl", "url")]
        public QUrl Url {
            get { return (QUrl) interceptor.Invoke("url", "url()", typeof(QUrl)); }
            set { interceptor.Invoke("setUrl#", "setUrl(QUrl)", typeof(void), typeof(QUrl), value); }
        }
        [Q_PROPERTY("QIcon", "icon")]
        public QIcon icon {
            get { return (QIcon) interceptor.Invoke("icon", "icon()", typeof(QIcon)); }
        }
        [Q_PROPERTY("QSize", "contentsSize")]
        public QSize ContentsSize {
            get { return (QSize) interceptor.Invoke("contentsSize", "contentsSize()", typeof(QSize)); }
        }
        public QWebPage Page() {
            return (QWebPage) interceptor.Invoke("page", "page() const", typeof(QWebPage));
        }
        public void Load(QUrl url) {
            interceptor.Invoke("load#", "load(const QUrl&)", typeof(void), typeof(QUrl), url);
        }
        public void Load(QNetworkRequest request, QNetworkAccessManager.Operation operation, QByteArray body) {
            interceptor.Invoke("load#$#", "load(const QNetworkRequest&, QNetworkAccessManager::Operation, const QByteArray&)", typeof(void), typeof(QNetworkRequest), request, typeof(QNetworkAccessManager.Operation), operation, typeof(QByteArray), body);
        }
        public void Load(QNetworkRequest request, QNetworkAccessManager.Operation operation) {
            interceptor.Invoke("load#$", "load(const QNetworkRequest&, QNetworkAccessManager::Operation)", typeof(void), typeof(QNetworkRequest), request, typeof(QNetworkAccessManager.Operation), operation);
        }
        public void Load(QNetworkRequest request) {
            interceptor.Invoke("load#", "load(const QNetworkRequest&)", typeof(void), typeof(QNetworkRequest), request);
        }
        public void SetHtml(string html, QUrl baseUrl) {
            interceptor.Invoke("setHtml$#", "setHtml(const QString&, const QUrl&)", typeof(void), typeof(string), html, typeof(QUrl), baseUrl);
        }
        public void SetHtml(string html) {
            interceptor.Invoke("setHtml$", "setHtml(const QString&)", typeof(void), typeof(string), html);
        }
        public void SetContent(QByteArray data, string mimeType, QUrl baseUrl) {
            interceptor.Invoke("setContent#$#", "setContent(const QByteArray&, const QString&, const QUrl&)", typeof(void), typeof(QByteArray), data, typeof(string), mimeType, typeof(QUrl), baseUrl);
        }
        public void SetContent(QByteArray data, string mimeType) {
            interceptor.Invoke("setContent#$", "setContent(const QByteArray&, const QString&)", typeof(void), typeof(QByteArray), data, typeof(string), mimeType);
        }
        public void SetContent(QByteArray data) {
            interceptor.Invoke("setContent#", "setContent(const QByteArray&)", typeof(void), typeof(QByteArray), data);
        }
        public void AddToJavaScriptWindowObject(string name, QObject arg2) {
            interceptor.Invoke("addToJavaScriptWindowObject$#", "addToJavaScriptWindowObject(const QString&, QObject*)", typeof(void), typeof(string), name, typeof(QObject), arg2);
        }
        public string ToHtml() {
            return (string) interceptor.Invoke("toHtml", "toHtml() const", typeof(string));
        }
        public string ToPlainText() {
            return (string) interceptor.Invoke("toPlainText", "toPlainText() const", typeof(string));
        }
        public string RenderTreeDump() {
            return (string) interceptor.Invoke("renderTreeDump", "renderTreeDump() const", typeof(string));
        }
        public string FrameName() {
            return (string) interceptor.Invoke("frameName", "frameName() const", typeof(string));
        }
        public QWebFrame ParentFrame() {
            return (QWebFrame) interceptor.Invoke("parentFrame", "parentFrame() const", typeof(QWebFrame));
        }
        public List<QWebFrame> ChildFrames() {
            return (List<QWebFrame>) interceptor.Invoke("childFrames", "childFrames() const", typeof(List<QWebFrame>));
        }
        public new Qt.ScrollBarPolicy ScrollBarPolicy(Qt.Orientation orientation) {
            return (Qt.ScrollBarPolicy) interceptor.Invoke("scrollBarPolicy$", "scrollBarPolicy(Qt::Orientation) const", typeof(Qt.ScrollBarPolicy), typeof(Qt.Orientation), orientation);
        }
        public void SetScrollBarPolicy(Qt.Orientation orientation, Qt.ScrollBarPolicy policy) {
            interceptor.Invoke("setScrollBarPolicy$$", "setScrollBarPolicy(Qt::Orientation, Qt::ScrollBarPolicy)", typeof(void), typeof(Qt.Orientation), orientation, typeof(Qt.ScrollBarPolicy), policy);
        }
        public void SetScrollBarValue(Qt.Orientation orientation, int value) {
            interceptor.Invoke("setScrollBarValue$$", "setScrollBarValue(Qt::Orientation, int)", typeof(void), typeof(Qt.Orientation), orientation, typeof(int), value);
        }
        public int ScrollBarValue(Qt.Orientation orientation) {
            return (int) interceptor.Invoke("scrollBarValue$", "scrollBarValue(Qt::Orientation) const", typeof(int), typeof(Qt.Orientation), orientation);
        }
        public int ScrollBarMinimum(Qt.Orientation orientation) {
            return (int) interceptor.Invoke("scrollBarMinimum$", "scrollBarMinimum(Qt::Orientation) const", typeof(int), typeof(Qt.Orientation), orientation);
        }
        public int ScrollBarMaximum(Qt.Orientation orientation) {
            return (int) interceptor.Invoke("scrollBarMaximum$", "scrollBarMaximum(Qt::Orientation) const", typeof(int), typeof(Qt.Orientation), orientation);
        }
        public void Render(QPainter painter, QRegion clip) {
            interceptor.Invoke("render##", "render(QPainter*, const QRegion&)", typeof(void), typeof(QPainter), painter, typeof(QRegion), clip);
        }
        public void Render(QPainter painter) {
            interceptor.Invoke("render#", "render(QPainter*)", typeof(void), typeof(QPainter), painter);
        }
        public QPoint Pos() {
            return (QPoint) interceptor.Invoke("pos", "pos() const", typeof(QPoint));
        }
        public QRect Geometry() {
            return (QRect) interceptor.Invoke("geometry", "geometry() const", typeof(QRect));
        }
        public QWebHitTestResult HitTestContent(QPoint pos) {
            return (QWebHitTestResult) interceptor.Invoke("hitTestContent#", "hitTestContent(const QPoint&) const", typeof(QWebHitTestResult), typeof(QPoint), pos);
        }
        [SmokeMethod("event(QEvent*)")]
        public override bool Event(QEvent arg1) {
            return (bool) interceptor.Invoke("event#", "event(QEvent*)", typeof(bool), typeof(QEvent), arg1);
        }
        [Q_SLOT("QVariant evaluateJavaScript(QString)")]
        public QVariant EvaluateJavaScript(string scriptSource) {
            return (QVariant) interceptor.Invoke("evaluateJavaScript$", "evaluateJavaScript(const QString&)", typeof(QVariant), typeof(string), scriptSource);
        }
        [Q_SLOT("void print(QPrinter*)")]
        public void Print(QPrinter printer) {
            interceptor.Invoke("print#", "print(QPrinter*) const", typeof(void), typeof(QPrinter), printer);
        }
        public static new string Tr(string s, string c) {
            return (string) staticInterceptor.Invoke("tr$$", "tr(const char*, const char*)", typeof(string), typeof(string), s, typeof(string), c);
        }
        public static new string Tr(string s) {
            return (string) staticInterceptor.Invoke("tr$", "tr(const char*)", typeof(string), typeof(string), s);
        }
        protected new IQWebFrameSignals Emit {
            get { return (IQWebFrameSignals) Q_EMIT; }
        }
    }

    public interface IQWebFrameSignals : IQObjectSignals {
    }
}
