//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {
    using System;
    using System.Collections.Generic;
    [SmokeClass("QWebElementCollection")]
    public partial class QWebElementCollection : Object, IDisposable, IEnumerable<QWebElement> {
        protected SmokeInvocation interceptor = null;
        private IntPtr smokeObject;
        protected QWebElementCollection(Type dummy) {}
        [SmokeClass("QWebElementCollection::const_iterator")]
        public class const_iterator : Object, IDisposable {
            protected SmokeInvocation interceptor = null;
            private IntPtr smokeObject;
            protected const_iterator(Type dummy) {}
            protected void CreateProxy() {
                interceptor = new SmokeInvocation(typeof(const_iterator), this);
            }
            private static SmokeInvocation staticInterceptor = null;
            static const_iterator() {
                staticInterceptor = new SmokeInvocation(typeof(const_iterator), null);
            }
            public const_iterator(QWebElementCollection collection, int index) : this((Type) null) {
                CreateProxy();
                interceptor.Invoke("const_iterator#$", "const_iterator(const QWebElementCollection*, int)", typeof(void), typeof(QWebElementCollection), collection, typeof(int), index);
            }
            public const_iterator(QWebElementCollection.const_iterator o) : this((Type) null) {
                CreateProxy();
                interceptor.Invoke("const_iterator#", "const_iterator(const QWebElementCollection::const_iterator&)", typeof(void), typeof(QWebElementCollection.const_iterator), o);
            }
            public override bool Equals(object o) {
                if (!(o is const_iterator)) { return false; }
                return this == (const_iterator) o;
            }
            public override int GetHashCode() {
                return interceptor.GetHashCode();
            }
            ~const_iterator() {
                interceptor.Invoke("~const_iterator", "~const_iterator()", typeof(void));
            }
            public void Dispose() {
                interceptor.Invoke("~const_iterator", "~const_iterator()", typeof(void));
            }
            public static bool operator==(const_iterator lhs, QWebElementCollection.const_iterator o) {
                return (bool) staticInterceptor.Invoke("operator==#", "operator==(const QWebElementCollection::const_iterator&) const", typeof(bool), typeof(const_iterator), lhs, typeof(QWebElementCollection.const_iterator), o);
            }
            public static bool operator!=(const_iterator lhs, QWebElementCollection.const_iterator o) {
                return !(bool) staticInterceptor.Invoke("operator==#", "operator==(const QWebElementCollection::const_iterator&) const", typeof(bool), typeof(const_iterator), lhs, typeof(QWebElementCollection.const_iterator), o);
            }
            public static bool operator<(const_iterator lhs, QWebElementCollection.const_iterator o) {
                return (bool) staticInterceptor.Invoke("operator<#", "operator<(const QWebElementCollection::const_iterator&) const", typeof(bool), typeof(const_iterator), lhs, typeof(QWebElementCollection.const_iterator), o);
            }
            public static bool operator<=(const_iterator lhs, QWebElementCollection.const_iterator o) {
                return (bool) staticInterceptor.Invoke("operator<=#", "operator<=(const QWebElementCollection::const_iterator&) const", typeof(bool), typeof(const_iterator), lhs, typeof(QWebElementCollection.const_iterator), o);
            }
            public static bool operator>(const_iterator lhs, QWebElementCollection.const_iterator o) {
                return (bool) staticInterceptor.Invoke("operator>#", "operator>(const QWebElementCollection::const_iterator&) const", typeof(bool), typeof(const_iterator), lhs, typeof(QWebElementCollection.const_iterator), o);
            }
            public static bool operator>=(const_iterator lhs, QWebElementCollection.const_iterator o) {
                return (bool) staticInterceptor.Invoke("operator>=#", "operator>=(const QWebElementCollection::const_iterator&) const", typeof(bool), typeof(const_iterator), lhs, typeof(QWebElementCollection.const_iterator), o);
            }
            public static QWebElementCollection.const_iterator operator++(const_iterator lhs) {
                return (QWebElementCollection.const_iterator) staticInterceptor.Invoke("operator++", "operator++()", typeof(QWebElementCollection.const_iterator), typeof(const_iterator), lhs);
            }
            public static QWebElementCollection.const_iterator operator--(const_iterator lhs) {
                return (QWebElementCollection.const_iterator) staticInterceptor.Invoke("operator--", "operator--()", typeof(QWebElementCollection.const_iterator), typeof(const_iterator), lhs);
            }
            public static QWebElementCollection.const_iterator operator+(const_iterator lhs, int j) {
                return (QWebElementCollection.const_iterator) staticInterceptor.Invoke("operator+$", "operator+(int) const", typeof(QWebElementCollection.const_iterator), typeof(const_iterator), lhs, typeof(int), j);
            }
            public static QWebElementCollection.const_iterator operator-(const_iterator lhs, int j) {
                return (QWebElementCollection.const_iterator) staticInterceptor.Invoke("operator-$", "operator-(int) const", typeof(QWebElementCollection.const_iterator), typeof(const_iterator), lhs, typeof(int), j);
            }
            public static int operator-(const_iterator lhs, QWebElementCollection.const_iterator j) {
                return (int) staticInterceptor.Invoke("operator-#", "operator-(QWebElementCollection::const_iterator) const", typeof(int), typeof(const_iterator), lhs, typeof(QWebElementCollection.const_iterator), j);
            }
        }
        [SmokeClass("QWebElementCollection::iterator")]
        public class iterator : Object, IDisposable {
            protected SmokeInvocation interceptor = null;
            private IntPtr smokeObject;
            protected iterator(Type dummy) {}
            protected void CreateProxy() {
                interceptor = new SmokeInvocation(typeof(iterator), this);
            }
            private static SmokeInvocation staticInterceptor = null;
            static iterator() {
                staticInterceptor = new SmokeInvocation(typeof(iterator), null);
            }
            public iterator(QWebElementCollection collection, int index) : this((Type) null) {
                CreateProxy();
                interceptor.Invoke("iterator#$", "iterator(const QWebElementCollection*, int)", typeof(void), typeof(QWebElementCollection), collection, typeof(int), index);
            }
            public iterator(QWebElementCollection.iterator o) : this((Type) null) {
                CreateProxy();
                interceptor.Invoke("iterator#", "iterator(const QWebElementCollection::iterator&)", typeof(void), typeof(QWebElementCollection.iterator), o);
            }
            public override bool Equals(object o) {
                if (!(o is iterator)) { return false; }
                return this == (iterator) o;
            }
            public override int GetHashCode() {
                return interceptor.GetHashCode();
            }
            ~iterator() {
                interceptor.Invoke("~iterator", "~iterator()", typeof(void));
            }
            public void Dispose() {
                interceptor.Invoke("~iterator", "~iterator()", typeof(void));
            }
            public static bool operator==(iterator lhs, QWebElementCollection.iterator o) {
                return (bool) staticInterceptor.Invoke("operator==#", "operator==(const QWebElementCollection::iterator&) const", typeof(bool), typeof(iterator), lhs, typeof(QWebElementCollection.iterator), o);
            }
            public static bool operator!=(iterator lhs, QWebElementCollection.iterator o) {
                return !(bool) staticInterceptor.Invoke("operator==#", "operator==(const QWebElementCollection::iterator&) const", typeof(bool), typeof(iterator), lhs, typeof(QWebElementCollection.iterator), o);
            }
            public static bool operator<(iterator lhs, QWebElementCollection.iterator o) {
                return (bool) staticInterceptor.Invoke("operator<#", "operator<(const QWebElementCollection::iterator&) const", typeof(bool), typeof(iterator), lhs, typeof(QWebElementCollection.iterator), o);
            }
            public static bool operator<=(iterator lhs, QWebElementCollection.iterator o) {
                return (bool) staticInterceptor.Invoke("operator<=#", "operator<=(const QWebElementCollection::iterator&) const", typeof(bool), typeof(iterator), lhs, typeof(QWebElementCollection.iterator), o);
            }
            public static bool operator>(iterator lhs, QWebElementCollection.iterator o) {
                return (bool) staticInterceptor.Invoke("operator>#", "operator>(const QWebElementCollection::iterator&) const", typeof(bool), typeof(iterator), lhs, typeof(QWebElementCollection.iterator), o);
            }
            public static bool operator>=(iterator lhs, QWebElementCollection.iterator o) {
                return (bool) staticInterceptor.Invoke("operator>=#", "operator>=(const QWebElementCollection::iterator&) const", typeof(bool), typeof(iterator), lhs, typeof(QWebElementCollection.iterator), o);
            }
            public static QWebElementCollection.iterator operator++(iterator lhs) {
                return (QWebElementCollection.iterator) staticInterceptor.Invoke("operator++", "operator++()", typeof(QWebElementCollection.iterator), typeof(iterator), lhs);
            }
            public static QWebElementCollection.iterator operator--(iterator lhs) {
                return (QWebElementCollection.iterator) staticInterceptor.Invoke("operator--", "operator--()", typeof(QWebElementCollection.iterator), typeof(iterator), lhs);
            }
            public static QWebElementCollection.iterator operator+(iterator lhs, int j) {
                return (QWebElementCollection.iterator) staticInterceptor.Invoke("operator+$", "operator+(int) const", typeof(QWebElementCollection.iterator), typeof(iterator), lhs, typeof(int), j);
            }
            public static QWebElementCollection.iterator operator-(iterator lhs, int j) {
                return (QWebElementCollection.iterator) staticInterceptor.Invoke("operator-$", "operator-(int) const", typeof(QWebElementCollection.iterator), typeof(iterator), lhs, typeof(int), j);
            }
            public static int operator-(iterator lhs, QWebElementCollection.iterator j) {
                return (int) staticInterceptor.Invoke("operator-#", "operator-(QWebElementCollection::iterator) const", typeof(int), typeof(iterator), lhs, typeof(QWebElementCollection.iterator), j);
            }
        }
        protected void CreateProxy() {
            interceptor = new SmokeInvocation(typeof(QWebElementCollection), this);
        }
        private static SmokeInvocation staticInterceptor = null;
        static QWebElementCollection() {
            staticInterceptor = new SmokeInvocation(typeof(QWebElementCollection), null);
        }
        public QWebElementCollection() : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("QWebElementCollection", "QWebElementCollection()", typeof(void));
        }
        public QWebElementCollection(QWebElement contextElement, string query) : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("QWebElementCollection#$", "QWebElementCollection(const QWebElement&, const QString&)", typeof(void), typeof(QWebElement), contextElement, typeof(string), query);
        }
        public QWebElementCollection(QWebElementCollection arg1) : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("QWebElementCollection#", "QWebElementCollection(const QWebElementCollection&)", typeof(void), typeof(QWebElementCollection), arg1);
        }
        public void Append(QWebElementCollection collection) {
            interceptor.Invoke("append#", "append(const QWebElementCollection&)", typeof(void), typeof(QWebElementCollection), collection);
        }
        public int Count() {
            return (int) interceptor.Invoke("count", "count() const", typeof(int));
        }
        public QWebElement At(int i) {
            return (QWebElement) interceptor.Invoke("at$", "at(int) const", typeof(QWebElement), typeof(int), i);
        }
        public QWebElement First() {
            return (QWebElement) interceptor.Invoke("first", "first() const", typeof(QWebElement));
        }
        public QWebElement Last() {
            return (QWebElement) interceptor.Invoke("last", "last() const", typeof(QWebElement));
        }
        public List<QWebElement> ToList() {
            return (List<QWebElement>) interceptor.Invoke("toList", "toList() const", typeof(List<QWebElement>));
        }
        public QWebElementCollection.const_iterator ConstBegin() {
            return (QWebElementCollection.const_iterator) interceptor.Invoke("constBegin", "constBegin() const", typeof(QWebElementCollection.const_iterator));
        }
        public QWebElementCollection.const_iterator ConstEnd() {
            return (QWebElementCollection.const_iterator) interceptor.Invoke("constEnd", "constEnd() const", typeof(QWebElementCollection.const_iterator));
        }
        public QWebElementCollection.iterator Begin() {
            return (QWebElementCollection.iterator) interceptor.Invoke("begin", "begin()", typeof(QWebElementCollection.iterator));
        }
        public QWebElementCollection.iterator End() {
            return (QWebElementCollection.iterator) interceptor.Invoke("end", "end()", typeof(QWebElementCollection.iterator));
        }
        ~QWebElementCollection() {
            interceptor.Invoke("~QWebElementCollection", "~QWebElementCollection()", typeof(void));
        }
        public void Dispose() {
            interceptor.Invoke("~QWebElementCollection", "~QWebElementCollection()", typeof(void));
        }
        public static QWebElementCollection operator+(QWebElementCollection lhs, QWebElementCollection other) {
            return (QWebElementCollection) staticInterceptor.Invoke("operator+#", "operator+(const QWebElementCollection&) const", typeof(QWebElementCollection), typeof(QWebElementCollection), lhs, typeof(QWebElementCollection), other);
        }
    }
}
