//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {
    using System;
    [SmokeClass("QWebInspector")]
    public class QWebInspector : QWidget, IDisposable {
        protected QWebInspector(Type dummy) : base((Type) null) {}
        protected new void CreateProxy() {
            interceptor = new SmokeInvocation(typeof(QWebInspector), this);
        }
        private static SmokeInvocation staticInterceptor = null;
        static QWebInspector() {
            staticInterceptor = new SmokeInvocation(typeof(QWebInspector), null);
        }
        public QWebInspector(QWidget parent) : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("QWebInspector#", "QWebInspector(QWidget*)", typeof(void), typeof(QWidget), parent);
        }
        public QWebInspector() : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("QWebInspector", "QWebInspector()", typeof(void));
        }
        public void SetPage(QWebPage page) {
            interceptor.Invoke("setPage#", "setPage(QWebPage*)", typeof(void), typeof(QWebPage), page);
        }
        public QWebPage Page() {
            return (QWebPage) interceptor.Invoke("page", "page() const", typeof(QWebPage));
        }
        [SmokeMethod("sizeHint() const")]
        public override QSize SizeHint() {
            return (QSize) interceptor.Invoke("sizeHint", "sizeHint() const", typeof(QSize));
        }
        [SmokeMethod("event(QEvent*)")]
        public new virtual bool Event(QEvent arg1) {
            return (bool) interceptor.Invoke("event#", "event(QEvent*)", typeof(bool), typeof(QEvent), arg1);
        }
        [SmokeMethod("resizeEvent(QResizeEvent*)")]
        protected override void ResizeEvent(QResizeEvent arg1) {
            interceptor.Invoke("resizeEvent#", "resizeEvent(QResizeEvent*)", typeof(void), typeof(QResizeEvent), arg1);
        }
        [SmokeMethod("showEvent(QShowEvent*)")]
        protected override void ShowEvent(QShowEvent arg1) {
            interceptor.Invoke("showEvent#", "showEvent(QShowEvent*)", typeof(void), typeof(QShowEvent), arg1);
        }
        [SmokeMethod("hideEvent(QHideEvent*)")]
        protected override void HideEvent(QHideEvent arg1) {
            interceptor.Invoke("hideEvent#", "hideEvent(QHideEvent*)", typeof(void), typeof(QHideEvent), arg1);
        }
        ~QWebInspector() {
            interceptor.Invoke("~QWebInspector", "~QWebInspector()", typeof(void));
        }
        public new void Dispose() {
            interceptor.Invoke("~QWebInspector", "~QWebInspector()", typeof(void));
        }
        public static new string Tr(string s, string c) {
            return (string) staticInterceptor.Invoke("tr$$", "tr(const char*, const char*)", typeof(string), typeof(string), s, typeof(string), c);
        }
        public static new string Tr(string s) {
            return (string) staticInterceptor.Invoke("tr$", "tr(const char*)", typeof(string), typeof(string), s);
        }
        protected new IQWebInspectorSignals Emit {
            get { return (IQWebInspectorSignals) Q_EMIT; }
        }
    }

    public interface IQWebInspectorSignals : IQWidgetSignals {
    }
}
