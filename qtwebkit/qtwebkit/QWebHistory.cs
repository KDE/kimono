//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {
    using System;
    using System.Collections.Generic;
    [SmokeClass("QWebHistory")]
    public class QWebHistory : Object {
        protected SmokeInvocation interceptor = null;
        private IntPtr smokeObject;
        protected QWebHistory(Type dummy) {}
        protected void CreateProxy() {
            interceptor = new SmokeInvocation(typeof(QWebHistory), this);
        }
        public void Clear() {
            interceptor.Invoke("clear", "clear()", typeof(void));
        }
        public List<QWebHistoryItem> Items() {
            return (List<QWebHistoryItem>) interceptor.Invoke("items", "items() const", typeof(List<QWebHistoryItem>));
        }
        public List<QWebHistoryItem> BackItems(int maxItems) {
            return (List<QWebHistoryItem>) interceptor.Invoke("backItems$", "backItems(int) const", typeof(List<QWebHistoryItem>), typeof(int), maxItems);
        }
        public List<QWebHistoryItem> ForwardItems(int maxItems) {
            return (List<QWebHistoryItem>) interceptor.Invoke("forwardItems$", "forwardItems(int) const", typeof(List<QWebHistoryItem>), typeof(int), maxItems);
        }
        public bool CanGoBack() {
            return (bool) interceptor.Invoke("canGoBack", "canGoBack() const", typeof(bool));
        }
        public bool CanGoForward() {
            return (bool) interceptor.Invoke("canGoForward", "canGoForward() const", typeof(bool));
        }
        public void Back() {
            interceptor.Invoke("back", "back()", typeof(void));
        }
        public void Forward() {
            interceptor.Invoke("forward", "forward()", typeof(void));
        }
        public void GoToItem(QWebHistoryItem item) {
            interceptor.Invoke("goToItem#", "goToItem(const QWebHistoryItem&)", typeof(void), typeof(QWebHistoryItem), item);
        }
        public QWebHistoryItem BackItem() {
            return (QWebHistoryItem) interceptor.Invoke("backItem", "backItem() const", typeof(QWebHistoryItem));
        }
        public QWebHistoryItem CurrentItem() {
            return (QWebHistoryItem) interceptor.Invoke("currentItem", "currentItem() const", typeof(QWebHistoryItem));
        }
        public QWebHistoryItem ForwardItem() {
            return (QWebHistoryItem) interceptor.Invoke("forwardItem", "forwardItem() const", typeof(QWebHistoryItem));
        }
        public QWebHistoryItem ItemAt(int i) {
            return (QWebHistoryItem) interceptor.Invoke("itemAt$", "itemAt(int) const", typeof(QWebHistoryItem), typeof(int), i);
        }
        public int Count() {
            return (int) interceptor.Invoke("count", "count() const", typeof(int));
        }
    }
}
