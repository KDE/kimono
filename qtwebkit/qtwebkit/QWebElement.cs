//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {
    using System;
    using System.Collections.Generic;
    [SmokeClass("QWebElement")]
    public class QWebElement : Object, IDisposable {
        protected SmokeInvocation interceptor = null;
        private IntPtr smokeObject;
        protected QWebElement(Type dummy) {}
        protected void CreateProxy() {
            interceptor = new SmokeInvocation(typeof(QWebElement), this);
        }
        private static SmokeInvocation staticInterceptor = null;
        static QWebElement() {
            staticInterceptor = new SmokeInvocation(typeof(QWebElement), null);
        }
        public enum StyleResolveStrategy {
            InlineStyle = 0,
            CascadedStyle = 1,
            ComputedStyle = 2,
        }
        public QWebElement() : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("QWebElement", "QWebElement()", typeof(void));
        }
        public QWebElement(QWebElement arg1) : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("QWebElement#", "QWebElement(const QWebElement&)", typeof(void), typeof(QWebElement), arg1);
        }
        public override bool Equals(object o) {
            if (!(o is QWebElement)) { return false; }
            return this == (QWebElement) o;
        }
        public override int GetHashCode() {
            return interceptor.GetHashCode();
        }
        public bool IsNull() {
            return (bool) interceptor.Invoke("isNull", "isNull() const", typeof(bool));
        }
        public QWebElementCollection FindAll(string selectorQuery) {
            return (QWebElementCollection) interceptor.Invoke("findAll$", "findAll(const QString&) const", typeof(QWebElementCollection), typeof(string), selectorQuery);
        }
        public QWebElement FindFirst(string selectorQuery) {
            return (QWebElement) interceptor.Invoke("findFirst$", "findFirst(const QString&) const", typeof(QWebElement), typeof(string), selectorQuery);
        }
        public void SetPlainText(string text) {
            interceptor.Invoke("setPlainText$", "setPlainText(const QString&)", typeof(void), typeof(string), text);
        }
        public string ToPlainText() {
            return (string) interceptor.Invoke("toPlainText", "toPlainText() const", typeof(string));
        }
        public void SetOuterXml(string markup) {
            interceptor.Invoke("setOuterXml$", "setOuterXml(const QString&)", typeof(void), typeof(string), markup);
        }
        public string ToOuterXml() {
            return (string) interceptor.Invoke("toOuterXml", "toOuterXml() const", typeof(string));
        }
        public void SetInnerXml(string markup) {
            interceptor.Invoke("setInnerXml$", "setInnerXml(const QString&)", typeof(void), typeof(string), markup);
        }
        public string ToInnerXml() {
            return (string) interceptor.Invoke("toInnerXml", "toInnerXml() const", typeof(string));
        }
        public void SetAttribute(string name, string value) {
            interceptor.Invoke("setAttribute$$", "setAttribute(const QString&, const QString&)", typeof(void), typeof(string), name, typeof(string), value);
        }
        public void SetAttributeNS(string namespaceUri, string name, string value) {
            interceptor.Invoke("setAttributeNS$$$", "setAttributeNS(const QString&, const QString&, const QString&)", typeof(void), typeof(string), namespaceUri, typeof(string), name, typeof(string), value);
        }
        public string Attribute(string name, string defaultValue) {
            return (string) interceptor.Invoke("attribute$$", "attribute(const QString&, const QString&) const", typeof(string), typeof(string), name, typeof(string), defaultValue);
        }
        public string Attribute(string name) {
            return (string) interceptor.Invoke("attribute$", "attribute(const QString&) const", typeof(string), typeof(string), name);
        }
        public string AttributeNS(string namespaceUri, string name, string defaultValue) {
            return (string) interceptor.Invoke("attributeNS$$$", "attributeNS(const QString&, const QString&, const QString&) const", typeof(string), typeof(string), namespaceUri, typeof(string), name, typeof(string), defaultValue);
        }
        public string AttributeNS(string namespaceUri, string name) {
            return (string) interceptor.Invoke("attributeNS$$", "attributeNS(const QString&, const QString&) const", typeof(string), typeof(string), namespaceUri, typeof(string), name);
        }
        public bool HasAttribute(string name) {
            return (bool) interceptor.Invoke("hasAttribute$", "hasAttribute(const QString&) const", typeof(bool), typeof(string), name);
        }
        public bool HasAttributeNS(string namespaceUri, string name) {
            return (bool) interceptor.Invoke("hasAttributeNS$$", "hasAttributeNS(const QString&, const QString&) const", typeof(bool), typeof(string), namespaceUri, typeof(string), name);
        }
        public void RemoveAttribute(string name) {
            interceptor.Invoke("removeAttribute$", "removeAttribute(const QString&)", typeof(void), typeof(string), name);
        }
        public void RemoveAttributeNS(string namespaceUri, string name) {
            interceptor.Invoke("removeAttributeNS$$", "removeAttributeNS(const QString&, const QString&)", typeof(void), typeof(string), namespaceUri, typeof(string), name);
        }
        public bool HasAttributes() {
            return (bool) interceptor.Invoke("hasAttributes", "hasAttributes() const", typeof(bool));
        }
        public List<string> AttributeNames(string namespaceUri) {
            return (List<string>) interceptor.Invoke("attributeNames$", "attributeNames(const QString&) const", typeof(List<string>), typeof(string), namespaceUri);
        }
        public List<string> AttributeNames() {
            return (List<string>) interceptor.Invoke("attributeNames", "attributeNames() const", typeof(List<string>));
        }
        public List<string> Classes() {
            return (List<string>) interceptor.Invoke("classes", "classes() const", typeof(List<string>));
        }
        public bool HasClass(string name) {
            return (bool) interceptor.Invoke("hasClass$", "hasClass(const QString&) const", typeof(bool), typeof(string), name);
        }
        public void AddClass(string name) {
            interceptor.Invoke("addClass$", "addClass(const QString&)", typeof(void), typeof(string), name);
        }
        public void RemoveClass(string name) {
            interceptor.Invoke("removeClass$", "removeClass(const QString&)", typeof(void), typeof(string), name);
        }
        public void ToggleClass(string name) {
            interceptor.Invoke("toggleClass$", "toggleClass(const QString&)", typeof(void), typeof(string), name);
        }
        public bool HasFocus() {
            return (bool) interceptor.Invoke("hasFocus", "hasFocus() const", typeof(bool));
        }
        public void SetFocus() {
            interceptor.Invoke("setFocus", "setFocus()", typeof(void));
        }
        public QRect Geometry() {
            return (QRect) interceptor.Invoke("geometry", "geometry() const", typeof(QRect));
        }
        public string TagName() {
            return (string) interceptor.Invoke("tagName", "tagName() const", typeof(string));
        }
        public string Prefix() {
            return (string) interceptor.Invoke("prefix", "prefix() const", typeof(string));
        }
        public string LocalName() {
            return (string) interceptor.Invoke("localName", "localName() const", typeof(string));
        }
        public string NamespaceUri() {
            return (string) interceptor.Invoke("namespaceUri", "namespaceUri() const", typeof(string));
        }
        public QWebElement Parent() {
            return (QWebElement) interceptor.Invoke("parent", "parent() const", typeof(QWebElement));
        }
        public QWebElement FirstChild() {
            return (QWebElement) interceptor.Invoke("firstChild", "firstChild() const", typeof(QWebElement));
        }
        public QWebElement LastChild() {
            return (QWebElement) interceptor.Invoke("lastChild", "lastChild() const", typeof(QWebElement));
        }
        public QWebElement NextSibling() {
            return (QWebElement) interceptor.Invoke("nextSibling", "nextSibling() const", typeof(QWebElement));
        }
        public QWebElement PreviousSibling() {
            return (QWebElement) interceptor.Invoke("previousSibling", "previousSibling() const", typeof(QWebElement));
        }
        public QWebElement Document() {
            return (QWebElement) interceptor.Invoke("document", "document() const", typeof(QWebElement));
        }
        public QWebFrame WebFrame() {
            return (QWebFrame) interceptor.Invoke("webFrame", "webFrame() const", typeof(QWebFrame));
        }
        public void AppendInside(string markup) {
            interceptor.Invoke("appendInside$", "appendInside(const QString&)", typeof(void), typeof(string), markup);
        }
        public void AppendInside(QWebElement element) {
            interceptor.Invoke("appendInside#", "appendInside(const QWebElement&)", typeof(void), typeof(QWebElement), element);
        }
        public void PrependInside(string markup) {
            interceptor.Invoke("prependInside$", "prependInside(const QString&)", typeof(void), typeof(string), markup);
        }
        public void PrependInside(QWebElement element) {
            interceptor.Invoke("prependInside#", "prependInside(const QWebElement&)", typeof(void), typeof(QWebElement), element);
        }
        public void AppendOutside(string markup) {
            interceptor.Invoke("appendOutside$", "appendOutside(const QString&)", typeof(void), typeof(string), markup);
        }
        public void AppendOutside(QWebElement element) {
            interceptor.Invoke("appendOutside#", "appendOutside(const QWebElement&)", typeof(void), typeof(QWebElement), element);
        }
        public void PrependOutside(string markup) {
            interceptor.Invoke("prependOutside$", "prependOutside(const QString&)", typeof(void), typeof(string), markup);
        }
        public void PrependOutside(QWebElement element) {
            interceptor.Invoke("prependOutside#", "prependOutside(const QWebElement&)", typeof(void), typeof(QWebElement), element);
        }
        public void EncloseContentsWith(QWebElement element) {
            interceptor.Invoke("encloseContentsWith#", "encloseContentsWith(const QWebElement&)", typeof(void), typeof(QWebElement), element);
        }
        public void EncloseContentsWith(string markup) {
            interceptor.Invoke("encloseContentsWith$", "encloseContentsWith(const QString&)", typeof(void), typeof(string), markup);
        }
        public void EncloseWith(string markup) {
            interceptor.Invoke("encloseWith$", "encloseWith(const QString&)", typeof(void), typeof(string), markup);
        }
        public void EncloseWith(QWebElement element) {
            interceptor.Invoke("encloseWith#", "encloseWith(const QWebElement&)", typeof(void), typeof(QWebElement), element);
        }
        public void Replace(string markup) {
            interceptor.Invoke("replace$", "replace(const QString&)", typeof(void), typeof(string), markup);
        }
        public void Replace(QWebElement element) {
            interceptor.Invoke("replace#", "replace(const QWebElement&)", typeof(void), typeof(QWebElement), element);
        }
        public QWebElement Clone() {
            return (QWebElement) interceptor.Invoke("clone", "clone() const", typeof(QWebElement));
        }
        public QWebElement TakeFromDocument() {
            return (QWebElement) interceptor.Invoke("takeFromDocument", "takeFromDocument()", typeof(QWebElement));
        }
        public void RemoveFromDocument() {
            interceptor.Invoke("removeFromDocument", "removeFromDocument()", typeof(void));
        }
        public void RemoveAllChildren() {
            interceptor.Invoke("removeAllChildren", "removeAllChildren()", typeof(void));
        }
        public QVariant EvaluateJavaScript(string scriptSource) {
            return (QVariant) interceptor.Invoke("evaluateJavaScript$", "evaluateJavaScript(const QString&)", typeof(QVariant), typeof(string), scriptSource);
        }
        public string StyleProperty(string name, QWebElement.StyleResolveStrategy strategy) {
            return (string) interceptor.Invoke("styleProperty$$", "styleProperty(const QString&, QWebElement::StyleResolveStrategy) const", typeof(string), typeof(string), name, typeof(QWebElement.StyleResolveStrategy), strategy);
        }
        public void SetStyleProperty(string name, string value) {
            interceptor.Invoke("setStyleProperty$$", "setStyleProperty(const QString&, const QString&)", typeof(void), typeof(string), name, typeof(string), value);
        }
        public void Render(QPainter painter) {
            interceptor.Invoke("render#", "render(QPainter*)", typeof(void), typeof(QPainter), painter);
        }
        ~QWebElement() {
            interceptor.Invoke("~QWebElement", "~QWebElement()", typeof(void));
        }
        public void Dispose() {
            interceptor.Invoke("~QWebElement", "~QWebElement()", typeof(void));
        }
        public static bool operator==(QWebElement lhs, QWebElement o) {
            return (bool) staticInterceptor.Invoke("operator==#", "operator==(const QWebElement&) const", typeof(bool), typeof(QWebElement), lhs, typeof(QWebElement), o);
        }
        public static bool operator!=(QWebElement lhs, QWebElement o) {
            return !(bool) staticInterceptor.Invoke("operator==#", "operator==(const QWebElement&) const", typeof(bool), typeof(QWebElement), lhs, typeof(QWebElement), o);
        }
    }
}
