//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {
    using System;
    [SmokeClass("QWebDatabase")]
    public class QWebDatabase : Object, IDisposable {
        protected SmokeInvocation interceptor = null;
        private IntPtr smokeObject;
        protected QWebDatabase(Type dummy) {}
        protected void CreateProxy() {
            interceptor = new SmokeInvocation(typeof(QWebDatabase), this);
        }
        private static SmokeInvocation staticInterceptor = null;
        static QWebDatabase() {
            staticInterceptor = new SmokeInvocation(typeof(QWebDatabase), null);
        }
        public QWebDatabase(QWebDatabase other) : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("QWebDatabase#", "QWebDatabase(const QWebDatabase&)", typeof(void), typeof(QWebDatabase), other);
        }
        public string Name() {
            return (string) interceptor.Invoke("name", "name() const", typeof(string));
        }
        public string DisplayName() {
            return (string) interceptor.Invoke("displayName", "displayName() const", typeof(string));
        }
        public long ExpectedSize() {
            return (long) interceptor.Invoke("expectedSize", "expectedSize() const", typeof(long));
        }
        public long Size() {
            return (long) interceptor.Invoke("size", "size() const", typeof(long));
        }
        public string FileName() {
            return (string) interceptor.Invoke("fileName", "fileName() const", typeof(string));
        }
        public QWebSecurityOrigin Origin() {
            return (QWebSecurityOrigin) interceptor.Invoke("origin", "origin() const", typeof(QWebSecurityOrigin));
        }
        ~QWebDatabase() {
            interceptor.Invoke("~QWebDatabase", "~QWebDatabase()", typeof(void));
        }
        public void Dispose() {
            interceptor.Invoke("~QWebDatabase", "~QWebDatabase()", typeof(void));
        }
        public static void RemoveDatabase(QWebDatabase arg1) {
            staticInterceptor.Invoke("removeDatabase#", "removeDatabase(const QWebDatabase&)", typeof(void), typeof(QWebDatabase), arg1);
        }
        public static void RemoveAllDatabases() {
            staticInterceptor.Invoke("removeAllDatabases", "removeAllDatabases()", typeof(void));
        }
    }
}
