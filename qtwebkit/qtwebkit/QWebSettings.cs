//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {
    using System;
    [SmokeClass("QWebSettings")]
    public class QWebSettings : Object {
        protected SmokeInvocation interceptor = null;
        private IntPtr smokeObject;
        protected QWebSettings(Type dummy) {}
        protected void CreateProxy() {
            interceptor = new SmokeInvocation(typeof(QWebSettings), this);
        }
        private static SmokeInvocation staticInterceptor = null;
        static QWebSettings() {
            staticInterceptor = new SmokeInvocation(typeof(QWebSettings), null);
        }
        public enum FontFamily {
            StandardFont = 0,
            FixedFont = 1,
            SerifFont = 2,
            SansSerifFont = 3,
            CursiveFont = 4,
            FantasyFont = 5,
        }
        public enum WebAttribute {
            AutoLoadImages = 0,
            JavascriptEnabled = 1,
            JavaEnabled = 2,
            PluginsEnabled = 3,
            PrivateBrowsingEnabled = 4,
            JavascriptCanOpenWindows = 5,
            JavascriptCanAccessClipboard = 6,
            DeveloperExtrasEnabled = 7,
            LinksIncludedInFocusChain = 8,
        }
        public enum WebGraphic {
            MissingImageGraphic = 0,
            MissingPluginGraphic = 1,
            DefaultFrameIconGraphic = 2,
            TextAreaSizeGripCornerGraphic = 3,
        }
        public enum FontSize {
            MinimumFontSize = 0,
            MinimumLogicalFontSize = 1,
            DefaultFontSize = 2,
            DefaultFixedFontSize = 3,
        }
        public void SetFontFamily(QWebSettings.FontFamily which, string family) {
            interceptor.Invoke("setFontFamily$$", "setFontFamily(QWebSettings::FontFamily, const QString&)", typeof(void), typeof(QWebSettings.FontFamily), which, typeof(string), family);
        }
        public string fontFamily(QWebSettings.FontFamily which) {
            return (string) interceptor.Invoke("fontFamily$", "fontFamily(QWebSettings::FontFamily) const", typeof(string), typeof(QWebSettings.FontFamily), which);
        }
        public void ResetFontFamily(QWebSettings.FontFamily which) {
            interceptor.Invoke("resetFontFamily$", "resetFontFamily(QWebSettings::FontFamily)", typeof(void), typeof(QWebSettings.FontFamily), which);
        }
        public void SetFontSize(QWebSettings.FontSize type, int size) {
            interceptor.Invoke("setFontSize$$", "setFontSize(QWebSettings::FontSize, int)", typeof(void), typeof(QWebSettings.FontSize), type, typeof(int), size);
        }
        public int fontSize(QWebSettings.FontSize type) {
            return (int) interceptor.Invoke("fontSize$", "fontSize(QWebSettings::FontSize) const", typeof(int), typeof(QWebSettings.FontSize), type);
        }
        public void ResetFontSize(QWebSettings.FontSize type) {
            interceptor.Invoke("resetFontSize$", "resetFontSize(QWebSettings::FontSize)", typeof(void), typeof(QWebSettings.FontSize), type);
        }
        public void SetAttribute(QWebSettings.WebAttribute attr, bool on) {
            interceptor.Invoke("setAttribute$$", "setAttribute(QWebSettings::WebAttribute, bool)", typeof(void), typeof(QWebSettings.WebAttribute), attr, typeof(bool), on);
        }
        public bool TestAttribute(QWebSettings.WebAttribute attr) {
            return (bool) interceptor.Invoke("testAttribute$", "testAttribute(QWebSettings::WebAttribute) const", typeof(bool), typeof(QWebSettings.WebAttribute), attr);
        }
        public void ResetAttribute(QWebSettings.WebAttribute attr) {
            interceptor.Invoke("resetAttribute$", "resetAttribute(QWebSettings::WebAttribute)", typeof(void), typeof(QWebSettings.WebAttribute), attr);
        }
        public void SetUserStyleSheetUrl(QUrl location) {
            interceptor.Invoke("setUserStyleSheetUrl#", "setUserStyleSheetUrl(const QUrl&)", typeof(void), typeof(QUrl), location);
        }
        public QUrl UserStyleSheetUrl() {
            return (QUrl) interceptor.Invoke("userStyleSheetUrl", "userStyleSheetUrl() const", typeof(QUrl));
        }
        public static QWebSettings GlobalSettings() {
            return (QWebSettings) staticInterceptor.Invoke("globalSettings", "globalSettings()", typeof(QWebSettings));
        }
        public static void SetIconDatabasePath(string location) {
            staticInterceptor.Invoke("setIconDatabasePath$", "setIconDatabasePath(const QString&)", typeof(void), typeof(string), location);
        }
        public static string IconDatabasePath() {
            return (string) staticInterceptor.Invoke("iconDatabasePath", "iconDatabasePath()", typeof(string));
        }
        public static void ClearIconDatabase() {
            staticInterceptor.Invoke("clearIconDatabase", "clearIconDatabase()", typeof(void));
        }
        public static QIcon IconForUrl(QUrl url) {
            return (QIcon) staticInterceptor.Invoke("iconForUrl#", "iconForUrl(const QUrl&)", typeof(QIcon), typeof(QUrl), url);
        }
        public static void SetWebGraphic(QWebSettings.WebGraphic type, QPixmap graphic) {
            staticInterceptor.Invoke("setWebGraphic$#", "setWebGraphic(QWebSettings::WebGraphic, const QPixmap&)", typeof(void), typeof(QWebSettings.WebGraphic), type, typeof(QPixmap), graphic);
        }
        public static QPixmap webGraphic(QWebSettings.WebGraphic type) {
            return (QPixmap) staticInterceptor.Invoke("webGraphic$", "webGraphic(QWebSettings::WebGraphic)", typeof(QPixmap), typeof(QWebSettings.WebGraphic), type);
        }
        public static void SetMaximumPagesInCache(int pages) {
            staticInterceptor.Invoke("setMaximumPagesInCache$", "setMaximumPagesInCache(int)", typeof(void), typeof(int), pages);
        }
        public static int MaximumPagesInCache() {
            return (int) staticInterceptor.Invoke("maximumPagesInCache", "maximumPagesInCache()", typeof(int));
        }
        public static void SetObjectCacheCapacities(int cacheMinDeadCapacity, int cacheMaxDead, int totalCapacity) {
            staticInterceptor.Invoke("setObjectCacheCapacities$$$", "setObjectCacheCapacities(int, int, int)", typeof(void), typeof(int), cacheMinDeadCapacity, typeof(int), cacheMaxDead, typeof(int), totalCapacity);
        }
    }
}
