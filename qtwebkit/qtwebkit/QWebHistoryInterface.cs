//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {
    using System;
    [SmokeClass("QWebHistoryInterface")]
    public abstract class QWebHistoryInterface : QObject {
        protected QWebHistoryInterface(Type dummy) : base((Type) null) {}
        protected new void CreateProxy() {
            interceptor = new SmokeInvocation(typeof(QWebHistoryInterface), this);
        }
        private static SmokeInvocation staticInterceptor = null;
        static QWebHistoryInterface() {
            staticInterceptor = new SmokeInvocation(typeof(QWebHistoryInterface), null);
        }
        public QWebHistoryInterface(QObject parent) : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("QWebHistoryInterface#", "QWebHistoryInterface(QObject*)", typeof(void), typeof(QObject), parent);
        }
        public QWebHistoryInterface() : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("QWebHistoryInterface", "QWebHistoryInterface()", typeof(void));
        }
        [SmokeMethod("historyContains(const QString&) const")]
        public abstract bool HistoryContains(string url);
        [SmokeMethod("addHistoryEntry(const QString&)")]
        public abstract void AddHistoryEntry(string url);
        public static new string Tr(string s, string c) {
            return (string) staticInterceptor.Invoke("tr$$", "tr(const char*, const char*)", typeof(string), typeof(string), s, typeof(string), c);
        }
        public static new string Tr(string s) {
            return (string) staticInterceptor.Invoke("tr$", "tr(const char*)", typeof(string), typeof(string), s);
        }
        public static void SetDefaultInterface(QWebHistoryInterface defaultInterface) {
            staticInterceptor.Invoke("setDefaultInterface#", "setDefaultInterface(QWebHistoryInterface*)", typeof(void), typeof(QWebHistoryInterface), defaultInterface);
        }
        public static QWebHistoryInterface DefaultInterface() {
            return (QWebHistoryInterface) staticInterceptor.Invoke("defaultInterface", "defaultInterface()", typeof(QWebHistoryInterface));
        }
        protected new IQWebHistoryInterfaceSignals Emit {
            get { return (IQWebHistoryInterfaceSignals) Q_EMIT; }
        }
    }

    public interface IQWebHistoryInterfaceSignals : IQObjectSignals {
    }
}
