//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {
    using System;
    [SmokeClass("QWebHistoryItem")]
    public class QWebHistoryItem : Object, IDisposable {
        protected SmokeInvocation interceptor = null;
        private IntPtr smokeObject;
        protected QWebHistoryItem(Type dummy) {}
        protected void CreateProxy() {
            interceptor = new SmokeInvocation(typeof(QWebHistoryItem), this);
        }
        public QWebHistoryItem(QWebHistoryItem other) : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("QWebHistoryItem#", "QWebHistoryItem(const QWebHistoryItem&)", typeof(void), typeof(QWebHistoryItem), other);
        }
        public QUrl OriginalUrl() {
            return (QUrl) interceptor.Invoke("originalUrl", "originalUrl() const", typeof(QUrl));
        }
        public QUrl Url() {
            return (QUrl) interceptor.Invoke("url", "url() const", typeof(QUrl));
        }
        public string Title() {
            return (string) interceptor.Invoke("title", "title() const", typeof(string));
        }
        public QDateTime LastVisited() {
            return (QDateTime) interceptor.Invoke("lastVisited", "lastVisited() const", typeof(QDateTime));
        }
        public QIcon Icon() {
            return (QIcon) interceptor.Invoke("icon", "icon() const", typeof(QIcon));
        }
        ~QWebHistoryItem() {
            interceptor.Invoke("~QWebHistoryItem", "~QWebHistoryItem()", typeof(void));
        }
        public void Dispose() {
            interceptor.Invoke("~QWebHistoryItem", "~QWebHistoryItem()", typeof(void));
        }
    }
}
