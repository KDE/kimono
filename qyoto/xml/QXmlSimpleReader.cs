//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {
    using System;
    using System.Runtime.InteropServices;
    [SmokeClass("QXmlSimpleReader")]
    public class QXmlSimpleReader : QXmlReader, IDisposable {
        protected QXmlSimpleReader(Type dummy) : base((Type) null) {}
        protected new void CreateProxy() {
            interceptor = new SmokeInvocation(typeof(QXmlSimpleReader), this);
        }
        // void* property(const QString& arg1,bool* arg2); >>>> NOT CONVERTED
        // void* property(const QString& arg1); >>>> NOT CONVERTED
        // void setProperty(const QString& arg1,void* arg2); >>>> NOT CONVERTED
        public QXmlSimpleReader() : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("QXmlSimpleReader", "QXmlSimpleReader()", typeof(void));
        }
        [SmokeMethod("feature(const QString&, bool*) const")]
        public override bool Feature(string name, ref bool ok) {
            StackItem[] stack = new StackItem[3];
#if DEBUG
            stack[1].s_class = (IntPtr) DebugGCHandle.Alloc(name);
#else
            stack[1].s_class = (IntPtr) GCHandle.Alloc(name);
#endif
            stack[2].s_bool = ok;
            interceptor.Invoke("feature$$", "feature(const QString&, bool*) const", stack);
#if DEBUG
            DebugGCHandle.Free((GCHandle) stack[1].s_class);
#else
            ((GCHandle) stack[1].s_class).SynchronizedFree();
#endif
            ok = stack[2].s_bool;
            return stack[0].s_bool;
        }
        [SmokeMethod("feature(const QString&) const")]
        public virtual bool Feature(string name) {
            return (bool) interceptor.Invoke("feature$", "feature(const QString&) const", typeof(bool), typeof(string), name);
        }
        [SmokeMethod("setFeature(const QString&, bool)")]
        public override void SetFeature(string name, bool value) {
            interceptor.Invoke("setFeature$$", "setFeature(const QString&, bool)", typeof(void), typeof(string), name, typeof(bool), value);
        }
        [SmokeMethod("hasFeature(const QString&) const")]
        public override bool HasFeature(string name) {
            return (bool) interceptor.Invoke("hasFeature$", "hasFeature(const QString&) const", typeof(bool), typeof(string), name);
        }
        [SmokeMethod("hasProperty(const QString&) const")]
        public override bool HasProperty(string name) {
            return (bool) interceptor.Invoke("hasProperty$", "hasProperty(const QString&) const", typeof(bool), typeof(string), name);
        }
        [SmokeMethod("setEntityResolver(QXmlEntityResolver*)")]
        public override void SetEntityResolver(IQXmlEntityResolver handler) {
            interceptor.Invoke("setEntityResolver#", "setEntityResolver(QXmlEntityResolver*)", typeof(void), typeof(IQXmlEntityResolver), handler);
        }
        [SmokeMethod("entityResolver() const")]
        public override IQXmlEntityResolver EntityResolver() {
            return (IQXmlEntityResolver) interceptor.Invoke("entityResolver", "entityResolver() const", typeof(IQXmlEntityResolver));
        }
        [SmokeMethod("setDTDHandler(QXmlDTDHandler*)")]
        public override void SetDTDHandler(IQXmlDTDHandler handler) {
            interceptor.Invoke("setDTDHandler#", "setDTDHandler(QXmlDTDHandler*)", typeof(void), typeof(IQXmlDTDHandler), handler);
        }
        [SmokeMethod("DTDHandler() const")]
        public override IQXmlDTDHandler DTDHandler() {
            return (IQXmlDTDHandler) interceptor.Invoke("DTDHandler", "DTDHandler() const", typeof(IQXmlDTDHandler));
        }
        [SmokeMethod("setContentHandler(QXmlContentHandler*)")]
        public override void SetContentHandler(IQXmlContentHandler handler) {
            interceptor.Invoke("setContentHandler#", "setContentHandler(QXmlContentHandler*)", typeof(void), typeof(IQXmlContentHandler), handler);
        }
        [SmokeMethod("contentHandler() const")]
        public override IQXmlContentHandler ContentHandler() {
            return (IQXmlContentHandler) interceptor.Invoke("contentHandler", "contentHandler() const", typeof(IQXmlContentHandler));
        }
        [SmokeMethod("setErrorHandler(QXmlErrorHandler*)")]
        public override void SetErrorHandler(IQXmlErrorHandler handler) {
            interceptor.Invoke("setErrorHandler#", "setErrorHandler(QXmlErrorHandler*)", typeof(void), typeof(IQXmlErrorHandler), handler);
        }
        [SmokeMethod("errorHandler() const")]
        public override IQXmlErrorHandler ErrorHandler() {
            return (IQXmlErrorHandler) interceptor.Invoke("errorHandler", "errorHandler() const", typeof(IQXmlErrorHandler));
        }
        [SmokeMethod("setLexicalHandler(QXmlLexicalHandler*)")]
        public override void SetLexicalHandler(QXmlLexicalHandler handler) {
            interceptor.Invoke("setLexicalHandler#", "setLexicalHandler(QXmlLexicalHandler*)", typeof(void), typeof(QXmlLexicalHandler), handler);
        }
        [SmokeMethod("lexicalHandler() const")]
        public override QXmlLexicalHandler LexicalHandler() {
            return (QXmlLexicalHandler) interceptor.Invoke("lexicalHandler", "lexicalHandler() const", typeof(QXmlLexicalHandler));
        }
        [SmokeMethod("setDeclHandler(QXmlDeclHandler*)")]
        public override void SetDeclHandler(IQXmlDeclHandler handler) {
            interceptor.Invoke("setDeclHandler#", "setDeclHandler(QXmlDeclHandler*)", typeof(void), typeof(IQXmlDeclHandler), handler);
        }
        [SmokeMethod("declHandler() const")]
        public override IQXmlDeclHandler DeclHandler() {
            return (IQXmlDeclHandler) interceptor.Invoke("declHandler", "declHandler() const", typeof(IQXmlDeclHandler));
        }
        [SmokeMethod("parse(const QXmlInputSource&)")]
        public override bool Parse(QXmlInputSource input) {
            return (bool) interceptor.Invoke("parse#", "parse(const QXmlInputSource&)", typeof(bool), typeof(QXmlInputSource), input);
        }
        [SmokeMethod("parse(const QXmlInputSource*, bool)")]
        public virtual bool Parse(QXmlInputSource input, bool incremental) {
            return (bool) interceptor.Invoke("parse#$", "parse(const QXmlInputSource*, bool)", typeof(bool), typeof(QXmlInputSource), input, typeof(bool), incremental);
        }
        [SmokeMethod("parseContinue()")]
        public virtual bool ParseContinue() {
            return (bool) interceptor.Invoke("parseContinue", "parseContinue()", typeof(bool));
        }
        ~QXmlSimpleReader() {
            interceptor.Invoke("~QXmlSimpleReader", "~QXmlSimpleReader()", typeof(void));
        }
        public void Dispose() {
            interceptor.Invoke("~QXmlSimpleReader", "~QXmlSimpleReader()", typeof(void));
        }
    }
}
