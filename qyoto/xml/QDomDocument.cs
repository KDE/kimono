//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {
    using System;
    using System.Runtime.InteropServices;
    using System.Text;
    [SmokeClass("QDomDocument")]
    public class QDomDocument : QDomNode, IDisposable {
        protected QDomDocument(Type dummy) : base((Type) null) {}
        protected new void CreateProxy() {
            interceptor = new SmokeInvocation(typeof(QDomDocument), this);
        }
        public QDomDocument() : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("QDomDocument", "QDomDocument()", typeof(void));
        }
        public QDomDocument(string name) : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("QDomDocument$", "QDomDocument(const QString&)", typeof(void), typeof(string), name);
        }
        public QDomDocument(QDomDocumentType doctype) : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("QDomDocument#", "QDomDocument(const QDomDocumentType&)", typeof(void), typeof(QDomDocumentType), doctype);
        }
        public QDomDocument(QDomDocument x) : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("QDomDocument#", "QDomDocument(const QDomDocument&)", typeof(void), typeof(QDomDocument), x);
        }
        public QDomElement CreateElement(string tagName) {
            return (QDomElement) interceptor.Invoke("createElement$", "createElement(const QString&)", typeof(QDomElement), typeof(string), tagName);
        }
        public QDomDocumentFragment CreateDocumentFragment() {
            return (QDomDocumentFragment) interceptor.Invoke("createDocumentFragment", "createDocumentFragment()", typeof(QDomDocumentFragment));
        }
        public QDomText CreateTextNode(string data) {
            return (QDomText) interceptor.Invoke("createTextNode$", "createTextNode(const QString&)", typeof(QDomText), typeof(string), data);
        }
        public QDomComment CreateComment(string data) {
            return (QDomComment) interceptor.Invoke("createComment$", "createComment(const QString&)", typeof(QDomComment), typeof(string), data);
        }
        public QDomCDATASection CreateCDATASection(string data) {
            return (QDomCDATASection) interceptor.Invoke("createCDATASection$", "createCDATASection(const QString&)", typeof(QDomCDATASection), typeof(string), data);
        }
        public QDomProcessingInstruction CreateProcessingInstruction(string target, string data) {
            return (QDomProcessingInstruction) interceptor.Invoke("createProcessingInstruction$$", "createProcessingInstruction(const QString&, const QString&)", typeof(QDomProcessingInstruction), typeof(string), target, typeof(string), data);
        }
        public QDomAttr CreateAttribute(string name) {
            return (QDomAttr) interceptor.Invoke("createAttribute$", "createAttribute(const QString&)", typeof(QDomAttr), typeof(string), name);
        }
        public QDomEntityReference CreateEntityReference(string name) {
            return (QDomEntityReference) interceptor.Invoke("createEntityReference$", "createEntityReference(const QString&)", typeof(QDomEntityReference), typeof(string), name);
        }
        public QDomNodeList ElementsByTagName(string tagname) {
            return (QDomNodeList) interceptor.Invoke("elementsByTagName$", "elementsByTagName(const QString&) const", typeof(QDomNodeList), typeof(string), tagname);
        }
        public QDomNode ImportNode(QDomNode importedNode, bool deep) {
            return (QDomNode) interceptor.Invoke("importNode#$", "importNode(const QDomNode&, bool)", typeof(QDomNode), typeof(QDomNode), importedNode, typeof(bool), deep);
        }
        public QDomElement CreateElementNS(string nsURI, string qName) {
            return (QDomElement) interceptor.Invoke("createElementNS$$", "createElementNS(const QString&, const QString&)", typeof(QDomElement), typeof(string), nsURI, typeof(string), qName);
        }
        public QDomAttr CreateAttributeNS(string nsURI, string qName) {
            return (QDomAttr) interceptor.Invoke("createAttributeNS$$", "createAttributeNS(const QString&, const QString&)", typeof(QDomAttr), typeof(string), nsURI, typeof(string), qName);
        }
        public QDomNodeList ElementsByTagNameNS(string nsURI, string localName) {
            return (QDomNodeList) interceptor.Invoke("elementsByTagNameNS$$", "elementsByTagNameNS(const QString&, const QString&)", typeof(QDomNodeList), typeof(string), nsURI, typeof(string), localName);
        }
        public QDomElement ElementById(string elementId) {
            return (QDomElement) interceptor.Invoke("elementById$", "elementById(const QString&)", typeof(QDomElement), typeof(string), elementId);
        }
        public QDomDocumentType Doctype() {
            return (QDomDocumentType) interceptor.Invoke("doctype", "doctype() const", typeof(QDomDocumentType));
        }
        public QDomImplementation Implementation() {
            return (QDomImplementation) interceptor.Invoke("implementation", "implementation() const", typeof(QDomImplementation));
        }
        public QDomElement DocumentElement() {
            return (QDomElement) interceptor.Invoke("documentElement", "documentElement() const", typeof(QDomElement));
        }
        public new QDomNode.NodeType NodeType() {
            return (QDomNode.NodeType) interceptor.Invoke("nodeType", "nodeType() const", typeof(QDomNode.NodeType));
        }
        public bool SetContent(QByteArray text, bool namespaceProcessing, StringBuilder errorMsg, ref int errorLine, ref int errorColumn) {
            StackItem[] stack = new StackItem[6];
#if DEBUG
            stack[1].s_class = (IntPtr) DebugGCHandle.Alloc(text);
#else
            stack[1].s_class = (IntPtr) GCHandle.Alloc(text);
#endif
            stack[2].s_bool = namespaceProcessing;
#if DEBUG
            stack[3].s_class = (IntPtr) DebugGCHandle.Alloc(errorMsg);
#else
            stack[3].s_class = (IntPtr) GCHandle.Alloc(errorMsg);
#endif
            stack[4].s_int = errorLine;
            stack[5].s_int = errorColumn;
            interceptor.Invoke("setContent#$$$$", "setContent(const QByteArray&, bool, QString*, int*, int*)", stack);
#if DEBUG
            DebugGCHandle.Free((GCHandle) stack[1].s_class);
#else
            ((GCHandle) stack[1].s_class).SynchronizedFree();
#endif
#if DEBUG
            DebugGCHandle.Free((GCHandle) stack[3].s_class);
#else
            ((GCHandle) stack[3].s_class).SynchronizedFree();
#endif
            errorLine = stack[4].s_int;
            errorColumn = stack[5].s_int;
            return stack[0].s_bool;
        }
        public bool SetContent(QByteArray text, bool namespaceProcessing, StringBuilder errorMsg, ref int errorLine) {
            StackItem[] stack = new StackItem[5];
#if DEBUG
            stack[1].s_class = (IntPtr) DebugGCHandle.Alloc(text);
#else
            stack[1].s_class = (IntPtr) GCHandle.Alloc(text);
#endif
            stack[2].s_bool = namespaceProcessing;
#if DEBUG
            stack[3].s_class = (IntPtr) DebugGCHandle.Alloc(errorMsg);
#else
            stack[3].s_class = (IntPtr) GCHandle.Alloc(errorMsg);
#endif
            stack[4].s_int = errorLine;
            interceptor.Invoke("setContent#$$$", "setContent(const QByteArray&, bool, QString*, int*)", stack);
#if DEBUG
            DebugGCHandle.Free((GCHandle) stack[1].s_class);
#else
            ((GCHandle) stack[1].s_class).SynchronizedFree();
#endif
#if DEBUG
            DebugGCHandle.Free((GCHandle) stack[3].s_class);
#else
            ((GCHandle) stack[3].s_class).SynchronizedFree();
#endif
            errorLine = stack[4].s_int;
            return stack[0].s_bool;
        }
        public bool SetContent(QByteArray text, bool namespaceProcessing, StringBuilder errorMsg) {
            return (bool) interceptor.Invoke("setContent#$$", "setContent(const QByteArray&, bool, QString*)", typeof(bool), typeof(QByteArray), text, typeof(bool), namespaceProcessing, typeof(StringBuilder), errorMsg);
        }
        public bool SetContent(QByteArray text, bool namespaceProcessing) {
            return (bool) interceptor.Invoke("setContent#$", "setContent(const QByteArray&, bool)", typeof(bool), typeof(QByteArray), text, typeof(bool), namespaceProcessing);
        }
        public bool SetContent(string text, bool namespaceProcessing, StringBuilder errorMsg, ref int errorLine, ref int errorColumn) {
            StackItem[] stack = new StackItem[6];
#if DEBUG
            stack[1].s_class = (IntPtr) DebugGCHandle.Alloc(text);
#else
            stack[1].s_class = (IntPtr) GCHandle.Alloc(text);
#endif
            stack[2].s_bool = namespaceProcessing;
#if DEBUG
            stack[3].s_class = (IntPtr) DebugGCHandle.Alloc(errorMsg);
#else
            stack[3].s_class = (IntPtr) GCHandle.Alloc(errorMsg);
#endif
            stack[4].s_int = errorLine;
            stack[5].s_int = errorColumn;
            interceptor.Invoke("setContent$$$$$", "setContent(const QString&, bool, QString*, int*, int*)", stack);
#if DEBUG
            DebugGCHandle.Free((GCHandle) stack[1].s_class);
#else
            ((GCHandle) stack[1].s_class).SynchronizedFree();
#endif
#if DEBUG
            DebugGCHandle.Free((GCHandle) stack[3].s_class);
#else
            ((GCHandle) stack[3].s_class).SynchronizedFree();
#endif
            errorLine = stack[4].s_int;
            errorColumn = stack[5].s_int;
            return stack[0].s_bool;
        }
        public bool SetContent(string text, bool namespaceProcessing, StringBuilder errorMsg, ref int errorLine) {
            StackItem[] stack = new StackItem[5];
#if DEBUG
            stack[1].s_class = (IntPtr) DebugGCHandle.Alloc(text);
#else
            stack[1].s_class = (IntPtr) GCHandle.Alloc(text);
#endif
            stack[2].s_bool = namespaceProcessing;
#if DEBUG
            stack[3].s_class = (IntPtr) DebugGCHandle.Alloc(errorMsg);
#else
            stack[3].s_class = (IntPtr) GCHandle.Alloc(errorMsg);
#endif
            stack[4].s_int = errorLine;
            interceptor.Invoke("setContent$$$$", "setContent(const QString&, bool, QString*, int*)", stack);
#if DEBUG
            DebugGCHandle.Free((GCHandle) stack[1].s_class);
#else
            ((GCHandle) stack[1].s_class).SynchronizedFree();
#endif
#if DEBUG
            DebugGCHandle.Free((GCHandle) stack[3].s_class);
#else
            ((GCHandle) stack[3].s_class).SynchronizedFree();
#endif
            errorLine = stack[4].s_int;
            return stack[0].s_bool;
        }
        public bool SetContent(string text, bool namespaceProcessing, StringBuilder errorMsg) {
            return (bool) interceptor.Invoke("setContent$$$", "setContent(const QString&, bool, QString*)", typeof(bool), typeof(string), text, typeof(bool), namespaceProcessing, typeof(StringBuilder), errorMsg);
        }
        public bool SetContent(string text, bool namespaceProcessing) {
            return (bool) interceptor.Invoke("setContent$$", "setContent(const QString&, bool)", typeof(bool), typeof(string), text, typeof(bool), namespaceProcessing);
        }
        public bool SetContent(QIODevice dev, bool namespaceProcessing, StringBuilder errorMsg, ref int errorLine, ref int errorColumn) {
            StackItem[] stack = new StackItem[6];
#if DEBUG
            stack[1].s_class = (IntPtr) DebugGCHandle.Alloc(dev);
#else
            stack[1].s_class = (IntPtr) GCHandle.Alloc(dev);
#endif
            stack[2].s_bool = namespaceProcessing;
#if DEBUG
            stack[3].s_class = (IntPtr) DebugGCHandle.Alloc(errorMsg);
#else
            stack[3].s_class = (IntPtr) GCHandle.Alloc(errorMsg);
#endif
            stack[4].s_int = errorLine;
            stack[5].s_int = errorColumn;
            interceptor.Invoke("setContent#$$$$", "setContent(QIODevice*, bool, QString*, int*, int*)", stack);
#if DEBUG
            DebugGCHandle.Free((GCHandle) stack[1].s_class);
#else
            ((GCHandle) stack[1].s_class).SynchronizedFree();
#endif
#if DEBUG
            DebugGCHandle.Free((GCHandle) stack[3].s_class);
#else
            ((GCHandle) stack[3].s_class).SynchronizedFree();
#endif
            errorLine = stack[4].s_int;
            errorColumn = stack[5].s_int;
            return stack[0].s_bool;
        }
        public bool SetContent(QIODevice dev, bool namespaceProcessing, StringBuilder errorMsg, ref int errorLine) {
            StackItem[] stack = new StackItem[5];
#if DEBUG
            stack[1].s_class = (IntPtr) DebugGCHandle.Alloc(dev);
#else
            stack[1].s_class = (IntPtr) GCHandle.Alloc(dev);
#endif
            stack[2].s_bool = namespaceProcessing;
#if DEBUG
            stack[3].s_class = (IntPtr) DebugGCHandle.Alloc(errorMsg);
#else
            stack[3].s_class = (IntPtr) GCHandle.Alloc(errorMsg);
#endif
            stack[4].s_int = errorLine;
            interceptor.Invoke("setContent#$$$", "setContent(QIODevice*, bool, QString*, int*)", stack);
#if DEBUG
            DebugGCHandle.Free((GCHandle) stack[1].s_class);
#else
            ((GCHandle) stack[1].s_class).SynchronizedFree();
#endif
#if DEBUG
            DebugGCHandle.Free((GCHandle) stack[3].s_class);
#else
            ((GCHandle) stack[3].s_class).SynchronizedFree();
#endif
            errorLine = stack[4].s_int;
            return stack[0].s_bool;
        }
        public bool SetContent(QIODevice dev, bool namespaceProcessing, StringBuilder errorMsg) {
            return (bool) interceptor.Invoke("setContent#$$", "setContent(QIODevice*, bool, QString*)", typeof(bool), typeof(QIODevice), dev, typeof(bool), namespaceProcessing, typeof(StringBuilder), errorMsg);
        }
        public bool SetContent(QIODevice dev, bool namespaceProcessing) {
            return (bool) interceptor.Invoke("setContent#$", "setContent(QIODevice*, bool)", typeof(bool), typeof(QIODevice), dev, typeof(bool), namespaceProcessing);
        }
        public bool SetContent(QXmlInputSource source, bool namespaceProcessing, StringBuilder errorMsg, ref int errorLine, ref int errorColumn) {
            StackItem[] stack = new StackItem[6];
#if DEBUG
            stack[1].s_class = (IntPtr) DebugGCHandle.Alloc(source);
#else
            stack[1].s_class = (IntPtr) GCHandle.Alloc(source);
#endif
            stack[2].s_bool = namespaceProcessing;
#if DEBUG
            stack[3].s_class = (IntPtr) DebugGCHandle.Alloc(errorMsg);
#else
            stack[3].s_class = (IntPtr) GCHandle.Alloc(errorMsg);
#endif
            stack[4].s_int = errorLine;
            stack[5].s_int = errorColumn;
            interceptor.Invoke("setContent#$$$$", "setContent(QXmlInputSource*, bool, QString*, int*, int*)", stack);
#if DEBUG
            DebugGCHandle.Free((GCHandle) stack[1].s_class);
#else
            ((GCHandle) stack[1].s_class).Free();
#endif
#if DEBUG
            DebugGCHandle.Free((GCHandle) stack[3].s_class);
#else
            ((GCHandle) stack[3].s_class).Free();
#endif
            errorLine = stack[4].s_int;
            errorColumn = stack[5].s_int;
            return stack[0].s_bool;
        }
        public bool SetContent(QXmlInputSource source, bool namespaceProcessing, StringBuilder errorMsg, ref int errorLine) {
            StackItem[] stack = new StackItem[5];
#if DEBUG
            stack[1].s_class = (IntPtr) DebugGCHandle.Alloc(source);
#else
            stack[1].s_class = (IntPtr) GCHandle.Alloc(source);
#endif
            stack[2].s_bool = namespaceProcessing;
#if DEBUG
            stack[3].s_class = (IntPtr) DebugGCHandle.Alloc(errorMsg);
#else
            stack[3].s_class = (IntPtr) GCHandle.Alloc(errorMsg);
#endif
            stack[4].s_int = errorLine;
            interceptor.Invoke("setContent#$$$", "setContent(QXmlInputSource*, bool, QString*, int*)", stack);
#if DEBUG
            DebugGCHandle.Free((GCHandle) stack[1].s_class);
#else
            ((GCHandle) stack[1].s_class).Free();
#endif
#if DEBUG
            DebugGCHandle.Free((GCHandle) stack[3].s_class);
#else
            ((GCHandle) stack[3].s_class).Free();
#endif
            errorLine = stack[4].s_int;
            return stack[0].s_bool;
        }
        public bool SetContent(QXmlInputSource source, bool namespaceProcessing, StringBuilder errorMsg) {
            return (bool) interceptor.Invoke("setContent#$$", "setContent(QXmlInputSource*, bool, QString*)", typeof(bool), typeof(QXmlInputSource), source, typeof(bool), namespaceProcessing, typeof(StringBuilder), errorMsg);
        }
        public bool SetContent(QXmlInputSource source, bool namespaceProcessing) {
            return (bool) interceptor.Invoke("setContent#$", "setContent(QXmlInputSource*, bool)", typeof(bool), typeof(QXmlInputSource), source, typeof(bool), namespaceProcessing);
        }
        public bool SetContent(QByteArray text, StringBuilder errorMsg, ref int errorLine, ref int errorColumn) {
            StackItem[] stack = new StackItem[5];
#if DEBUG
            stack[1].s_class = (IntPtr) DebugGCHandle.Alloc(text);
#else
            stack[1].s_class = (IntPtr) GCHandle.Alloc(text);
#endif
#if DEBUG
            stack[2].s_class = (IntPtr) DebugGCHandle.Alloc(errorMsg);
#else
            stack[2].s_class = (IntPtr) GCHandle.Alloc(errorMsg);
#endif
            stack[3].s_int = errorLine;
            stack[4].s_int = errorColumn;
            interceptor.Invoke("setContent#$$$", "setContent(const QByteArray&, QString*, int*, int*)", stack);
#if DEBUG
            DebugGCHandle.Free((GCHandle) stack[1].s_class);
#else
            ((GCHandle) stack[1].s_class).SynchronizedFree();
#endif
#if DEBUG
            DebugGCHandle.Free((GCHandle) stack[2].s_class);
#else
            ((GCHandle) stack[2].s_class).SynchronizedFree();
#endif
            errorLine = stack[3].s_int;
            errorColumn = stack[4].s_int;
            return stack[0].s_bool;
        }
        public bool SetContent(QByteArray text, StringBuilder errorMsg, ref int errorLine) {
            StackItem[] stack = new StackItem[4];
#if DEBUG
            stack[1].s_class = (IntPtr) DebugGCHandle.Alloc(text);
#else
            stack[1].s_class = (IntPtr) GCHandle.Alloc(text);
#endif
#if DEBUG
            stack[2].s_class = (IntPtr) DebugGCHandle.Alloc(errorMsg);
#else
            stack[2].s_class = (IntPtr) GCHandle.Alloc(errorMsg);
#endif
            stack[3].s_int = errorLine;
            interceptor.Invoke("setContent#$$", "setContent(const QByteArray&, QString*, int*)", stack);
#if DEBUG
            DebugGCHandle.Free((GCHandle) stack[1].s_class);
#else
            ((GCHandle) stack[1].s_class).SynchronizedFree();
#endif
#if DEBUG
            DebugGCHandle.Free((GCHandle) stack[2].s_class);
#else
            ((GCHandle) stack[2].s_class).SynchronizedFree();
#endif
            errorLine = stack[3].s_int;
            return stack[0].s_bool;
        }
        public bool SetContent(QByteArray text, StringBuilder errorMsg) {
            return (bool) interceptor.Invoke("setContent#$", "setContent(const QByteArray&, QString*)", typeof(bool), typeof(QByteArray), text, typeof(StringBuilder), errorMsg);
        }
        public bool SetContent(QByteArray text) {
            return (bool) interceptor.Invoke("setContent#", "setContent(const QByteArray&)", typeof(bool), typeof(QByteArray), text);
        }
        public bool SetContent(string text, StringBuilder errorMsg, ref int errorLine, ref int errorColumn) {
            StackItem[] stack = new StackItem[5];
#if DEBUG
            stack[1].s_class = (IntPtr) DebugGCHandle.Alloc(text);
#else
            stack[1].s_class = (IntPtr) GCHandle.Alloc(text);
#endif
#if DEBUG
            stack[2].s_class = (IntPtr) DebugGCHandle.Alloc(errorMsg);
#else
            stack[2].s_class = (IntPtr) GCHandle.Alloc(errorMsg);
#endif
            stack[3].s_int = errorLine;
            stack[4].s_int = errorColumn;
            interceptor.Invoke("setContent$$$$", "setContent(const QString&, QString*, int*, int*)", stack);
#if DEBUG
            DebugGCHandle.Free((GCHandle) stack[1].s_class);
#else
            ((GCHandle) stack[1].s_class).SynchronizedFree();
#endif
#if DEBUG
            DebugGCHandle.Free((GCHandle) stack[2].s_class);
#else
            ((GCHandle) stack[2].s_class).SynchronizedFree();
#endif
            errorLine = stack[3].s_int;
            errorColumn = stack[4].s_int;
            return stack[0].s_bool;
        }
        public bool SetContent(string text, StringBuilder errorMsg, ref int errorLine) {
            StackItem[] stack = new StackItem[4];
#if DEBUG
            stack[1].s_class = (IntPtr) DebugGCHandle.Alloc(text);
#else
            stack[1].s_class = (IntPtr) GCHandle.Alloc(text);
#endif
#if DEBUG
            stack[2].s_class = (IntPtr) DebugGCHandle.Alloc(errorMsg);
#else
            stack[2].s_class = (IntPtr) GCHandle.Alloc(errorMsg);
#endif
            stack[3].s_int = errorLine;
            interceptor.Invoke("setContent$$$", "setContent(const QString&, QString*, int*)", stack);
#if DEBUG
            DebugGCHandle.Free((GCHandle) stack[1].s_class);
#else
            ((GCHandle) stack[1].s_class).SynchronizedFree();
#endif
#if DEBUG
            DebugGCHandle.Free((GCHandle) stack[2].s_class);
#else
            ((GCHandle) stack[2].s_class).SynchronizedFree();
#endif
            errorLine = stack[3].s_int;
            return stack[0].s_bool;
        }
        public bool SetContent(string text, StringBuilder errorMsg) {
            return (bool) interceptor.Invoke("setContent$$", "setContent(const QString&, QString*)", typeof(bool), typeof(string), text, typeof(StringBuilder), errorMsg);
        }
        public bool SetContent(string text) {
            return (bool) interceptor.Invoke("setContent$", "setContent(const QString&)", typeof(bool), typeof(string), text);
        }
        public bool SetContent(QIODevice dev, StringBuilder errorMsg, ref int errorLine, ref int errorColumn) {
            StackItem[] stack = new StackItem[5];
#if DEBUG
            stack[1].s_class = (IntPtr) DebugGCHandle.Alloc(dev);
#else
            stack[1].s_class = (IntPtr) GCHandle.Alloc(dev);
#endif
#if DEBUG
            stack[2].s_class = (IntPtr) DebugGCHandle.Alloc(errorMsg);
#else
            stack[2].s_class = (IntPtr) GCHandle.Alloc(errorMsg);
#endif
            stack[3].s_int = errorLine;
            stack[4].s_int = errorColumn;
            interceptor.Invoke("setContent#$$$", "setContent(QIODevice*, QString*, int*, int*)", stack);
#if DEBUG
            DebugGCHandle.Free((GCHandle) stack[1].s_class);
#else
            ((GCHandle) stack[1].s_class).SynchronizedFree();
#endif
#if DEBUG
            DebugGCHandle.Free((GCHandle) stack[2].s_class);
#else
            ((GCHandle) stack[2].s_class).SynchronizedFree();
#endif
            errorLine = stack[3].s_int;
            errorColumn = stack[4].s_int;
            return stack[0].s_bool;
        }
        public bool SetContent(QIODevice dev, StringBuilder errorMsg, ref int errorLine) {
            StackItem[] stack = new StackItem[4];
#if DEBUG
            stack[1].s_class = (IntPtr) DebugGCHandle.Alloc(dev);
#else
            stack[1].s_class = (IntPtr) GCHandle.Alloc(dev);
#endif
#if DEBUG
            stack[2].s_class = (IntPtr) DebugGCHandle.Alloc(errorMsg);
#else
            stack[2].s_class = (IntPtr) GCHandle.Alloc(errorMsg);
#endif
            stack[3].s_int = errorLine;
            interceptor.Invoke("setContent#$$", "setContent(QIODevice*, QString*, int*)", stack);
#if DEBUG
            DebugGCHandle.Free((GCHandle) stack[1].s_class);
#else
            ((GCHandle) stack[1].s_class).SynchronizedFree();
#endif
#if DEBUG
            DebugGCHandle.Free((GCHandle) stack[2].s_class);
#else
            ((GCHandle) stack[2].s_class).SynchronizedFree();
#endif
            errorLine = stack[3].s_int;
            return stack[0].s_bool;
        }
        public bool SetContent(QIODevice dev, StringBuilder errorMsg) {
            return (bool) interceptor.Invoke("setContent#$", "setContent(QIODevice*, QString*)", typeof(bool), typeof(QIODevice), dev, typeof(StringBuilder), errorMsg);
        }
        public bool SetContent(QIODevice dev) {
            return (bool) interceptor.Invoke("setContent#", "setContent(QIODevice*)", typeof(bool), typeof(QIODevice), dev);
        }
        public bool SetContent(QXmlInputSource source, QXmlReader reader, StringBuilder errorMsg, ref int errorLine, ref int errorColumn) {
            StackItem[] stack = new StackItem[6];
#if DEBUG
            stack[1].s_class = (IntPtr) DebugGCHandle.Alloc(source);
#else
            stack[1].s_class = (IntPtr) GCHandle.Alloc(source);
#endif
#if DEBUG
            stack[2].s_class = (IntPtr) DebugGCHandle.Alloc(reader);
#else
            stack[2].s_class = (IntPtr) GCHandle.Alloc(reader);
#endif
#if DEBUG
            stack[3].s_class = (IntPtr) DebugGCHandle.Alloc(errorMsg);
#else
            stack[3].s_class = (IntPtr) GCHandle.Alloc(errorMsg);
#endif
            stack[4].s_int = errorLine;
            stack[5].s_int = errorColumn;
            interceptor.Invoke("setContent##$$$", "setContent(QXmlInputSource*, QXmlReader*, QString*, int*, int*)", stack);
#if DEBUG
            DebugGCHandle.Free((GCHandle) stack[1].s_class);
#else
            ((GCHandle) stack[1].s_class).SynchronizedFree();
#endif
#if DEBUG
            DebugGCHandle.Free((GCHandle) stack[2].s_class);
#else
            ((GCHandle) stack[2].s_class).SynchronizedFree();
#endif
#if DEBUG
            DebugGCHandle.Free((GCHandle) stack[3].s_class);
#else
            ((GCHandle) stack[3].s_class).SynchronizedFree();
#endif
            errorLine = stack[4].s_int;
            errorColumn = stack[5].s_int;
            return stack[0].s_bool;
        }
        public bool SetContent(QXmlInputSource source, QXmlReader reader, StringBuilder errorMsg, ref int errorLine) {
            StackItem[] stack = new StackItem[5];
#if DEBUG
            stack[1].s_class = (IntPtr) DebugGCHandle.Alloc(source);
#else
            stack[1].s_class = (IntPtr) GCHandle.Alloc(source);
#endif
#if DEBUG
            stack[2].s_class = (IntPtr) DebugGCHandle.Alloc(reader);
#else
            stack[2].s_class = (IntPtr) GCHandle.Alloc(reader);
#endif
#if DEBUG
            stack[3].s_class = (IntPtr) DebugGCHandle.Alloc(errorMsg);
#else
            stack[3].s_class = (IntPtr) GCHandle.Alloc(errorMsg);
#endif
            stack[4].s_int = errorLine;
            interceptor.Invoke("setContent##$$", "setContent(QXmlInputSource*, QXmlReader*, QString*, int*)", stack);
#if DEBUG
            DebugGCHandle.Free((GCHandle) stack[1].s_class);
#else
            ((GCHandle) stack[1].s_class).SynchronizedFree();
#endif
#if DEBUG
            DebugGCHandle.Free((GCHandle) stack[2].s_class);
#else
            ((GCHandle) stack[2].s_class).SynchronizedFree();
#endif
#if DEBUG
            DebugGCHandle.Free((GCHandle) stack[3].s_class);
#else
            ((GCHandle) stack[3].s_class).SynchronizedFree();
#endif
            errorLine = stack[4].s_int;
            return stack[0].s_bool;
        }
        public bool SetContent(QXmlInputSource source, QXmlReader reader, StringBuilder errorMsg) {
            return (bool) interceptor.Invoke("setContent##$", "setContent(QXmlInputSource*, QXmlReader*, QString*)", typeof(bool), typeof(QXmlInputSource), source, typeof(QXmlReader), reader, typeof(StringBuilder), errorMsg);
        }
        public bool SetContent(QXmlInputSource source, QXmlReader reader) {
            return (bool) interceptor.Invoke("setContent##", "setContent(QXmlInputSource*, QXmlReader*)", typeof(bool), typeof(QXmlInputSource), source, typeof(QXmlReader), reader);
        }
        public string ToString(int arg1) {
            return (string) interceptor.Invoke("toString$", "toString(int) const", typeof(string), typeof(int), arg1);
        }
        public new string ToString() {
            return (string) interceptor.Invoke("toString", "toString() const", typeof(string));
        }
        public QByteArray ToByteArray(int arg1) {
            return (QByteArray) interceptor.Invoke("toByteArray$", "toByteArray(int) const", typeof(QByteArray), typeof(int), arg1);
        }
        public QByteArray ToByteArray() {
            return (QByteArray) interceptor.Invoke("toByteArray", "toByteArray() const", typeof(QByteArray));
        }
        ~QDomDocument() {
            interceptor.Invoke("~QDomDocument", "~QDomDocument()", typeof(void));
        }
        public new void Dispose() {
            interceptor.Invoke("~QDomDocument", "~QDomDocument()", typeof(void));
        }
    }
}
