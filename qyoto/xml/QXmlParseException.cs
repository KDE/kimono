//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {
    using System;
    [SmokeClass("QXmlParseException")]
    public class QXmlParseException : Object, IDisposable {
        protected SmokeInvocation interceptor = null;
        private IntPtr smokeObject;
        protected QXmlParseException(Type dummy) {}
        protected void CreateProxy() {
            interceptor = new SmokeInvocation(typeof(QXmlParseException), this);
        }
        public QXmlParseException(string name, int c, int l, string p, string s) : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("QXmlParseException$$$$$", "QXmlParseException(const QString&, int, int, const QString&, const QString&)", typeof(void), typeof(string), name, typeof(int), c, typeof(int), l, typeof(string), p, typeof(string), s);
        }
        public QXmlParseException(string name, int c, int l, string p) : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("QXmlParseException$$$$", "QXmlParseException(const QString&, int, int, const QString&)", typeof(void), typeof(string), name, typeof(int), c, typeof(int), l, typeof(string), p);
        }
        public QXmlParseException(string name, int c, int l) : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("QXmlParseException$$$", "QXmlParseException(const QString&, int, int)", typeof(void), typeof(string), name, typeof(int), c, typeof(int), l);
        }
        public QXmlParseException(string name, int c) : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("QXmlParseException$$", "QXmlParseException(const QString&, int)", typeof(void), typeof(string), name, typeof(int), c);
        }
        public QXmlParseException(string name) : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("QXmlParseException$", "QXmlParseException(const QString&)", typeof(void), typeof(string), name);
        }
        public QXmlParseException() : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("QXmlParseException", "QXmlParseException()", typeof(void));
        }
        public QXmlParseException(QXmlParseException other) : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("QXmlParseException#", "QXmlParseException(const QXmlParseException&)", typeof(void), typeof(QXmlParseException), other);
        }
        public int ColumnNumber() {
            return (int) interceptor.Invoke("columnNumber", "columnNumber() const", typeof(int));
        }
        public int LineNumber() {
            return (int) interceptor.Invoke("lineNumber", "lineNumber() const", typeof(int));
        }
        public string PublicId() {
            return (string) interceptor.Invoke("publicId", "publicId() const", typeof(string));
        }
        public string SystemId() {
            return (string) interceptor.Invoke("systemId", "systemId() const", typeof(string));
        }
        public string Message() {
            return (string) interceptor.Invoke("message", "message() const", typeof(string));
        }
        ~QXmlParseException() {
            interceptor.Invoke("~QXmlParseException", "~QXmlParseException()", typeof(void));
        }
        public void Dispose() {
            interceptor.Invoke("~QXmlParseException", "~QXmlParseException()", typeof(void));
        }
    }
}
