//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {
    using System;
    [SmokeClass("QGLFramebufferObjectFormat")]
    public class QGLFramebufferObjectFormat : Object, IDisposable {
        protected SmokeInvocation interceptor = null;
        private IntPtr smokeObject;
        protected QGLFramebufferObjectFormat(Type dummy) {}
        protected void CreateProxy() {
            interceptor = new SmokeInvocation(typeof(QGLFramebufferObjectFormat), this);
        }
        private static SmokeInvocation staticInterceptor = null;
        static QGLFramebufferObjectFormat() {
            staticInterceptor = new SmokeInvocation(typeof(QGLFramebufferObjectFormat), null);
        }
        public QGLFramebufferObjectFormat() : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("QGLFramebufferObjectFormat", "QGLFramebufferObjectFormat()", typeof(void));
        }
        public QGLFramebufferObjectFormat(QGLFramebufferObjectFormat other) : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("QGLFramebufferObjectFormat#", "QGLFramebufferObjectFormat(const QGLFramebufferObjectFormat&)", typeof(void), typeof(QGLFramebufferObjectFormat), other);
        }
        public void SetSamples(int samples) {
            interceptor.Invoke("setSamples$", "setSamples(int)", typeof(void), typeof(int), samples);
        }
        public int Samples() {
            return (int) interceptor.Invoke("samples", "samples() const", typeof(int));
        }
        public void SetAttachment(QGLFramebufferObject.Attachment attachment) {
            interceptor.Invoke("setAttachment$", "setAttachment(QGLFramebufferObject::Attachment)", typeof(void), typeof(QGLFramebufferObject.Attachment), attachment);
        }
        public QGLFramebufferObject.Attachment Attachment() {
            return (QGLFramebufferObject.Attachment) interceptor.Invoke("attachment", "attachment() const", typeof(QGLFramebufferObject.Attachment));
        }
        public void SetTextureTarget(int target) {
            interceptor.Invoke("setTextureTarget$", "setTextureTarget(GLenum)", typeof(void), typeof(int), target);
        }
        public int TextureTarget() {
            return (int) interceptor.Invoke("textureTarget", "textureTarget() const", typeof(int));
        }
        public void SetInternalTextureFormat(int internalTextureFormat) {
            interceptor.Invoke("setInternalTextureFormat$", "setInternalTextureFormat(GLenum)", typeof(void), typeof(int), internalTextureFormat);
        }
        public int InternalTextureFormat() {
            return (int) interceptor.Invoke("internalTextureFormat", "internalTextureFormat() const", typeof(int));
        }
        public override bool Equals(object o) {
            if (!(o is QGLFramebufferObjectFormat)) { return false; }
            return this == (QGLFramebufferObjectFormat) o;
        }
        public override int GetHashCode() {
            return interceptor.GetHashCode();
        }
        ~QGLFramebufferObjectFormat() {
            interceptor.Invoke("~QGLFramebufferObjectFormat", "~QGLFramebufferObjectFormat()", typeof(void));
        }
        public void Dispose() {
            interceptor.Invoke("~QGLFramebufferObjectFormat", "~QGLFramebufferObjectFormat()", typeof(void));
        }
        public static bool operator==(QGLFramebufferObjectFormat lhs, QGLFramebufferObjectFormat other) {
            return (bool) staticInterceptor.Invoke("operator==#", "operator==(const QGLFramebufferObjectFormat&) const", typeof(bool), typeof(QGLFramebufferObjectFormat), lhs, typeof(QGLFramebufferObjectFormat), other);
        }
        public static bool operator!=(QGLFramebufferObjectFormat lhs, QGLFramebufferObjectFormat other) {
            return !(bool) staticInterceptor.Invoke("operator==#", "operator==(const QGLFramebufferObjectFormat&) const", typeof(bool), typeof(QGLFramebufferObjectFormat), lhs, typeof(QGLFramebufferObjectFormat), other);
        }
    }
}
