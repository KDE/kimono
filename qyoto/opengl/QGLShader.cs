//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {
    using System;
    [SmokeClass("QGLShader")]
    public class QGLShader : QObject, IDisposable {
        protected QGLShader(Type dummy) : base((Type) null) {}
        protected new void CreateProxy() {
            interceptor = new SmokeInvocation(typeof(QGLShader), this);
        }
        private static SmokeInvocation staticInterceptor = null;
        static QGLShader() {
            staticInterceptor = new SmokeInvocation(typeof(QGLShader), null);
        }
        public enum ShaderTypeBit {
            Vertex = 0x0001,
            Fragment = 0x0002,
        }
        public QGLShader(uint type, QObject parent) : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("QGLShader$#", "QGLShader(QGLShader::ShaderType, QObject*)", typeof(void), typeof(uint), type, typeof(QObject), parent);
        }
        public QGLShader(uint type) : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("QGLShader$", "QGLShader(QGLShader::ShaderType)", typeof(void), typeof(uint), type);
        }
        public QGLShader(uint type, QGLContext context, QObject parent) : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("QGLShader$##", "QGLShader(QGLShader::ShaderType, const QGLContext*, QObject*)", typeof(void), typeof(uint), type, typeof(QGLContext), context, typeof(QObject), parent);
        }
        public QGLShader(uint type, QGLContext context) : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("QGLShader$#", "QGLShader(QGLShader::ShaderType, const QGLContext*)", typeof(void), typeof(uint), type, typeof(QGLContext), context);
        }
        public uint ShaderType() {
            return (uint) interceptor.Invoke("shaderType", "shaderType() const", typeof(uint));
        }
        public bool CompileSourceCode(string source) {
            return (bool) interceptor.Invoke("compileSourceCode$", "compileSourceCode(const char*)", typeof(bool), typeof(string), source);
        }
        public bool CompileSourceCode(QByteArray source) {
            return (bool) interceptor.Invoke("compileSourceCode#", "compileSourceCode(const QByteArray&)", typeof(bool), typeof(QByteArray), source);
        }
        public bool CompileSourceFile(string fileName) {
            return (bool) interceptor.Invoke("compileSourceFile$", "compileSourceFile(const QString&)", typeof(bool), typeof(string), fileName);
        }
        public QByteArray SourceCode() {
            return (QByteArray) interceptor.Invoke("sourceCode", "sourceCode() const", typeof(QByteArray));
        }
        public bool IsCompiled() {
            return (bool) interceptor.Invoke("isCompiled", "isCompiled() const", typeof(bool));
        }
        public string Log() {
            return (string) interceptor.Invoke("log", "log() const", typeof(string));
        }
        public uint ShaderId() {
            return (uint) interceptor.Invoke("shaderId", "shaderId() const", typeof(uint));
        }
        ~QGLShader() {
            interceptor.Invoke("~QGLShader", "~QGLShader()", typeof(void));
        }
        public new void Dispose() {
            interceptor.Invoke("~QGLShader", "~QGLShader()", typeof(void));
        }
        public static new string Tr(string s, string c) {
            return (string) staticInterceptor.Invoke("tr$$", "tr(const char*, const char*)", typeof(string), typeof(string), s, typeof(string), c);
        }
        public static new string Tr(string s) {
            return (string) staticInterceptor.Invoke("tr$", "tr(const char*)", typeof(string), typeof(string), s);
        }
        protected new IQGLShaderSignals Emit {
            get { return (IQGLShaderSignals) Q_EMIT; }
        }
    }

    public interface IQGLShaderSignals : IQObjectSignals {
    }
}
