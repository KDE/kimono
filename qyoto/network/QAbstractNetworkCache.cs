//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {
    using System;
    [SmokeClass("QAbstractNetworkCache")]
    public abstract class QAbstractNetworkCache : QObject {
        protected QAbstractNetworkCache(Type dummy) : base((Type) null) {}
        protected new void CreateProxy() {
            interceptor = new SmokeInvocation(typeof(QAbstractNetworkCache), this);
        }
        private static SmokeInvocation staticInterceptor = null;
        static QAbstractNetworkCache() {
            staticInterceptor = new SmokeInvocation(typeof(QAbstractNetworkCache), null);
        }
        // QAbstractNetworkCache* QAbstractNetworkCache(QAbstractNetworkCachePrivate& arg1,QObject* arg2); >>>> NOT CONVERTED
        [SmokeMethod("metaData(const QUrl&)")]
        public abstract QNetworkCacheMetaData MetaData(QUrl url);
        [SmokeMethod("updateMetaData(const QNetworkCacheMetaData&)")]
        public abstract void UpdateMetaData(QNetworkCacheMetaData metaData);
        [SmokeMethod("data(const QUrl&)")]
        public abstract QIODevice Data(QUrl url);
        [SmokeMethod("remove(const QUrl&)")]
        public abstract bool Remove(QUrl url);
        [SmokeMethod("cacheSize() const")]
        public abstract long CacheSize();
        [SmokeMethod("prepare(const QNetworkCacheMetaData&)")]
        public abstract QIODevice Prepare(QNetworkCacheMetaData metaData);
        [SmokeMethod("insert(QIODevice*)")]
        public abstract void Insert(QIODevice device);
        [SmokeMethod("clear()")]
        public abstract void Clear();
        public QAbstractNetworkCache(QObject parent) : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("QAbstractNetworkCache#", "QAbstractNetworkCache(QObject*)", typeof(void), typeof(QObject), parent);
        }
        public QAbstractNetworkCache() : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("QAbstractNetworkCache", "QAbstractNetworkCache()", typeof(void));
        }
        public static new string Tr(string s, string c) {
            return (string) staticInterceptor.Invoke("tr$$", "tr(const char*, const char*)", typeof(string), typeof(string), s, typeof(string), c);
        }
        public static new string Tr(string s) {
            return (string) staticInterceptor.Invoke("tr$", "tr(const char*)", typeof(string), typeof(string), s);
        }
        protected new IQAbstractNetworkCacheSignals Emit {
            get { return (IQAbstractNetworkCacheSignals) Q_EMIT; }
        }
    }

    public interface IQAbstractNetworkCacheSignals : IQObjectSignals {
    }
}
