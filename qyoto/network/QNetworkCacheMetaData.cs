//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {
    using System;
    using System.Collections.Generic;
    [SmokeClass("QNetworkCacheMetaData")]
    public class QNetworkCacheMetaData : Object, IDisposable {
        protected SmokeInvocation interceptor = null;
        private IntPtr smokeObject;
        protected QNetworkCacheMetaData(Type dummy) {}
        protected void CreateProxy() {
            interceptor = new SmokeInvocation(typeof(QNetworkCacheMetaData), this);
        }
        private static SmokeInvocation staticInterceptor = null;
        static QNetworkCacheMetaData() {
            staticInterceptor = new SmokeInvocation(typeof(QNetworkCacheMetaData), null);
        }
        // QHash<QNetworkRequest::Attribute,QVariant> attributes(); >>>> NOT CONVERTED
        // void setAttributes(const QHash<QNetworkRequest::Attribute,QVariant>& arg1); >>>> NOT CONVERTED
        public QNetworkCacheMetaData() : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("QNetworkCacheMetaData", "QNetworkCacheMetaData()", typeof(void));
        }
        public QNetworkCacheMetaData(QNetworkCacheMetaData other) : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("QNetworkCacheMetaData#", "QNetworkCacheMetaData(const QNetworkCacheMetaData&)", typeof(void), typeof(QNetworkCacheMetaData), other);
        }
        public override bool Equals(object o) {
            if (!(o is QNetworkCacheMetaData)) { return false; }
            return this == (QNetworkCacheMetaData) o;
        }
        public override int GetHashCode() {
            return interceptor.GetHashCode();
        }
        public bool IsValid() {
            return (bool) interceptor.Invoke("isValid", "isValid() const", typeof(bool));
        }
        public QUrl Url() {
            return (QUrl) interceptor.Invoke("url", "url() const", typeof(QUrl));
        }
        public void SetUrl(QUrl url) {
            interceptor.Invoke("setUrl#", "setUrl(const QUrl&)", typeof(void), typeof(QUrl), url);
        }
        public List<QPair<QByteArray, QByteArray>> RawHeaders() {
            return (List<QPair<QByteArray, QByteArray>>) interceptor.Invoke("rawHeaders", "rawHeaders() const", typeof(List<QPair<QByteArray, QByteArray>>));
        }
        public void SetRawHeaders(List<QPair<QByteArray, QByteArray>> headers) {
            interceptor.Invoke("setRawHeaders?", "setRawHeaders(const QList<QPair<QByteArray,QByteArray> >&)", typeof(void), typeof(List<QPair<QByteArray, QByteArray>>), headers);
        }
        public QDateTime LastModified() {
            return (QDateTime) interceptor.Invoke("lastModified", "lastModified() const", typeof(QDateTime));
        }
        public void SetLastModified(QDateTime dateTime) {
            interceptor.Invoke("setLastModified#", "setLastModified(const QDateTime&)", typeof(void), typeof(QDateTime), dateTime);
        }
        public QDateTime ExpirationDate() {
            return (QDateTime) interceptor.Invoke("expirationDate", "expirationDate() const", typeof(QDateTime));
        }
        public void SetExpirationDate(QDateTime dateTime) {
            interceptor.Invoke("setExpirationDate#", "setExpirationDate(const QDateTime&)", typeof(void), typeof(QDateTime), dateTime);
        }
        public bool SaveToDisk() {
            return (bool) interceptor.Invoke("saveToDisk", "saveToDisk() const", typeof(bool));
        }
        public void SetSaveToDisk(bool allow) {
            interceptor.Invoke("setSaveToDisk$", "setSaveToDisk(bool)", typeof(void), typeof(bool), allow);
        }
        ~QNetworkCacheMetaData() {
            interceptor.Invoke("~QNetworkCacheMetaData", "~QNetworkCacheMetaData()", typeof(void));
        }
        public void Dispose() {
            interceptor.Invoke("~QNetworkCacheMetaData", "~QNetworkCacheMetaData()", typeof(void));
        }
        public static bool operator==(QNetworkCacheMetaData lhs, QNetworkCacheMetaData other) {
            return (bool) staticInterceptor.Invoke("operator==#", "operator==(const QNetworkCacheMetaData&) const", typeof(bool), typeof(QNetworkCacheMetaData), lhs, typeof(QNetworkCacheMetaData), other);
        }
        public static bool operator!=(QNetworkCacheMetaData lhs, QNetworkCacheMetaData other) {
            return !(bool) staticInterceptor.Invoke("operator==#", "operator==(const QNetworkCacheMetaData&) const", typeof(bool), typeof(QNetworkCacheMetaData), lhs, typeof(QNetworkCacheMetaData), other);
        }
    }
}
