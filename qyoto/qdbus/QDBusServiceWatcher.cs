//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {
    using System;
    using System.Collections.Generic;
    /// <remarks> See <see cref="IQDBusServiceWatcherSignals"></see> for signals emitted by QDBusServiceWatcher
    /// </remarks>
    [SmokeClass("QDBusServiceWatcher")]
    public class QDBusServiceWatcher : QObject, IDisposable {
        protected QDBusServiceWatcher(Type dummy) : base((Type) null) {}
        protected new void CreateProxy() {
            interceptor = new SmokeInvocation(typeof(QDBusServiceWatcher), this);
        }
        private static SmokeInvocation staticInterceptor = null;
        static QDBusServiceWatcher() {
            staticInterceptor = new SmokeInvocation(typeof(QDBusServiceWatcher), null);
        }
        public enum WatchModeFlag {
            WatchForRegistration = 0x01,
            WatchForUnregistration = 0x02,
            WatchForOwnerChange = 0x03,
        }
        [Q_PROPERTY("QStringList", "watchedServices")]
        public List<string> WatchedServices {
            get { return (List<string>) interceptor.Invoke("watchedServices", "watchedServices()", typeof(List<string>)); }
            set { interceptor.Invoke("setWatchedServices?", "setWatchedServices(QStringList)", typeof(void), typeof(List<string>), value); }
        }
        [Q_PROPERTY("QDBusServiceWatcher::WatchMode", "watchMode")]
        public uint WatchMode {
            get { return (uint) interceptor.Invoke("watchMode", "watchMode()", typeof(uint)); }
            set { interceptor.Invoke("setWatchMode$", "setWatchMode(QDBusServiceWatcher::WatchMode)", typeof(void), typeof(uint), value); }
        }
        public QDBusServiceWatcher(QObject parent) : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("QDBusServiceWatcher#", "QDBusServiceWatcher(QObject*)", typeof(void), typeof(QObject), parent);
        }
        public QDBusServiceWatcher() : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("QDBusServiceWatcher", "QDBusServiceWatcher()", typeof(void));
        }
        public QDBusServiceWatcher(string service, QDBusConnection connection, uint watchMode, QObject parent) : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("QDBusServiceWatcher$#$#", "QDBusServiceWatcher(const QString&, const QDBusConnection&, QDBusServiceWatcher::WatchMode, QObject*)", typeof(void), typeof(string), service, typeof(QDBusConnection), connection, typeof(uint), watchMode, typeof(QObject), parent);
        }
        public QDBusServiceWatcher(string service, QDBusConnection connection, uint watchMode) : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("QDBusServiceWatcher$#$", "QDBusServiceWatcher(const QString&, const QDBusConnection&, QDBusServiceWatcher::WatchMode)", typeof(void), typeof(string), service, typeof(QDBusConnection), connection, typeof(uint), watchMode);
        }
        public QDBusServiceWatcher(string service, QDBusConnection connection) : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("QDBusServiceWatcher$#", "QDBusServiceWatcher(const QString&, const QDBusConnection&)", typeof(void), typeof(string), service, typeof(QDBusConnection), connection);
        }
        public void AddWatchedService(string newService) {
            interceptor.Invoke("addWatchedService$", "addWatchedService(const QString&)", typeof(void), typeof(string), newService);
        }
        public bool RemoveWatchedService(string service) {
            return (bool) interceptor.Invoke("removeWatchedService$", "removeWatchedService(const QString&)", typeof(bool), typeof(string), service);
        }
        public QDBusConnection Connection() {
            return (QDBusConnection) interceptor.Invoke("connection", "connection() const", typeof(QDBusConnection));
        }
        public void SetConnection(QDBusConnection connection) {
            interceptor.Invoke("setConnection#", "setConnection(const QDBusConnection&)", typeof(void), typeof(QDBusConnection), connection);
        }
        ~QDBusServiceWatcher() {
            interceptor.Invoke("~QDBusServiceWatcher", "~QDBusServiceWatcher()", typeof(void));
        }
        public new void Dispose() {
            interceptor.Invoke("~QDBusServiceWatcher", "~QDBusServiceWatcher()", typeof(void));
        }
        public static new string Tr(string s, string c) {
            return (string) staticInterceptor.Invoke("tr$$", "tr(const char*, const char*)", typeof(string), typeof(string), s, typeof(string), c);
        }
        public static new string Tr(string s) {
            return (string) staticInterceptor.Invoke("tr$", "tr(const char*)", typeof(string), typeof(string), s);
        }
        protected new IQDBusServiceWatcherSignals Emit {
            get { return (IQDBusServiceWatcherSignals) Q_EMIT; }
        }
    }

    public interface IQDBusServiceWatcherSignals : IQObjectSignals {
        [Q_SIGNAL("void serviceRegistered(QString)")]
        void ServiceRegistered(string service);
        [Q_SIGNAL("void serviceUnregistered(QString)")]
        void ServiceUnregistered(string service);
        [Q_SIGNAL("void serviceOwnerChanged(QString, QString, QString)")]
        void ServiceOwnerChanged(string service, string oldOwner, string newOwner);
    }
}
