//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {
    using System;
    using System.Collections.Generic;
    [SmokeClass("Qt")]
    public partial class Qt {
        protected SmokeInvocation interceptor = null;
        private static SmokeInvocation staticInterceptor = null;
        static Qt() {
            staticInterceptor = new SmokeInvocation(typeof(Qt), null);
        }
        public enum GlobalColor {
            color0 = 0,
            color1 = 1,
            black = 2,
            white = 3,
            darkGray = 4,
            gray = 5,
            lightGray = 6,
            red = 7,
            green = 8,
            blue = 9,
            cyan = 10,
            magenta = 11,
            yellow = 12,
            darkRed = 13,
            darkGreen = 14,
            darkBlue = 15,
            darkCyan = 16,
            darkMagenta = 17,
            darkYellow = 18,
            transparent = 19,
        }
        public enum KeyboardModifier : uint {
            NoModifier = 0x00000000,
            ShiftModifier = 0x02000000,
            ControlModifier = 0x04000000,
            AltModifier = 0x08000000,
            MetaModifier = 0x10000000,
            KeypadModifier = 0x20000000,
            GroupSwitchModifier = 0x40000000,
            KeyboardModifierMask = 0xfe000000,
        }
        public enum Modifier : uint {
            META = Qt.KeyboardModifier.MetaModifier,
            SHIFT = Qt.KeyboardModifier.ShiftModifier,
            CTRL = Qt.KeyboardModifier.ControlModifier,
            ALT = Qt.KeyboardModifier.AltModifier,
            MODIFIER_MASK = KeyboardModifier.KeyboardModifierMask,
            UNICODE_ACCEL = 0x00000000,
        }
        public enum MouseButton {
            NoButton = 0x00000000,
            LeftButton = 0x00000001,
            RightButton = 0x00000002,
            MidButton = 0x00000004,
            XButton1 = 0x00000008,
            XButton2 = 0x00000010,
            MouseButtonMask = 0x000000ff,
        }
        public enum Orientation {
            Horizontal = 0x1,
            Vertical = 0x2,
        }
        public enum FocusPolicy {
            NoFocus = 0,
            TabFocus = 0x1,
            ClickFocus = 0x2,
            StrongFocus = TabFocus|ClickFocus|0x8,
            WheelFocus = StrongFocus|0x4,
        }
        public enum SortOrder {
            AscendingOrder = 0,
            DescendingOrder = 1,
        }
        public enum AlignmentFlag {
            AlignLeft = 0x0001,
            AlignLeading = AlignLeft,
            AlignRight = 0x0002,
            AlignTrailing = AlignRight,
            AlignHCenter = 0x0004,
            AlignJustify = 0x0008,
            AlignAbsolute = 0x0010,
            AlignHorizontal_Mask = AlignLeft|AlignRight|AlignHCenter|AlignJustify|AlignAbsolute,
            AlignTop = 0x0020,
            AlignBottom = 0x0040,
            AlignVCenter = 0x0080,
            AlignVertical_Mask = AlignTop|AlignBottom|AlignVCenter,
            AlignCenter = AlignVCenter|AlignHCenter,
        }
        public enum TextFlag {
            TextSingleLine = 0x0100,
            TextDontClip = 0x0200,
            TextExpandTabs = 0x0400,
            TextShowMnemonic = 0x0800,
            TextWordWrap = 0x1000,
            TextWrapAnywhere = 0x2000,
            TextDontPrint = 0x4000,
            TextIncludeTrailingSpaces = 0x08000000,
            TextHideMnemonic = 0x8000,
            TextJustificationForced = 0x10000,
            TextForceLeftToRight = 0x20000,
            TextForceRightToLeft = 0x40000,
        }
        public enum TextElideMode {
            ElideLeft = 0,
            ElideRight = 1,
            ElideMiddle = 2,
            ElideNone = 3,
        }
        public enum WindowType {
            Widget = 0x00000000,
            Window = 0x00000001,
            Dialog = 0x00000002|Window,
            Sheet = 0x00000004|Window,
            Drawer = 0x00000006|Window,
            Popup = 0x00000008|Window,
            Tool = 0x0000000a|Window,
            ToolTip = 0x0000000c|Window,
            SplashScreen = 0x0000000e|Window,
            Desktop = 0x00000010|Window,
            SubWindow = 0x00000012,
            WindowType_Mask = 0x000000ff,
            MSWindowsFixedSizeDialogHint = 0x00000100,
            MSWindowsOwnDC = 0x00000200,
            X11BypassWindowManagerHint = 0x00000400,
            FramelessWindowHint = 0x00000800,
            WindowTitleHint = 0x00001000,
            WindowSystemMenuHint = 0x00002000,
            WindowMinimizeButtonHint = 0x00004000,
            WindowMaximizeButtonHint = 0x00008000,
            WindowMinMaxButtonsHint = WindowMinimizeButtonHint|WindowMaximizeButtonHint,
            WindowContextHelpButtonHint = 0x00010000,
            WindowShadeButtonHint = 0x00020000,
            WindowStaysOnTopHint = 0x00040000,
            WindowOkButtonHint = 0x00080000,
            WindowCancelButtonHint = 0x00100000,
            CustomizeWindowHint = 0x02000000,
            WindowStaysOnBottomHint = 0x04000000,
            WindowCloseButtonHint = 0x08000000,
            MacWindowToolBarButtonHint = 0x10000000,
            BypassGraphicsProxyWidget = 0x20000000,
        }
        public enum WindowState {
            WindowNoState = 0x00000000,
            WindowMinimized = 0x00000001,
            WindowMaximized = 0x00000002,
            WindowFullScreen = 0x00000004,
            WindowActive = 0x00000008,
        }
        public enum WidgetAttribute {
            WA_Disabled = 0,
            WA_UnderMouse = 1,
            WA_MouseTracking = 2,
            WA_ContentsPropagated = 3,
            WA_OpaquePaintEvent = 4,
            WA_NoBackground = WA_OpaquePaintEvent,
            WA_StaticContents = 5,
            WA_LaidOut = 7,
            WA_PaintOnScreen = 8,
            WA_NoSystemBackground = 9,
            WA_UpdatesDisabled = 10,
            WA_Mapped = 11,
            WA_MacNoClickThrough = 12,
            WA_PaintOutsidePaintEvent = 13,
            WA_InputMethodEnabled = 14,
            WA_WState_Visible = 15,
            WA_WState_Hidden = 16,
            WA_ForceDisabled = 32,
            WA_KeyCompression = 33,
            WA_PendingMoveEvent = 34,
            WA_PendingResizeEvent = 35,
            WA_SetPalette = 36,
            WA_SetFont = 37,
            WA_SetCursor = 38,
            WA_NoChildEventsFromChildren = 39,
            WA_WindowModified = 41,
            WA_Resized = 42,
            WA_Moved = 43,
            WA_PendingUpdate = 44,
            WA_InvalidSize = 45,
            WA_MacBrushedMetal = 46,
            WA_MacMetalStyle = WA_MacBrushedMetal,
            WA_CustomWhatsThis = 47,
            WA_LayoutOnEntireRect = 48,
            WA_OutsideWSRange = 49,
            WA_GrabbedShortcut = 50,
            WA_TransparentForMouseEvents = 51,
            WA_PaintUnclipped = 52,
            WA_SetWindowIcon = 53,
            WA_NoMouseReplay = 54,
            WA_DeleteOnClose = 55,
            WA_RightToLeft = 56,
            WA_SetLayoutDirection = 57,
            WA_NoChildEventsForParent = 58,
            WA_ForceUpdatesDisabled = 59,
            WA_WState_Created = 60,
            WA_WState_CompressKeys = 61,
            WA_WState_InPaintEvent = 62,
            WA_WState_Reparented = 63,
            WA_WState_ConfigPending = 64,
            WA_WState_Polished = 66,
            WA_WState_DND = 67,
            WA_WState_OwnSizePolicy = 68,
            WA_WState_ExplicitShowHide = 69,
            WA_ShowModal = 70,
            WA_MouseNoMask = 71,
            WA_GroupLeader = 72,
            WA_NoMousePropagation = 73,
            WA_Hover = 74,
            WA_InputMethodTransparent = 75,
            WA_QuitOnClose = 76,
            WA_KeyboardFocusChange = 77,
            WA_AcceptDrops = 78,
            WA_DropSiteRegistered = 79,
            WA_ForceAcceptDrops = WA_DropSiteRegistered,
            WA_WindowPropagation = 80,
            WA_NoX11EventCompression = 81,
            WA_TintedBackground = 82,
            WA_X11OpenGLOverlay = 83,
            WA_AlwaysShowToolTips = 84,
            WA_MacOpaqueSizeGrip = 85,
            WA_SetStyle = 86,
            WA_SetLocale = 87,
            WA_MacShowFocusRect = 88,
            WA_MacNormalSize = 89,
            WA_MacSmallSize = 90,
            WA_MacMiniSize = 91,
            WA_LayoutUsesWidgetRect = 92,
            WA_StyledBackground = 93,
            WA_MSWindowsUseDirect3D = 94,
            WA_CanHostQMdiSubWindowTitleBar = 95,
            WA_MacAlwaysShowToolWindow = 96,
            WA_StyleSheet = 97,
            WA_ShowWithoutActivating = 98,
            WA_X11BypassTransientForHint = 99,
            WA_NativeWindow = 100,
            WA_DontCreateNativeAncestors = 101,
            WA_MacVariableSize = 102,
            WA_DontShowOnScreen = 103,
            WA_X11NetWmWindowTypeDesktop = 104,
            WA_X11NetWmWindowTypeDock = 105,
            WA_X11NetWmWindowTypeToolBar = 106,
            WA_X11NetWmWindowTypeMenu = 107,
            WA_X11NetWmWindowTypeUtility = 108,
            WA_X11NetWmWindowTypeSplash = 109,
            WA_X11NetWmWindowTypeDialog = 110,
            WA_X11NetWmWindowTypeDropDownMenu = 111,
            WA_X11NetWmWindowTypePopupMenu = 112,
            WA_X11NetWmWindowTypeToolTip = 113,
            WA_X11NetWmWindowTypeNotification = 114,
            WA_X11NetWmWindowTypeCombo = 115,
            WA_X11NetWmWindowTypeDND = 116,
            WA_MacFrameworkScaled = 117,
            WA_SetWindowModality = 118,
            WA_WState_WindowOpacitySet = 119,
            WA_TranslucentBackground = 120,
            WA_AttributeCount = 121,
        }
        public enum ApplicationAttribute {
            AA_ImmediateWidgetCreation = 0,
            AA_MSWindowsUseDirect3DByDefault = 1,
            AA_DontShowIconsInMenus = 2,
            AA_NativeWindows = 3,
            AA_DontCreateNativeWidgetSiblings = 4,
            AA_MacPluginApplication = 5,
            AA_AttributeCount = 6,
        }
        public enum ImageConversionFlag {
            ColorMode_Mask = 0x00000003,
            AutoColor = 0x00000000,
            ColorOnly = 0x00000003,
            MonoOnly = 0x00000002,
            AlphaDither_Mask = 0x0000000c,
            ThresholdAlphaDither = 0x00000000,
            OrderedAlphaDither = 0x00000004,
            DiffuseAlphaDither = 0x00000008,
            NoAlpha = 0x0000000c,
            Dither_Mask = 0x00000030,
            DiffuseDither = 0x00000000,
            OrderedDither = 0x00000010,
            ThresholdDither = 0x00000020,
            DitherMode_Mask = 0x000000c0,
            AutoDither = 0x00000000,
            PreferDither = 0x00000040,
            AvoidDither = 0x00000080,
            NoOpaqueDetection = 0x00000100,
        }
        public enum BGMode {
            TransparentMode = 0,
            OpaqueMode = 1,
        }
        public enum Key {
            Key_Escape = 0x01000000,
            Key_Tab = 0x01000001,
            Key_Backtab = 0x01000002,
            Key_Backspace = 0x01000003,
            Key_Return = 0x01000004,
            Key_Enter = 0x01000005,
            Key_Insert = 0x01000006,
            Key_Delete = 0x01000007,
            Key_Pause = 0x01000008,
            Key_Print = 0x01000009,
            Key_SysReq = 0x0100000a,
            Key_Clear = 0x0100000b,
            Key_Home = 0x01000010,
            Key_End = 0x01000011,
            Key_Left = 0x01000012,
            Key_Up = 0x01000013,
            Key_Right = 0x01000014,
            Key_Down = 0x01000015,
            Key_PageUp = 0x01000016,
            Key_PageDown = 0x01000017,
            Key_Shift = 0x01000020,
            Key_Control = 0x01000021,
            Key_Meta = 0x01000022,
            Key_Alt = 0x01000023,
            Key_CapsLock = 0x01000024,
            Key_NumLock = 0x01000025,
            Key_ScrollLock = 0x01000026,
            Key_F1 = 0x01000030,
            Key_F2 = 0x01000031,
            Key_F3 = 0x01000032,
            Key_F4 = 0x01000033,
            Key_F5 = 0x01000034,
            Key_F6 = 0x01000035,
            Key_F7 = 0x01000036,
            Key_F8 = 0x01000037,
            Key_F9 = 0x01000038,
            Key_F10 = 0x01000039,
            Key_F11 = 0x0100003a,
            Key_F12 = 0x0100003b,
            Key_F13 = 0x0100003c,
            Key_F14 = 0x0100003d,
            Key_F15 = 0x0100003e,
            Key_F16 = 0x0100003f,
            Key_F17 = 0x01000040,
            Key_F18 = 0x01000041,
            Key_F19 = 0x01000042,
            Key_F20 = 0x01000043,
            Key_F21 = 0x01000044,
            Key_F22 = 0x01000045,
            Key_F23 = 0x01000046,
            Key_F24 = 0x01000047,
            Key_F25 = 0x01000048,
            Key_F26 = 0x01000049,
            Key_F27 = 0x0100004a,
            Key_F28 = 0x0100004b,
            Key_F29 = 0x0100004c,
            Key_F30 = 0x0100004d,
            Key_F31 = 0x0100004e,
            Key_F32 = 0x0100004f,
            Key_F33 = 0x01000050,
            Key_F34 = 0x01000051,
            Key_F35 = 0x01000052,
            Key_Super_L = 0x01000053,
            Key_Super_R = 0x01000054,
            Key_Menu = 0x01000055,
            Key_Hyper_L = 0x01000056,
            Key_Hyper_R = 0x01000057,
            Key_Help = 0x01000058,
            Key_Direction_L = 0x01000059,
            Key_Direction_R = 0x01000060,
            Key_Space = 0x20,
            Key_Any = Key_Space,
            Key_Exclam = 0x21,
            Key_QuoteDbl = 0x22,
            Key_NumberSign = 0x23,
            Key_Dollar = 0x24,
            Key_Percent = 0x25,
            Key_Ampersand = 0x26,
            Key_Apostrophe = 0x27,
            Key_ParenLeft = 0x28,
            Key_ParenRight = 0x29,
            Key_Asterisk = 0x2a,
            Key_Plus = 0x2b,
            Key_Comma = 0x2c,
            Key_Minus = 0x2d,
            Key_Period = 0x2e,
            Key_Slash = 0x2f,
            Key_0 = 0x30,
            Key_1 = 0x31,
            Key_2 = 0x32,
            Key_3 = 0x33,
            Key_4 = 0x34,
            Key_5 = 0x35,
            Key_6 = 0x36,
            Key_7 = 0x37,
            Key_8 = 0x38,
            Key_9 = 0x39,
            Key_Colon = 0x3a,
            Key_Semicolon = 0x3b,
            Key_Less = 0x3c,
            Key_Equal = 0x3d,
            Key_Greater = 0x3e,
            Key_Question = 0x3f,
            Key_At = 0x40,
            Key_A = 0x41,
            Key_B = 0x42,
            Key_C = 0x43,
            Key_D = 0x44,
            Key_E = 0x45,
            Key_F = 0x46,
            Key_G = 0x47,
            Key_H = 0x48,
            Key_I = 0x49,
            Key_J = 0x4a,
            Key_K = 0x4b,
            Key_L = 0x4c,
            Key_M = 0x4d,
            Key_N = 0x4e,
            Key_O = 0x4f,
            Key_P = 0x50,
            Key_Q = 0x51,
            Key_R = 0x52,
            Key_S = 0x53,
            Key_T = 0x54,
            Key_U = 0x55,
            Key_V = 0x56,
            Key_W = 0x57,
            Key_X = 0x58,
            Key_Y = 0x59,
            Key_Z = 0x5a,
            Key_BracketLeft = 0x5b,
            Key_Backslash = 0x5c,
            Key_BracketRight = 0x5d,
            Key_AsciiCircum = 0x5e,
            Key_Underscore = 0x5f,
            Key_QuoteLeft = 0x60,
            Key_BraceLeft = 0x7b,
            Key_Bar = 0x7c,
            Key_BraceRight = 0x7d,
            Key_AsciiTilde = 0x7e,
            Key_nobreakspace = 0x0a0,
            Key_exclamdown = 0x0a1,
            Key_cent = 0x0a2,
            Key_sterling = 0x0a3,
            Key_currency = 0x0a4,
            Key_yen = 0x0a5,
            Key_brokenbar = 0x0a6,
            Key_section = 0x0a7,
            Key_diaeresis = 0x0a8,
            Key_copyright = 0x0a9,
            Key_ordfeminine = 0x0aa,
            Key_guillemotleft = 0x0ab,
            Key_notsign = 0x0ac,
            Key_hyphen = 0x0ad,
            Key_registered = 0x0ae,
            Key_macron = 0x0af,
            Key_degree = 0x0b0,
            Key_plusminus = 0x0b1,
            Key_twosuperior = 0x0b2,
            Key_threesuperior = 0x0b3,
            Key_acute = 0x0b4,
            Key_mu = 0x0b5,
            Key_paragraph = 0x0b6,
            Key_periodcentered = 0x0b7,
            Key_cedilla = 0x0b8,
            Key_onesuperior = 0x0b9,
            Key_masculine = 0x0ba,
            Key_guillemotright = 0x0bb,
            Key_onequarter = 0x0bc,
            Key_onehalf = 0x0bd,
            Key_threequarters = 0x0be,
            Key_questiondown = 0x0bf,
            Key_Agrave = 0x0c0,
            Key_Aacute = 0x0c1,
            Key_Acircumflex = 0x0c2,
            Key_Atilde = 0x0c3,
            Key_Adiaeresis = 0x0c4,
            Key_Aring = 0x0c5,
            Key_AE = 0x0c6,
            Key_Ccedilla = 0x0c7,
            Key_Egrave = 0x0c8,
            Key_Eacute = 0x0c9,
            Key_Ecircumflex = 0x0ca,
            Key_Ediaeresis = 0x0cb,
            Key_Igrave = 0x0cc,
            Key_Iacute = 0x0cd,
            Key_Icircumflex = 0x0ce,
            Key_Idiaeresis = 0x0cf,
            Key_ETH = 0x0d0,
            Key_Ntilde = 0x0d1,
            Key_Ograve = 0x0d2,
            Key_Oacute = 0x0d3,
            Key_Ocircumflex = 0x0d4,
            Key_Otilde = 0x0d5,
            Key_Odiaeresis = 0x0d6,
            Key_multiply = 0x0d7,
            Key_Ooblique = 0x0d8,
            Key_Ugrave = 0x0d9,
            Key_Uacute = 0x0da,
            Key_Ucircumflex = 0x0db,
            Key_Udiaeresis = 0x0dc,
            Key_Yacute = 0x0dd,
            Key_THORN = 0x0de,
            Key_ssharp = 0x0df,
            Key_division = 0x0f7,
            Key_ydiaeresis = 0x0ff,
            Key_AltGr = 0x01001103,
            Key_Multi_key = 0x01001120,
            Key_Codeinput = 0x01001137,
            Key_SingleCandidate = 0x0100113c,
            Key_MultipleCandidate = 0x0100113d,
            Key_PreviousCandidate = 0x0100113e,
            Key_Mode_switch = 0x0100117e,
            Key_Kanji = 0x01001121,
            Key_Muhenkan = 0x01001122,
            Key_Henkan = 0x01001123,
            Key_Romaji = 0x01001124,
            Key_Hiragana = 0x01001125,
            Key_Katakana = 0x01001126,
            Key_Hiragana_Katakana = 0x01001127,
            Key_Zenkaku = 0x01001128,
            Key_Hankaku = 0x01001129,
            Key_Zenkaku_Hankaku = 0x0100112a,
            Key_Touroku = 0x0100112b,
            Key_Massyo = 0x0100112c,
            Key_Kana_Lock = 0x0100112d,
            Key_Kana_Shift = 0x0100112e,
            Key_Eisu_Shift = 0x0100112f,
            Key_Eisu_toggle = 0x01001130,
            Key_Hangul = 0x01001131,
            Key_Hangul_Start = 0x01001132,
            Key_Hangul_End = 0x01001133,
            Key_Hangul_Hanja = 0x01001134,
            Key_Hangul_Jamo = 0x01001135,
            Key_Hangul_Romaja = 0x01001136,
            Key_Hangul_Jeonja = 0x01001138,
            Key_Hangul_Banja = 0x01001139,
            Key_Hangul_PreHanja = 0x0100113a,
            Key_Hangul_PostHanja = 0x0100113b,
            Key_Hangul_Special = 0x0100113f,
            Key_Dead_Grave = 0x01001250,
            Key_Dead_Acute = 0x01001251,
            Key_Dead_Circumflex = 0x01001252,
            Key_Dead_Tilde = 0x01001253,
            Key_Dead_Macron = 0x01001254,
            Key_Dead_Breve = 0x01001255,
            Key_Dead_Abovedot = 0x01001256,
            Key_Dead_Diaeresis = 0x01001257,
            Key_Dead_Abovering = 0x01001258,
            Key_Dead_Doubleacute = 0x01001259,
            Key_Dead_Caron = 0x0100125a,
            Key_Dead_Cedilla = 0x0100125b,
            Key_Dead_Ogonek = 0x0100125c,
            Key_Dead_Iota = 0x0100125d,
            Key_Dead_Voiced_Sound = 0x0100125e,
            Key_Dead_Semivoiced_Sound = 0x0100125f,
            Key_Dead_Belowdot = 0x01001260,
            Key_Dead_Hook = 0x01001261,
            Key_Dead_Horn = 0x01001262,
            Key_Back = 0x01000061,
            Key_Forward = 0x01000062,
            Key_Stop = 0x01000063,
            Key_Refresh = 0x01000064,
            Key_VolumeDown = 0x01000070,
            Key_VolumeMute = 0x01000071,
            Key_VolumeUp = 0x01000072,
            Key_BassBoost = 0x01000073,
            Key_BassUp = 0x01000074,
            Key_BassDown = 0x01000075,
            Key_TrebleUp = 0x01000076,
            Key_TrebleDown = 0x01000077,
            Key_MediaPlay = 0x01000080,
            Key_MediaStop = 0x01000081,
            Key_MediaPrevious = 0x01000082,
            Key_MediaNext = 0x01000083,
            Key_MediaRecord = 0x01000084,
            Key_HomePage = 0x01000090,
            Key_Favorites = 0x01000091,
            Key_Search = 0x01000092,
            Key_Standby = 0x01000093,
            Key_OpenUrl = 0x01000094,
            Key_LaunchMail = 0x010000a0,
            Key_LaunchMedia = 0x010000a1,
            Key_Launch0 = 0x010000a2,
            Key_Launch1 = 0x010000a3,
            Key_Launch2 = 0x010000a4,
            Key_Launch3 = 0x010000a5,
            Key_Launch4 = 0x010000a6,
            Key_Launch5 = 0x010000a7,
            Key_Launch6 = 0x010000a8,
            Key_Launch7 = 0x010000a9,
            Key_Launch8 = 0x010000aa,
            Key_Launch9 = 0x010000ab,
            Key_LaunchA = 0x010000ac,
            Key_LaunchB = 0x010000ad,
            Key_LaunchC = 0x010000ae,
            Key_LaunchD = 0x010000af,
            Key_LaunchE = 0x010000b0,
            Key_LaunchF = 0x010000b1,
            Key_MediaLast = 0x0100ffff,
            Key_Select = 0x01010000,
            Key_Yes = 0x01010001,
            Key_No = 0x01010002,
            Key_Cancel = 0x01020001,
            Key_Printer = 0x01020002,
            Key_Execute = 0x01020003,
            Key_Sleep = 0x01020004,
            Key_Play = 0x01020005,
            Key_Zoom = 0x01020006,
            Key_Context1 = 0x01100000,
            Key_Context2 = 0x01100001,
            Key_Context3 = 0x01100002,
            Key_Context4 = 0x01100003,
            Key_Call = 0x01100004,
            Key_Hangup = 0x01100005,
            Key_Flip = 0x01100006,
            Key_unknown = 0x01ffffff,
        }
        public enum ArrowType {
            NoArrow = 0,
            UpArrow = 1,
            DownArrow = 2,
            LeftArrow = 3,
            RightArrow = 4,
        }
        public enum PenStyle {
            NoPen = 0,
            SolidLine = 1,
            DashLine = 2,
            DotLine = 3,
            DashDotLine = 4,
            DashDotDotLine = 5,
            CustomDashLine = 6,
            MPenStyle = 0x0f,
        }
        public enum PenCapStyle {
            FlatCap = 0x00,
            SquareCap = 0x10,
            RoundCap = 0x20,
            MPenCapStyle = 0x30,
        }
        public enum PenJoinStyle {
            MiterJoin = 0x00,
            BevelJoin = 0x40,
            RoundJoin = 0x80,
            SvgMiterJoin = 0x100,
            MPenJoinStyle = 0x1c0,
        }
        public enum BrushStyle {
            NoBrush = 0,
            SolidPattern = 1,
            Dense1Pattern = 2,
            Dense2Pattern = 3,
            Dense3Pattern = 4,
            Dense4Pattern = 5,
            Dense5Pattern = 6,
            Dense6Pattern = 7,
            Dense7Pattern = 8,
            HorPattern = 9,
            VerPattern = 10,
            CrossPattern = 11,
            BDiagPattern = 12,
            FDiagPattern = 13,
            DiagCrossPattern = 14,
            LinearGradientPattern = 15,
            RadialGradientPattern = 16,
            ConicalGradientPattern = 17,
            TexturePattern = 24,
        }
        public enum SizeMode {
            AbsoluteSize = 0,
            RelativeSize = 1,
        }
        public enum UIEffect {
            UI_General = 0,
            UI_AnimateMenu = 1,
            UI_FadeMenu = 2,
            UI_AnimateCombo = 3,
            UI_AnimateTooltip = 4,
            UI_FadeTooltip = 5,
            UI_AnimateToolBox = 6,
        }
        public enum CursorShape {
            ArrowCursor = 0,
            UpArrowCursor = 1,
            CrossCursor = 2,
            WaitCursor = 3,
            IBeamCursor = 4,
            SizeVerCursor = 5,
            SizeHorCursor = 6,
            SizeBDiagCursor = 7,
            SizeFDiagCursor = 8,
            SizeAllCursor = 9,
            BlankCursor = 10,
            SplitVCursor = 11,
            SplitHCursor = 12,
            PointingHandCursor = 13,
            ForbiddenCursor = 14,
            WhatsThisCursor = 15,
            BusyCursor = 16,
            OpenHandCursor = 17,
            ClosedHandCursor = 18,
            LastCursor = ClosedHandCursor,
            BitmapCursor = 24,
            CustomCursor = 25,
        }
        public enum TextFormat {
            PlainText = 0,
            RichText = 1,
            AutoText = 2,
            LogText = 3,
        }
        public enum AspectRatioMode {
            IgnoreAspectRatio = 0,
            KeepAspectRatio = 1,
            KeepAspectRatioByExpanding = 2,
        }
        public enum AnchorAttribute {
            AnchorName = 0,
            AnchorHref = 1,
        }
        public enum DockWidgetArea {
            LeftDockWidgetArea = 0x1,
            RightDockWidgetArea = 0x2,
            TopDockWidgetArea = 0x4,
            BottomDockWidgetArea = 0x8,
            DockWidgetArea_Mask = 0xf,
            AllDockWidgetAreas = DockWidgetArea_Mask,
            NoDockWidgetArea = 0,
        }
        public enum DockWidgetAreaSizes {
            NDockWidgetAreas = 4,
        }
        public enum ToolBarArea {
            LeftToolBarArea = 0x1,
            RightToolBarArea = 0x2,
            TopToolBarArea = 0x4,
            BottomToolBarArea = 0x8,
            ToolBarArea_Mask = 0xf,
            AllToolBarAreas = ToolBarArea_Mask,
            NoToolBarArea = 0,
        }
        public enum ToolBarAreaSizes {
            NToolBarAreas = 4,
        }
        public enum DateFormat {
            TextDate = 0,
            ISODate = 1,
            SystemLocaleDate = 2,
            LocalDate = SystemLocaleDate,
            LocaleDate = 3,
            SystemLocaleShortDate = 4,
            SystemLocaleLongDate = 5,
            DefaultLocaleShortDate = 6,
            DefaultLocaleLongDate = 7,
        }
        public enum TimeSpec {
            LocalTime = 0,
            UTC = 1,
            OffsetFromUTC = 2,
        }
        public enum DayOfWeek {
            Monday = 1,
            Tuesday = 2,
            Wednesday = 3,
            Thursday = 4,
            Friday = 5,
            Saturday = 6,
            Sunday = 7,
        }
        public enum ScrollBarPolicy {
            ScrollBarAsNeeded = 0,
            ScrollBarAlwaysOff = 1,
            ScrollBarAlwaysOn = 2,
        }
        public enum CaseSensitivity {
            CaseInsensitive = 0,
            CaseSensitive = 1,
        }
        public enum Corner {
            TopLeftCorner = 0x00000,
            TopRightCorner = 0x00001,
            BottomLeftCorner = 0x00002,
            BottomRightCorner = 0x00003,
        }
        public enum ConnectionType {
            AutoConnection = 0,
            DirectConnection = 1,
            QueuedConnection = 2,
            AutoCompatConnection = 3,
            BlockingQueuedConnection = 4,
        }
        public enum ShortcutContext {
            WidgetShortcut = 0,
            WindowShortcut = 1,
            ApplicationShortcut = 2,
            WidgetWithChildrenShortcut = 3,
        }
        public enum FillRule {
            OddEvenFill = 0,
            WindingFill = 1,
        }
        public enum MaskMode {
            MaskInColor = 0,
            MaskOutColor = 1,
        }
        public enum ClipOperation {
            NoClip = 0,
            ReplaceClip = 1,
            IntersectClip = 2,
            UniteClip = 3,
        }
        public enum ItemSelectionMode {
            ContainsItemShape = 0x0,
            IntersectsItemShape = 0x1,
            ContainsItemBoundingRect = 0x2,
            IntersectsItemBoundingRect = 0x3,
        }
        public enum TransformationMode {
            FastTransformation = 0,
            SmoothTransformation = 1,
        }
        public enum Axis {
            XAxis = 0,
            YAxis = 1,
            ZAxis = 2,
        }
        public enum FocusReason {
            MouseFocusReason = 0,
            TabFocusReason = 1,
            BacktabFocusReason = 2,
            ActiveWindowFocusReason = 3,
            PopupFocusReason = 4,
            ShortcutFocusReason = 5,
            MenuBarFocusReason = 6,
            OtherFocusReason = 7,
            NoFocusReason = 8,
        }
        public enum ContextMenuPolicy {
            NoContextMenu = 0,
            DefaultContextMenu = 1,
            ActionsContextMenu = 2,
            CustomContextMenu = 3,
            PreventContextMenu = 4,
        }
        public enum InputMethodQuery {
            ImMicroFocus = 0,
            ImFont = 1,
            ImCursorPosition = 2,
            ImSurroundingText = 3,
            ImCurrentSelection = 4,
        }
        public enum ToolButtonStyle {
            ToolButtonIconOnly = 0,
            ToolButtonTextOnly = 1,
            ToolButtonTextBesideIcon = 2,
            ToolButtonTextUnderIcon = 3,
        }
        public enum LayoutDirection {
            LeftToRight = 0,
            RightToLeft = 1,
        }
        public enum DropAction {
            CopyAction = 0x1,
            MoveAction = 0x2,
            LinkAction = 0x4,
            ActionMask = 0xff,
            TargetMoveAction = 0x8002,
            IgnoreAction = 0x0,
        }
        public enum CheckState {
            Unchecked = 0,
            PartiallyChecked = 1,
            Checked = 2,
        }
        public enum ItemDataRole {
            DisplayRole = 0,
            DecorationRole = 1,
            EditRole = 2,
            ToolTipRole = 3,
            StatusTipRole = 4,
            WhatsThisRole = 5,
            FontRole = 6,
            TextAlignmentRole = 7,
            BackgroundColorRole = 8,
            BackgroundRole = 8,
            TextColorRole = 9,
            ForegroundRole = 9,
            CheckStateRole = 10,
            AccessibleTextRole = 11,
            AccessibleDescriptionRole = 12,
            SizeHintRole = 13,
            DisplayPropertyRole = 27,
            DecorationPropertyRole = 28,
            ToolTipPropertyRole = 29,
            StatusTipPropertyRole = 30,
            WhatsThisPropertyRole = 31,
            UserRole = 32,
        }
        public enum ItemFlag {
            NoItemFlags = 0,
            ItemIsSelectable = 1,
            ItemIsEditable = 2,
            ItemIsDragEnabled = 4,
            ItemIsDropEnabled = 8,
            ItemIsUserCheckable = 16,
            ItemIsEnabled = 32,
            ItemIsTristate = 64,
        }
        public enum MatchFlag {
            MatchExactly = 0,
            MatchContains = 1,
            MatchStartsWith = 2,
            MatchEndsWith = 3,
            MatchRegExp = 4,
            MatchWildcard = 5,
            MatchFixedString = 8,
            MatchCaseSensitive = 16,
            MatchWrap = 32,
            MatchRecursive = 64,
        }
        public enum WindowModality {
            NonModal = 0,
            WindowModal = 1,
            ApplicationModal = 2,
        }
        public enum TextInteractionFlag {
            NoTextInteraction = 0,
            TextSelectableByMouse = 1,
            TextSelectableByKeyboard = 2,
            LinksAccessibleByMouse = 4,
            LinksAccessibleByKeyboard = 8,
            TextEditable = 16,
            TextEditorInteraction = TextSelectableByMouse|TextSelectableByKeyboard|TextEditable,
            TextBrowserInteraction = TextSelectableByMouse|LinksAccessibleByMouse|LinksAccessibleByKeyboard,
        }
        public enum EventPriority {
            HighEventPriority = 1,
            NormalEventPriority = 0,
            LowEventPriority = -1,
        }
        public enum SizeHint {
            MinimumSize = 0,
            PreferredSize = 1,
            MaximumSize = 2,
            MinimumDescent = 3,
            NSizeHints = 4,
        }
        public enum WindowFrameSection {
            NoSection = 0,
            LeftSection = 1,
            TopLeftSection = 2,
            TopSection = 3,
            TopRightSection = 4,
            RightSection = 5,
            BottomRightSection = 6,
            BottomSection = 7,
            BottomLeftSection = 8,
            TitleBarArea = 9,
        }
        public enum HitTestAccuracy {
            ExactHit = 0,
            FuzzyHit = 1,
        }
        public enum WhiteSpaceMode {
            WhiteSpaceNormal = 0,
            WhiteSpacePre = 1,
            WhiteSpaceNoWrap = 2,
            WhiteSpaceModeUndefined = -1,
        }
        // QtMsgHandler qInstallMsgHandler(QtMsgHandler arg1); >>>> NOT CONVERTED
        // void* qMalloc(size_t arg1); >>>> NOT CONVERTED
        // void qFree(void* arg1); >>>> NOT CONVERTED
        // void* qRealloc(void* arg1,size_t arg2); >>>> NOT CONVERTED
        // void* qMemCopy(void* arg1,const void* arg2,size_t arg3); >>>> NOT CONVERTED
        // void* qMemSet(void* arg1,int arg2,size_t arg3); >>>> NOT CONVERTED
        // void qRegisterStaticPluginInstanceFunction(QtPluginInstanceFunction arg1); >>>> NOT CONVERTED
        // int qvsnprintf(char* arg1,size_t arg2,const char* arg3,va_list arg4); >>>> NOT CONVERTED
        // QTextStream& operator>>(QTextStream& arg1,QTextStreamFunction arg2); >>>> NOT CONVERTED
        // QTextStream& operator<<(QTextStream& arg1,QTextStreamFunction arg2); >>>> NOT CONVERTED
        // QTextStream& operator<<(QTextStream& arg1,QTextStreamManipulator arg2); >>>> NOT CONVERTED
        // QTextStreamManipulator qSetFieldWidth(int arg1); >>>> NOT CONVERTED
        // QTextStreamManipulator qSetPadChar(QChar arg1); >>>> NOT CONVERTED
        // QTextStreamManipulator qSetRealNumberPrecision(int arg1); >>>> NOT CONVERTED
        // void qAddPostRoutine(QtCleanUpFunction arg1); >>>> NOT CONVERTED
        // void qRemovePostRoutine(QtCleanUpFunction arg1); >>>> NOT CONVERTED
        // bool qvariant_cast_helper(const QVariant& arg1,QVariant::Type arg2,void* arg3); >>>> NOT CONVERTED
        // bool operator==(const QVariant& arg1,const QVariantComparisonHelper& arg2); >>>> NOT CONVERTED
        public static bool MightBeRichText(string arg1) {
            return (bool) staticInterceptor.Invoke("mightBeRichText$", "mightBeRichText(const QString&)", typeof(bool), typeof(string), arg1);
        }
        public static string Escape(string plain) {
            return (string) staticInterceptor.Invoke("escape$", "escape(const QString&)", typeof(string), typeof(string), plain);
        }
        public static string ConvertFromPlainText(string plain, Qt.WhiteSpaceMode mode) {
            return (string) staticInterceptor.Invoke("convertFromPlainText$$", "convertFromPlainText(const QString&, Qt::WhiteSpaceMode)", typeof(string), typeof(string), plain, typeof(Qt.WhiteSpaceMode), mode);
        }
        public static string ConvertFromPlainText(string plain) {
            return (string) staticInterceptor.Invoke("convertFromPlainText$", "convertFromPlainText(const QString&)", typeof(string), typeof(string), plain);
        }
        public static QTextCodec CodecForHtml(QByteArray ba) {
            return (QTextCodec) staticInterceptor.Invoke("codecForHtml#", "codecForHtml(const QByteArray&)", typeof(QTextCodec), typeof(QByteArray), ba);
        }
        public static uint QHash(QHostAddress key) {
            return (uint) staticInterceptor.Invoke("qHash#", "qHash(const QHostAddress&)", typeof(uint), typeof(QHostAddress), key);
        }
        public static QDataStream Write(QDataStream arg1, QHostAddress arg2) {
            return (QDataStream) staticInterceptor.Invoke("operator<<##", "operator<<(QDataStream&, const QHostAddress&)", typeof(QDataStream), typeof(QDataStream), arg1, typeof(QHostAddress), arg2);
        }
        public static QDataStream Read(QDataStream arg1, QHostAddress arg2) {
            return (QDataStream) staticInterceptor.Invoke("operator>>##", "operator>>(QDataStream&, QHostAddress&)", typeof(QDataStream), typeof(QDataStream), arg1, typeof(QHostAddress), arg2);
        }
        public static QTextStream Write(QTextStream arg1, QDomNode arg2) {
            return (QTextStream) staticInterceptor.Invoke("operator<<##", "operator<<(QTextStream&, const QDomNode&)", typeof(QTextStream), typeof(QTextStream), arg1, typeof(QDomNode), arg2);
        }
        public static QDataStream Write(QDataStream arg1, QRect arg2) {
            return (QDataStream) staticInterceptor.Invoke("operator<<##", "operator<<(QDataStream&, const QRect&)", typeof(QDataStream), typeof(QDataStream), arg1, typeof(QRect), arg2);
        }
        public static QDataStream Read(QDataStream arg1, QRect arg2) {
            return (QDataStream) staticInterceptor.Invoke("operator>>##", "operator>>(QDataStream&, QRect&)", typeof(QDataStream), typeof(QDataStream), arg1, typeof(QRect), arg2);
        }
        public static QDataStream Write(QDataStream arg1, QRectF arg2) {
            return (QDataStream) staticInterceptor.Invoke("operator<<##", "operator<<(QDataStream&, const QRectF&)", typeof(QDataStream), typeof(QDataStream), arg1, typeof(QRectF), arg2);
        }
        public static QDataStream Read(QDataStream arg1, QRectF arg2) {
            return (QDataStream) staticInterceptor.Invoke("operator>>##", "operator>>(QDataStream&, QRectF&)", typeof(QDataStream), typeof(QDataStream), arg1, typeof(QRectF), arg2);
        }
        public static QDataStream Write(QDataStream arg1, QUuid arg2) {
            return (QDataStream) staticInterceptor.Invoke("operator<<##", "operator<<(QDataStream&, const QUuid&)", typeof(QDataStream), typeof(QDataStream), arg1, typeof(QUuid), arg2);
        }
        public static QDataStream Read(QDataStream arg1, QUuid arg2) {
            return (QDataStream) staticInterceptor.Invoke("operator>>##", "operator>>(QDataStream&, QUuid&)", typeof(QDataStream), typeof(QDataStream), arg1, typeof(QUuid), arg2);
        }
        public static string QFlagLocation(string method) {
            return (string) staticInterceptor.Invoke("qFlagLocation$", "qFlagLocation(const char*)", typeof(string), typeof(string), method);
        }
        public static int QRound(double d) {
            return (int) staticInterceptor.Invoke("qRound$", "qRound(qreal)", typeof(int), typeof(double), d);
        }
        public static long QRound64(double d) {
            return (long) staticInterceptor.Invoke("qRound64$", "qRound64(qreal)", typeof(long), typeof(double), d);
        }
        public static string QVersion() {
            return (string) staticInterceptor.Invoke("qVersion", "qVersion()", typeof(string));
        }
        public static bool QSharedBuild() {
            return (bool) staticInterceptor.Invoke("qSharedBuild", "qSharedBuild()", typeof(bool));
        }
        public static bool QFuzzyCompare(double p1, double p2) {
            return (bool) staticInterceptor.Invoke("qFuzzyCompare$$", "qFuzzyCompare(double, double)", typeof(bool), typeof(double), p1, typeof(double), p2);
        }
        public static bool QFuzzyCompare(float p1, float p2) {
            return (bool) staticInterceptor.Invoke("qFuzzyCompare$$", "qFuzzyCompare(float, float)", typeof(bool), typeof(float), p1, typeof(float), p2);
        }
        public static bool QIsNull(double d) {
            return (bool) staticInterceptor.Invoke("qIsNull$", "qIsNull(double)", typeof(bool), typeof(double), d);
        }
        public static bool QIsNull(float f) {
            return (bool) staticInterceptor.Invoke("qIsNull$", "qIsNull(float)", typeof(bool), typeof(float), f);
        }
        public static QByteArray Qgetenv(string varName) {
            return (QByteArray) staticInterceptor.Invoke("qgetenv$", "qgetenv(const char*)", typeof(QByteArray), typeof(string), varName);
        }
        public static bool Qputenv(string varName, QByteArray value) {
            return (bool) staticInterceptor.Invoke("qputenv$#", "qputenv(const char*, const QByteArray&)", typeof(bool), typeof(string), varName, typeof(QByteArray), value);
        }
        public static int QIntCast(double f) {
            return (int) staticInterceptor.Invoke("qIntCast$", "qIntCast(double)", typeof(int), typeof(double), f);
        }
        public static int QIntCast(float f) {
            return (int) staticInterceptor.Invoke("qIntCast$", "qIntCast(float)", typeof(int), typeof(float), f);
        }
        public static void Qsrand(uint seed) {
            staticInterceptor.Invoke("qsrand$", "qsrand(uint)", typeof(void), typeof(uint), seed);
        }
        public static int Qrand() {
            return (int) staticInterceptor.Invoke("qrand", "qrand()", typeof(int));
        }
        public static QDataStream Write(QDataStream arg1, QRegExp regExp) {
            return (QDataStream) staticInterceptor.Invoke("operator<<##", "operator<<(QDataStream&, const QRegExp&)", typeof(QDataStream), typeof(QDataStream), arg1, typeof(QRegExp), regExp);
        }
        public static QDataStream Read(QDataStream arg1, QRegExp regExp) {
            return (QDataStream) staticInterceptor.Invoke("operator>>##", "operator>>(QDataStream&, QRegExp&)", typeof(QDataStream), typeof(QDataStream), arg1, typeof(QRegExp), regExp);
        }
        public static QDataStream Write(QDataStream arg1, QLocale arg2) {
            return (QDataStream) staticInterceptor.Invoke("operator<<##", "operator<<(QDataStream&, const QLocale&)", typeof(QDataStream), typeof(QDataStream), arg1, typeof(QLocale), arg2);
        }
        public static QDataStream Read(QDataStream arg1, QLocale arg2) {
            return (QDataStream) staticInterceptor.Invoke("operator>>##", "operator>>(QDataStream&, QLocale&)", typeof(QDataStream), typeof(QDataStream), arg1, typeof(QLocale), arg2);
        }
        public static QDataStream Write(QDataStream arg1, QSize arg2) {
            return (QDataStream) staticInterceptor.Invoke("operator<<##", "operator<<(QDataStream&, const QSize&)", typeof(QDataStream), typeof(QDataStream), arg1, typeof(QSize), arg2);
        }
        public static QDataStream Read(QDataStream arg1, QSize arg2) {
            return (QDataStream) staticInterceptor.Invoke("operator>>##", "operator>>(QDataStream&, QSize&)", typeof(QDataStream), typeof(QDataStream), arg1, typeof(QSize), arg2);
        }
        public static QDataStream Write(QDataStream arg1, QSizeF arg2) {
            return (QDataStream) staticInterceptor.Invoke("operator<<##", "operator<<(QDataStream&, const QSizeF&)", typeof(QDataStream), typeof(QDataStream), arg1, typeof(QSizeF), arg2);
        }
        public static QDataStream Read(QDataStream arg1, QSizeF arg2) {
            return (QDataStream) staticInterceptor.Invoke("operator>>##", "operator>>(QDataStream&, QSizeF&)", typeof(QDataStream), typeof(QDataStream), arg1, typeof(QSizeF), arg2);
        }
        public static QDataStream Read(QDataStream arg1, List<string> list) {
            return (QDataStream) staticInterceptor.Invoke("operator>>#?", "operator>>(QDataStream&, QStringList&)", typeof(QDataStream), typeof(QDataStream), arg1, typeof(List<string>), list);
        }
        public static QDataStream Write(QDataStream arg1, List<string> list) {
            return (QDataStream) staticInterceptor.Invoke("operator<<#?", "operator<<(QDataStream&, const QStringList&)", typeof(QDataStream), typeof(QDataStream), arg1, typeof(List<string>), list);
        }
        public static QDataStream Write(QDataStream arg1, QLine arg2) {
            return (QDataStream) staticInterceptor.Invoke("operator<<##", "operator<<(QDataStream&, const QLine&)", typeof(QDataStream), typeof(QDataStream), arg1, typeof(QLine), arg2);
        }
        public static QDataStream Read(QDataStream arg1, QLine arg2) {
            return (QDataStream) staticInterceptor.Invoke("operator>>##", "operator>>(QDataStream&, QLine&)", typeof(QDataStream), typeof(QDataStream), arg1, typeof(QLine), arg2);
        }
        public static QDataStream Write(QDataStream arg1, QLineF arg2) {
            return (QDataStream) staticInterceptor.Invoke("operator<<##", "operator<<(QDataStream&, const QLineF&)", typeof(QDataStream), typeof(QDataStream), arg1, typeof(QLineF), arg2);
        }
        public static QDataStream Read(QDataStream arg1, QLineF arg2) {
            return (QDataStream) staticInterceptor.Invoke("operator>>##", "operator>>(QDataStream&, QLineF&)", typeof(QDataStream), typeof(QDataStream), arg1, typeof(QLineF), arg2);
        }
        public static uint QHash(QPersistentModelIndex index) {
            return (uint) staticInterceptor.Invoke("qHash#", "qHash(const QPersistentModelIndex&)", typeof(uint), typeof(QPersistentModelIndex), index);
        }
        public static uint QHash(QModelIndex index) {
            return (uint) staticInterceptor.Invoke("qHash#", "qHash(const QModelIndex&)", typeof(uint), typeof(QModelIndex), index);
        }
        public static Pointer<sbyte> Qstrdup(string arg1) {
            return (Pointer<sbyte>) staticInterceptor.Invoke("qstrdup$", "qstrdup(const char*)", typeof(Pointer<sbyte>), typeof(string), arg1);
        }
        public static uint Qstrlen(string str) {
            return (uint) staticInterceptor.Invoke("qstrlen$", "qstrlen(const char*)", typeof(uint), typeof(string), str);
        }
        public static uint Qstrnlen(string str, uint maxlen) {
            return (uint) staticInterceptor.Invoke("qstrnlen$$", "qstrnlen(const char*, uint)", typeof(uint), typeof(string), str, typeof(uint), maxlen);
        }
        public static Pointer<sbyte> Qstrcpy(Pointer<sbyte> dst, string src) {
            return (Pointer<sbyte>) staticInterceptor.Invoke("qstrcpy$$", "qstrcpy(char*, const char*)", typeof(Pointer<sbyte>), typeof(Pointer<sbyte>), dst, typeof(string), src);
        }
        public static Pointer<sbyte> Qstrncpy(Pointer<sbyte> dst, string src, uint len) {
            return (Pointer<sbyte>) staticInterceptor.Invoke("qstrncpy$$$", "qstrncpy(char*, const char*, uint)", typeof(Pointer<sbyte>), typeof(Pointer<sbyte>), dst, typeof(string), src, typeof(uint), len);
        }
        public static int Qstrcmp(string str1, string str2) {
            return (int) staticInterceptor.Invoke("qstrcmp$$", "qstrcmp(const char*, const char*)", typeof(int), typeof(string), str1, typeof(string), str2);
        }
        public static int Qstrcmp(QByteArray str1, QByteArray str2) {
            return (int) staticInterceptor.Invoke("qstrcmp##", "qstrcmp(const QByteArray&, const QByteArray&)", typeof(int), typeof(QByteArray), str1, typeof(QByteArray), str2);
        }
        public static int Qstrcmp(QByteArray str1, string str2) {
            return (int) staticInterceptor.Invoke("qstrcmp#$", "qstrcmp(const QByteArray&, const char*)", typeof(int), typeof(QByteArray), str1, typeof(string), str2);
        }
        public static int Qstrcmp(string str1, QByteArray str2) {
            return (int) staticInterceptor.Invoke("qstrcmp$#", "qstrcmp(const char*, const QByteArray&)", typeof(int), typeof(string), str1, typeof(QByteArray), str2);
        }
        public static int Qstrncmp(string str1, string str2, uint len) {
            return (int) staticInterceptor.Invoke("qstrncmp$$$", "qstrncmp(const char*, const char*, uint)", typeof(int), typeof(string), str1, typeof(string), str2, typeof(uint), len);
        }
        public static int Qstricmp(string arg1, string arg2) {
            return (int) staticInterceptor.Invoke("qstricmp$$", "qstricmp(const char*, const char*)", typeof(int), typeof(string), arg1, typeof(string), arg2);
        }
        public static int Qstrnicmp(string arg1, string arg2, uint len) {
            return (int) staticInterceptor.Invoke("qstrnicmp$$$", "qstrnicmp(const char*, const char*, uint)", typeof(int), typeof(string), arg1, typeof(string), arg2, typeof(uint), len);
        }
        public static ushort QChecksum(string s, uint len) {
            return (ushort) staticInterceptor.Invoke("qChecksum$$", "qChecksum(const char*, uint)", typeof(ushort), typeof(string), s, typeof(uint), len);
        }
        public static QDataStream Write(QDataStream arg1, QByteArray arg2) {
            return (QDataStream) staticInterceptor.Invoke("operator<<##", "operator<<(QDataStream&, const QByteArray&)", typeof(QDataStream), typeof(QDataStream), arg1, typeof(QByteArray), arg2);
        }
        public static QDataStream Read(QDataStream arg1, QByteArray arg2) {
            return (QDataStream) staticInterceptor.Invoke("operator>>##", "operator>>(QDataStream&, QByteArray&)", typeof(QDataStream), typeof(QDataStream), arg1, typeof(QByteArray), arg2);
        }
        public static QByteArray QCompress(Pointer<byte> data, int nbytes, int compressionLevel) {
            return (QByteArray) staticInterceptor.Invoke("qCompress$$$", "qCompress(const unsigned char*, int, int)", typeof(QByteArray), typeof(Pointer<byte>), data, typeof(int), nbytes, typeof(int), compressionLevel);
        }
        public static QByteArray QCompress(Pointer<byte> data, int nbytes) {
            return (QByteArray) staticInterceptor.Invoke("qCompress$$", "qCompress(const unsigned char*, int)", typeof(QByteArray), typeof(Pointer<byte>), data, typeof(int), nbytes);
        }
        public static QByteArray QUncompress(Pointer<byte> data, int nbytes) {
            return (QByteArray) staticInterceptor.Invoke("qUncompress$$", "qUncompress(const unsigned char*, int)", typeof(QByteArray), typeof(Pointer<byte>), data, typeof(int), nbytes);
        }
        public static QByteArray QCompress(QByteArray data, int compressionLevel) {
            return (QByteArray) staticInterceptor.Invoke("qCompress#$", "qCompress(const QByteArray&, int)", typeof(QByteArray), typeof(QByteArray), data, typeof(int), compressionLevel);
        }
        public static QByteArray QCompress(QByteArray data) {
            return (QByteArray) staticInterceptor.Invoke("qCompress#", "qCompress(const QByteArray&)", typeof(QByteArray), typeof(QByteArray), data);
        }
        public static QByteArray QUncompress(QByteArray data) {
            return (QByteArray) staticInterceptor.Invoke("qUncompress#", "qUncompress(const QByteArray&)", typeof(QByteArray), typeof(QByteArray), data);
        }
        public static QTextStream Bin(QTextStream s) {
            return (QTextStream) staticInterceptor.Invoke("bin#", "bin(QTextStream&)", typeof(QTextStream), typeof(QTextStream), s);
        }
        public static QTextStream Oct(QTextStream s) {
            return (QTextStream) staticInterceptor.Invoke("oct#", "oct(QTextStream&)", typeof(QTextStream), typeof(QTextStream), s);
        }
        public static QTextStream Dec(QTextStream s) {
            return (QTextStream) staticInterceptor.Invoke("dec#", "dec(QTextStream&)", typeof(QTextStream), typeof(QTextStream), s);
        }
        public static QTextStream Hex(QTextStream s) {
            return (QTextStream) staticInterceptor.Invoke("hex#", "hex(QTextStream&)", typeof(QTextStream), typeof(QTextStream), s);
        }
        public static QTextStream Showbase(QTextStream s) {
            return (QTextStream) staticInterceptor.Invoke("showbase#", "showbase(QTextStream&)", typeof(QTextStream), typeof(QTextStream), s);
        }
        public static QTextStream Forcesign(QTextStream s) {
            return (QTextStream) staticInterceptor.Invoke("forcesign#", "forcesign(QTextStream&)", typeof(QTextStream), typeof(QTextStream), s);
        }
        public static QTextStream Forcepoint(QTextStream s) {
            return (QTextStream) staticInterceptor.Invoke("forcepoint#", "forcepoint(QTextStream&)", typeof(QTextStream), typeof(QTextStream), s);
        }
        public static QTextStream Noshowbase(QTextStream s) {
            return (QTextStream) staticInterceptor.Invoke("noshowbase#", "noshowbase(QTextStream&)", typeof(QTextStream), typeof(QTextStream), s);
        }
        public static QTextStream Noforcesign(QTextStream s) {
            return (QTextStream) staticInterceptor.Invoke("noforcesign#", "noforcesign(QTextStream&)", typeof(QTextStream), typeof(QTextStream), s);
        }
        public static QTextStream Noforcepoint(QTextStream s) {
            return (QTextStream) staticInterceptor.Invoke("noforcepoint#", "noforcepoint(QTextStream&)", typeof(QTextStream), typeof(QTextStream), s);
        }
        public static QTextStream Uppercasebase(QTextStream s) {
            return (QTextStream) staticInterceptor.Invoke("uppercasebase#", "uppercasebase(QTextStream&)", typeof(QTextStream), typeof(QTextStream), s);
        }
        public static QTextStream Uppercasedigits(QTextStream s) {
            return (QTextStream) staticInterceptor.Invoke("uppercasedigits#", "uppercasedigits(QTextStream&)", typeof(QTextStream), typeof(QTextStream), s);
        }
        public static QTextStream Lowercasebase(QTextStream s) {
            return (QTextStream) staticInterceptor.Invoke("lowercasebase#", "lowercasebase(QTextStream&)", typeof(QTextStream), typeof(QTextStream), s);
        }
        public static QTextStream Lowercasedigits(QTextStream s) {
            return (QTextStream) staticInterceptor.Invoke("lowercasedigits#", "lowercasedigits(QTextStream&)", typeof(QTextStream), typeof(QTextStream), s);
        }
        public static QTextStream Fixed(QTextStream s) {
            return (QTextStream) staticInterceptor.Invoke("fixed#", "fixed(QTextStream&)", typeof(QTextStream), typeof(QTextStream), s);
        }
        public static QTextStream Scientific(QTextStream s) {
            return (QTextStream) staticInterceptor.Invoke("scientific#", "scientific(QTextStream&)", typeof(QTextStream), typeof(QTextStream), s);
        }
        public static QTextStream Left(QTextStream s) {
            return (QTextStream) staticInterceptor.Invoke("left#", "left(QTextStream&)", typeof(QTextStream), typeof(QTextStream), s);
        }
        public static QTextStream Right(QTextStream s) {
            return (QTextStream) staticInterceptor.Invoke("right#", "right(QTextStream&)", typeof(QTextStream), typeof(QTextStream), s);
        }
        public static QTextStream Center(QTextStream s) {
            return (QTextStream) staticInterceptor.Invoke("center#", "center(QTextStream&)", typeof(QTextStream), typeof(QTextStream), s);
        }
        public static QTextStream Endl(QTextStream s) {
            return (QTextStream) staticInterceptor.Invoke("endl#", "endl(QTextStream&)", typeof(QTextStream), typeof(QTextStream), s);
        }
        public static QTextStream Flush(QTextStream s) {
            return (QTextStream) staticInterceptor.Invoke("flush#", "flush(QTextStream&)", typeof(QTextStream), typeof(QTextStream), s);
        }
        public static QTextStream Reset(QTextStream s) {
            return (QTextStream) staticInterceptor.Invoke("reset#", "reset(QTextStream&)", typeof(QTextStream), typeof(QTextStream), s);
        }
        public static QTextStream Bom(QTextStream s) {
            return (QTextStream) staticInterceptor.Invoke("bom#", "bom(QTextStream&)", typeof(QTextStream), typeof(QTextStream), s);
        }
        public static QTextStream Ws(QTextStream s) {
            return (QTextStream) staticInterceptor.Invoke("ws#", "ws(QTextStream&)", typeof(QTextStream), typeof(QTextStream), s);
        }
        public static QDataStream Write(QDataStream arg1, QBitArray arg2) {
            return (QDataStream) staticInterceptor.Invoke("operator<<##", "operator<<(QDataStream&, const QBitArray&)", typeof(QDataStream), typeof(QDataStream), arg1, typeof(QBitArray), arg2);
        }
        public static QDataStream Read(QDataStream arg1, QBitArray arg2) {
            return (QDataStream) staticInterceptor.Invoke("operator>>##", "operator>>(QDataStream&, QBitArray&)", typeof(QDataStream), typeof(QDataStream), arg1, typeof(QBitArray), arg2);
        }
        public static QDataStream Write(QDataStream arg1, QDate arg2) {
            return (QDataStream) staticInterceptor.Invoke("operator<<##", "operator<<(QDataStream&, const QDate&)", typeof(QDataStream), typeof(QDataStream), arg1, typeof(QDate), arg2);
        }
        public static QDataStream Read(QDataStream arg1, QDate arg2) {
            return (QDataStream) staticInterceptor.Invoke("operator>>##", "operator>>(QDataStream&, QDate&)", typeof(QDataStream), typeof(QDataStream), arg1, typeof(QDate), arg2);
        }
        public static QDataStream Write(QDataStream arg1, QTime arg2) {
            return (QDataStream) staticInterceptor.Invoke("operator<<##", "operator<<(QDataStream&, const QTime&)", typeof(QDataStream), typeof(QDataStream), arg1, typeof(QTime), arg2);
        }
        public static QDataStream Read(QDataStream arg1, QTime arg2) {
            return (QDataStream) staticInterceptor.Invoke("operator>>##", "operator>>(QDataStream&, QTime&)", typeof(QDataStream), typeof(QDataStream), arg1, typeof(QTime), arg2);
        }
        public static QDataStream Write(QDataStream arg1, QDateTime arg2) {
            return (QDataStream) staticInterceptor.Invoke("operator<<##", "operator<<(QDataStream&, const QDateTime&)", typeof(QDataStream), typeof(QDataStream), arg1, typeof(QDateTime), arg2);
        }
        public static QDataStream Read(QDataStream arg1, QDateTime arg2) {
            return (QDataStream) staticInterceptor.Invoke("operator>>##", "operator>>(QDataStream&, QDateTime&)", typeof(QDataStream), typeof(QDataStream), arg1, typeof(QDateTime), arg2);
        }
        public static QDataStream Write(QDataStream arg1, QPoint arg2) {
            return (QDataStream) staticInterceptor.Invoke("operator<<##", "operator<<(QDataStream&, const QPoint&)", typeof(QDataStream), typeof(QDataStream), arg1, typeof(QPoint), arg2);
        }
        public static QDataStream Read(QDataStream arg1, QPoint arg2) {
            return (QDataStream) staticInterceptor.Invoke("operator>>##", "operator>>(QDataStream&, QPoint&)", typeof(QDataStream), typeof(QDataStream), arg1, typeof(QPoint), arg2);
        }
        public static QDataStream Write(QDataStream arg1, QPointF arg2) {
            return (QDataStream) staticInterceptor.Invoke("operator<<##", "operator<<(QDataStream&, const QPointF&)", typeof(QDataStream), typeof(QDataStream), arg1, typeof(QPointF), arg2);
        }
        public static QDataStream Read(QDataStream arg1, QPointF arg2) {
            return (QDataStream) staticInterceptor.Invoke("operator>>##", "operator>>(QDataStream&, QPointF&)", typeof(QDataStream), typeof(QDataStream), arg1, typeof(QPointF), arg2);
        }
        public static string QAppName() {
            return (string) staticInterceptor.Invoke("qAppName", "qAppName()", typeof(string));
        }
        public static QDataStream Read(QDataStream s, QVariant p) {
            return (QDataStream) staticInterceptor.Invoke("operator>>##", "operator>>(QDataStream&, QVariant&)", typeof(QDataStream), typeof(QDataStream), s, typeof(QVariant), p);
        }
        public static QDataStream Write(QDataStream s, QVariant p) {
            return (QDataStream) staticInterceptor.Invoke("operator<<##", "operator<<(QDataStream&, const QVariant&)", typeof(QDataStream), typeof(QDataStream), s, typeof(QVariant), p);
        }
        public static QDataStream Read(QDataStream s, QVariant.TypeOf p) {
            return (QDataStream) staticInterceptor.Invoke("operator>>#$", "operator>>(QDataStream&, QVariant::Type&)", typeof(QDataStream), typeof(QDataStream), s, typeof(QVariant.TypeOf), p);
        }
        public static QDataStream Write(QDataStream s, QVariant.TypeOf p) {
            return (QDataStream) staticInterceptor.Invoke("operator<<#$", "operator<<(QDataStream&, const QVariant::Type)", typeof(QDataStream), typeof(QDataStream), s, typeof(QVariant.TypeOf), p);
        }
        public static QDataStream Write(QDataStream arg1, QUrl arg2) {
            return (QDataStream) staticInterceptor.Invoke("operator<<##", "operator<<(QDataStream&, const QUrl&)", typeof(QDataStream), typeof(QDataStream), arg1, typeof(QUrl), arg2);
        }
        public static QDataStream Read(QDataStream arg1, QUrl arg2) {
            return (QDataStream) staticInterceptor.Invoke("operator>>##", "operator>>(QDataStream&, QUrl&)", typeof(QDataStream), typeof(QDataStream), arg1, typeof(QUrl), arg2);
        }
        public static QDataStream Write(QDataStream arg1, QChar arg2) {
            return (QDataStream) staticInterceptor.Invoke("operator<<##", "operator<<(QDataStream&, const QChar&)", typeof(QDataStream), typeof(QDataStream), arg1, typeof(QChar), arg2);
        }
        public static QDataStream Read(QDataStream arg1, QChar arg2) {
            return (QDataStream) staticInterceptor.Invoke("operator>>##", "operator>>(QDataStream&, QChar&)", typeof(QDataStream), typeof(QDataStream), arg1, typeof(QChar), arg2);
        }
        public static void QDBusReplyFill(QDBusMessage reply, QDBusError error, QVariant data) {
            staticInterceptor.Invoke("qDBusReplyFill###", "qDBusReplyFill(const QDBusMessage&, QDBusError&, QVariant&)", typeof(void), typeof(QDBusMessage), reply, typeof(QDBusError), error, typeof(QVariant), data);
        }
        public static QDBusArgument Read(QDBusArgument a, QVariant v) {
            return (QDBusArgument) staticInterceptor.Invoke("operator>>##", "operator>>(const QDBusArgument&, QVariant&)", typeof(QDBusArgument), typeof(QDBusArgument), a, typeof(QVariant), v);
        }
        public static QDBusArgument Read(QDBusArgument a, QDate date) {
            return (QDBusArgument) staticInterceptor.Invoke("operator>>##", "operator>>(const QDBusArgument&, QDate&)", typeof(QDBusArgument), typeof(QDBusArgument), a, typeof(QDate), date);
        }
        public static QDBusArgument Write(QDBusArgument a, QDate date) {
            return (QDBusArgument) staticInterceptor.Invoke("operator<<##", "operator<<(QDBusArgument&, const QDate&)", typeof(QDBusArgument), typeof(QDBusArgument), a, typeof(QDate), date);
        }
        public static QDBusArgument Read(QDBusArgument a, QTime time) {
            return (QDBusArgument) staticInterceptor.Invoke("operator>>##", "operator>>(const QDBusArgument&, QTime&)", typeof(QDBusArgument), typeof(QDBusArgument), a, typeof(QTime), time);
        }
        public static QDBusArgument Write(QDBusArgument a, QTime time) {
            return (QDBusArgument) staticInterceptor.Invoke("operator<<##", "operator<<(QDBusArgument&, const QTime&)", typeof(QDBusArgument), typeof(QDBusArgument), a, typeof(QTime), time);
        }
        public static QDBusArgument Read(QDBusArgument a, QDateTime dt) {
            return (QDBusArgument) staticInterceptor.Invoke("operator>>##", "operator>>(const QDBusArgument&, QDateTime&)", typeof(QDBusArgument), typeof(QDBusArgument), a, typeof(QDateTime), dt);
        }
        public static QDBusArgument Write(QDBusArgument a, QDateTime dt) {
            return (QDBusArgument) staticInterceptor.Invoke("operator<<##", "operator<<(QDBusArgument&, const QDateTime&)", typeof(QDBusArgument), typeof(QDBusArgument), a, typeof(QDateTime), dt);
        }
        public static QDBusArgument Read(QDBusArgument a, QRect rect) {
            return (QDBusArgument) staticInterceptor.Invoke("operator>>##", "operator>>(const QDBusArgument&, QRect&)", typeof(QDBusArgument), typeof(QDBusArgument), a, typeof(QRect), rect);
        }
        public static QDBusArgument Write(QDBusArgument a, QRect rect) {
            return (QDBusArgument) staticInterceptor.Invoke("operator<<##", "operator<<(QDBusArgument&, const QRect&)", typeof(QDBusArgument), typeof(QDBusArgument), a, typeof(QRect), rect);
        }
        public static QDBusArgument Read(QDBusArgument a, QRectF rect) {
            return (QDBusArgument) staticInterceptor.Invoke("operator>>##", "operator>>(const QDBusArgument&, QRectF&)", typeof(QDBusArgument), typeof(QDBusArgument), a, typeof(QRectF), rect);
        }
        public static QDBusArgument Write(QDBusArgument a, QRectF rect) {
            return (QDBusArgument) staticInterceptor.Invoke("operator<<##", "operator<<(QDBusArgument&, const QRectF&)", typeof(QDBusArgument), typeof(QDBusArgument), a, typeof(QRectF), rect);
        }
        public static QDBusArgument Read(QDBusArgument a, QSize size) {
            return (QDBusArgument) staticInterceptor.Invoke("operator>>##", "operator>>(const QDBusArgument&, QSize&)", typeof(QDBusArgument), typeof(QDBusArgument), a, typeof(QSize), size);
        }
        public static QDBusArgument Write(QDBusArgument a, QSize size) {
            return (QDBusArgument) staticInterceptor.Invoke("operator<<##", "operator<<(QDBusArgument&, const QSize&)", typeof(QDBusArgument), typeof(QDBusArgument), a, typeof(QSize), size);
        }
        public static QDBusArgument Read(QDBusArgument a, QSizeF size) {
            return (QDBusArgument) staticInterceptor.Invoke("operator>>##", "operator>>(const QDBusArgument&, QSizeF&)", typeof(QDBusArgument), typeof(QDBusArgument), a, typeof(QSizeF), size);
        }
        public static QDBusArgument Write(QDBusArgument a, QSizeF size) {
            return (QDBusArgument) staticInterceptor.Invoke("operator<<##", "operator<<(QDBusArgument&, const QSizeF&)", typeof(QDBusArgument), typeof(QDBusArgument), a, typeof(QSizeF), size);
        }
        public static QDBusArgument Read(QDBusArgument a, QPoint pt) {
            return (QDBusArgument) staticInterceptor.Invoke("operator>>##", "operator>>(const QDBusArgument&, QPoint&)", typeof(QDBusArgument), typeof(QDBusArgument), a, typeof(QPoint), pt);
        }
        public static QDBusArgument Write(QDBusArgument a, QPoint pt) {
            return (QDBusArgument) staticInterceptor.Invoke("operator<<##", "operator<<(QDBusArgument&, const QPoint&)", typeof(QDBusArgument), typeof(QDBusArgument), a, typeof(QPoint), pt);
        }
        public static QDBusArgument Read(QDBusArgument a, QPointF pt) {
            return (QDBusArgument) staticInterceptor.Invoke("operator>>##", "operator>>(const QDBusArgument&, QPointF&)", typeof(QDBusArgument), typeof(QDBusArgument), a, typeof(QPointF), pt);
        }
        public static QDBusArgument Write(QDBusArgument a, QPointF pt) {
            return (QDBusArgument) staticInterceptor.Invoke("operator<<##", "operator<<(QDBusArgument&, const QPointF&)", typeof(QDBusArgument), typeof(QDBusArgument), a, typeof(QPointF), pt);
        }
        public static QDBusArgument Read(QDBusArgument a, QLine line) {
            return (QDBusArgument) staticInterceptor.Invoke("operator>>##", "operator>>(const QDBusArgument&, QLine&)", typeof(QDBusArgument), typeof(QDBusArgument), a, typeof(QLine), line);
        }
        public static QDBusArgument Write(QDBusArgument a, QLine line) {
            return (QDBusArgument) staticInterceptor.Invoke("operator<<##", "operator<<(QDBusArgument&, const QLine&)", typeof(QDBusArgument), typeof(QDBusArgument), a, typeof(QLine), line);
        }
        public static QDBusArgument Read(QDBusArgument a, QLineF line) {
            return (QDBusArgument) staticInterceptor.Invoke("operator>>##", "operator>>(const QDBusArgument&, QLineF&)", typeof(QDBusArgument), typeof(QDBusArgument), a, typeof(QLineF), line);
        }
        public static QDBusArgument Write(QDBusArgument a, QLineF line) {
            return (QDBusArgument) staticInterceptor.Invoke("operator<<##", "operator<<(QDBusArgument&, const QLineF&)", typeof(QDBusArgument), typeof(QDBusArgument), a, typeof(QLineF), line);
        }
        public static QDBusArgument Write(QDBusArgument arg, List<QVariant> list) {
            return (QDBusArgument) staticInterceptor.Invoke("operator<<#?", "operator<<(QDBusArgument&, const QList<QVariant>&)", typeof(QDBusArgument), typeof(QDBusArgument), arg, typeof(List<QVariant>), list);
        }
        public static QDBusArgument Write(QDBusArgument arg, Dictionary<string, QVariant> map) {
            return (QDBusArgument) staticInterceptor.Invoke("operator<<#?", "operator<<(QDBusArgument&, const QMap<QString,QVariant>&)", typeof(QDBusArgument), typeof(QDBusArgument), arg, typeof(Dictionary<string, QVariant>), map);
        }
        public static uint QHash(string key) {
            return (uint) staticInterceptor.Invoke("qHash$", "qHash(const QString&)", typeof(uint), typeof(string), key);
        }
        public static uint QHash(QDBusObjectPath objectPath) {
            return (uint) staticInterceptor.Invoke("qHash$", "qHash(const QDBusObjectPath&)", typeof(uint), typeof(QDBusObjectPath), objectPath);
        }
        public static uint QHash(QDBusSignature signature) {
            return (uint) staticInterceptor.Invoke("qHash$", "qHash(const QDBusSignature&)", typeof(uint), typeof(QDBusSignature), signature);
        }
        public static QDataStream Write(QDataStream arg1, QBrush arg2) {
            return (QDataStream) staticInterceptor.Invoke("operator<<##", "operator<<(QDataStream&, const QBrush&)", typeof(QDataStream), typeof(QDataStream), arg1, typeof(QBrush), arg2);
        }
        public static QDataStream Read(QDataStream arg1, QBrush arg2) {
            return (QDataStream) staticInterceptor.Invoke("operator>>##", "operator>>(QDataStream&, QBrush&)", typeof(QDataStream), typeof(QDataStream), arg1, typeof(QBrush), arg2);
        }
        public static QDataStream Write(QDataStream ds, QPalette p) {
            return (QDataStream) staticInterceptor.Invoke("operator<<##", "operator<<(QDataStream&, const QPalette&)", typeof(QDataStream), typeof(QDataStream), ds, typeof(QPalette), p);
        }
        public static QDataStream Read(QDataStream ds, QPalette p) {
            return (QDataStream) staticInterceptor.Invoke("operator>>##", "operator>>(QDataStream&, QPalette&)", typeof(QDataStream), typeof(QDataStream), ds, typeof(QPalette), p);
        }
        public static QTextStream Write(QTextStream arg1, QSplitter arg2) {
            return (QTextStream) staticInterceptor.Invoke("operator<<##", "operator<<(QTextStream&, const QSplitter&)", typeof(QTextStream), typeof(QTextStream), arg1, typeof(QSplitter), arg2);
        }
        public static QTextStream Read(QTextStream arg1, QSplitter arg2) {
            return (QTextStream) staticInterceptor.Invoke("operator>>##", "operator>>(QTextStream&, QSplitter&)", typeof(QTextStream), typeof(QTextStream), arg1, typeof(QSplitter), arg2);
        }
        public static QDataStream Write(QDataStream arg1, QImage arg2) {
            return (QDataStream) staticInterceptor.Invoke("operator<<##", "operator<<(QDataStream&, const QImage&)", typeof(QDataStream), typeof(QDataStream), arg1, typeof(QImage), arg2);
        }
        public static QDataStream Read(QDataStream arg1, QImage arg2) {
            return (QDataStream) staticInterceptor.Invoke("operator>>##", "operator>>(QDataStream&, QImage&)", typeof(QDataStream), typeof(QDataStream), arg1, typeof(QImage), arg2);
        }
        public static int QRed(uint rgb) {
            return (int) staticInterceptor.Invoke("qRed$", "qRed(unsigned int)", typeof(int), typeof(uint), rgb);
        }
        public static int QGreen(uint rgb) {
            return (int) staticInterceptor.Invoke("qGreen$", "qGreen(unsigned int)", typeof(int), typeof(uint), rgb);
        }
        public static int QBlue(uint rgb) {
            return (int) staticInterceptor.Invoke("qBlue$", "qBlue(unsigned int)", typeof(int), typeof(uint), rgb);
        }
        public static int QAlpha(uint rgb) {
            return (int) staticInterceptor.Invoke("qAlpha$", "qAlpha(unsigned int)", typeof(int), typeof(uint), rgb);
        }
        public static uint QRgb(int r, int g, int b) {
            return (uint) staticInterceptor.Invoke("qRgb$$$", "qRgb(int, int, int)", typeof(uint), typeof(int), r, typeof(int), g, typeof(int), b);
        }
        public static uint QRgba(int r, int g, int b, int a) {
            return (uint) staticInterceptor.Invoke("qRgba$$$$", "qRgba(int, int, int, int)", typeof(uint), typeof(int), r, typeof(int), g, typeof(int), b, typeof(int), a);
        }
        public static int QGray(int r, int g, int b) {
            return (int) staticInterceptor.Invoke("qGray$$$", "qGray(int, int, int)", typeof(int), typeof(int), r, typeof(int), g, typeof(int), b);
        }
        public static int QGray(uint rgb) {
            return (int) staticInterceptor.Invoke("qGray$", "qGray(unsigned int)", typeof(int), typeof(uint), rgb);
        }
        public static bool QIsGray(uint rgb) {
            return (bool) staticInterceptor.Invoke("qIsGray$", "qIsGray(unsigned int)", typeof(bool), typeof(uint), rgb);
        }
        public static QDataStream Write(QDataStream arg1, QMatrix arg2) {
            return (QDataStream) staticInterceptor.Invoke("operator<<##", "operator<<(QDataStream&, const QMatrix&)", typeof(QDataStream), typeof(QDataStream), arg1, typeof(QMatrix), arg2);
        }
        public static QDataStream Read(QDataStream arg1, QMatrix arg2) {
            return (QDataStream) staticInterceptor.Invoke("operator>>##", "operator>>(QDataStream&, QMatrix&)", typeof(QDataStream), typeof(QDataStream), arg1, typeof(QMatrix), arg2);
        }
        public static QDataStream Write(QDataStream arg1, QTextLength arg2) {
            return (QDataStream) staticInterceptor.Invoke("operator<<##", "operator<<(QDataStream&, const QTextLength&)", typeof(QDataStream), typeof(QDataStream), arg1, typeof(QTextLength), arg2);
        }
        public static QDataStream Read(QDataStream arg1, QTextLength arg2) {
            return (QDataStream) staticInterceptor.Invoke("operator>>##", "operator>>(QDataStream&, QTextLength&)", typeof(QDataStream), typeof(QDataStream), arg1, typeof(QTextLength), arg2);
        }
        public static QDataStream Write(QDataStream arg1, QTextFormat arg2) {
            return (QDataStream) staticInterceptor.Invoke("operator<<##", "operator<<(QDataStream&, const QTextFormat&)", typeof(QDataStream), typeof(QDataStream), arg1, typeof(QTextFormat), arg2);
        }
        public static QDataStream Read(QDataStream arg1, QTextFormat arg2) {
            return (QDataStream) staticInterceptor.Invoke("operator>>##", "operator>>(QDataStream&, QTextFormat&)", typeof(QDataStream), typeof(QDataStream), arg1, typeof(QTextFormat), arg2);
        }
        public static QDataStream Write(QDataStream arg1, QSizePolicy arg2) {
            return (QDataStream) staticInterceptor.Invoke("operator<<##", "operator<<(QDataStream&, const QSizePolicy&)", typeof(QDataStream), typeof(QDataStream), arg1, typeof(QSizePolicy), arg2);
        }
        public static QDataStream Read(QDataStream arg1, QSizePolicy arg2) {
            return (QDataStream) staticInterceptor.Invoke("operator>>##", "operator>>(QDataStream&, QSizePolicy&)", typeof(QDataStream), typeof(QDataStream), arg1, typeof(QSizePolicy), arg2);
        }
        public static QDataStream Write(QDataStream arg1, QPainterPath arg2) {
            return (QDataStream) staticInterceptor.Invoke("operator<<##", "operator<<(QDataStream&, const QPainterPath&)", typeof(QDataStream), typeof(QDataStream), arg1, typeof(QPainterPath), arg2);
        }
        public static QDataStream Read(QDataStream arg1, QPainterPath arg2) {
            return (QDataStream) staticInterceptor.Invoke("operator>>##", "operator>>(QDataStream&, QPainterPath&)", typeof(QDataStream), typeof(QDataStream), arg1, typeof(QPainterPath), arg2);
        }
        public static QDataStream Write(QDataStream arg1, QColor arg2) {
            return (QDataStream) staticInterceptor.Invoke("operator<<##", "operator<<(QDataStream&, const QColor&)", typeof(QDataStream), typeof(QDataStream), arg1, typeof(QColor), arg2);
        }
        public static QDataStream Read(QDataStream arg1, QColor arg2) {
            return (QDataStream) staticInterceptor.Invoke("operator>>##", "operator>>(QDataStream&, QColor&)", typeof(QDataStream), typeof(QDataStream), arg1, typeof(QColor), arg2);
        }
        public static QDataStream Read(QDataStream arg1, QTableWidgetItem item) {
            return (QDataStream) staticInterceptor.Invoke("operator>>##", "operator>>(QDataStream&, QTableWidgetItem&)", typeof(QDataStream), typeof(QDataStream), arg1, typeof(QTableWidgetItem), item);
        }
        public static QDataStream Write(QDataStream arg1, QTableWidgetItem item) {
            return (QDataStream) staticInterceptor.Invoke("operator<<##", "operator<<(QDataStream&, const QTableWidgetItem&)", typeof(QDataStream), typeof(QDataStream), arg1, typeof(QTableWidgetItem), item);
        }
        public static void QDrawShadeLine(QPainter p, int x1, int y1, int x2, int y2, QPalette pal, bool sunken, int lineWidth, int midLineWidth) {
            staticInterceptor.Invoke("qDrawShadeLine#$$$$#$$$", "qDrawShadeLine(QPainter*, int, int, int, int, const QPalette&, bool, int, int)", typeof(void), typeof(QPainter), p, typeof(int), x1, typeof(int), y1, typeof(int), x2, typeof(int), y2, typeof(QPalette), pal, typeof(bool), sunken, typeof(int), lineWidth, typeof(int), midLineWidth);
        }
        public static void QDrawShadeLine(QPainter p, int x1, int y1, int x2, int y2, QPalette pal, bool sunken, int lineWidth) {
            staticInterceptor.Invoke("qDrawShadeLine#$$$$#$$", "qDrawShadeLine(QPainter*, int, int, int, int, const QPalette&, bool, int)", typeof(void), typeof(QPainter), p, typeof(int), x1, typeof(int), y1, typeof(int), x2, typeof(int), y2, typeof(QPalette), pal, typeof(bool), sunken, typeof(int), lineWidth);
        }
        public static void QDrawShadeLine(QPainter p, int x1, int y1, int x2, int y2, QPalette pal, bool sunken) {
            staticInterceptor.Invoke("qDrawShadeLine#$$$$#$", "qDrawShadeLine(QPainter*, int, int, int, int, const QPalette&, bool)", typeof(void), typeof(QPainter), p, typeof(int), x1, typeof(int), y1, typeof(int), x2, typeof(int), y2, typeof(QPalette), pal, typeof(bool), sunken);
        }
        public static void QDrawShadeLine(QPainter p, int x1, int y1, int x2, int y2, QPalette pal) {
            staticInterceptor.Invoke("qDrawShadeLine#$$$$#", "qDrawShadeLine(QPainter*, int, int, int, int, const QPalette&)", typeof(void), typeof(QPainter), p, typeof(int), x1, typeof(int), y1, typeof(int), x2, typeof(int), y2, typeof(QPalette), pal);
        }
        public static void QDrawShadeLine(QPainter p, QPoint p1, QPoint p2, QPalette pal, bool sunken, int lineWidth, int midLineWidth) {
            staticInterceptor.Invoke("qDrawShadeLine####$$$", "qDrawShadeLine(QPainter*, const QPoint&, const QPoint&, const QPalette&, bool, int, int)", typeof(void), typeof(QPainter), p, typeof(QPoint), p1, typeof(QPoint), p2, typeof(QPalette), pal, typeof(bool), sunken, typeof(int), lineWidth, typeof(int), midLineWidth);
        }
        public static void QDrawShadeLine(QPainter p, QPoint p1, QPoint p2, QPalette pal, bool sunken, int lineWidth) {
            staticInterceptor.Invoke("qDrawShadeLine####$$", "qDrawShadeLine(QPainter*, const QPoint&, const QPoint&, const QPalette&, bool, int)", typeof(void), typeof(QPainter), p, typeof(QPoint), p1, typeof(QPoint), p2, typeof(QPalette), pal, typeof(bool), sunken, typeof(int), lineWidth);
        }
        public static void QDrawShadeLine(QPainter p, QPoint p1, QPoint p2, QPalette pal, bool sunken) {
            staticInterceptor.Invoke("qDrawShadeLine####$", "qDrawShadeLine(QPainter*, const QPoint&, const QPoint&, const QPalette&, bool)", typeof(void), typeof(QPainter), p, typeof(QPoint), p1, typeof(QPoint), p2, typeof(QPalette), pal, typeof(bool), sunken);
        }
        public static void QDrawShadeLine(QPainter p, QPoint p1, QPoint p2, QPalette pal) {
            staticInterceptor.Invoke("qDrawShadeLine####", "qDrawShadeLine(QPainter*, const QPoint&, const QPoint&, const QPalette&)", typeof(void), typeof(QPainter), p, typeof(QPoint), p1, typeof(QPoint), p2, typeof(QPalette), pal);
        }
        public static void QDrawShadeRect(QPainter p, int x, int y, int w, int h, QPalette pal, bool sunken, int lineWidth, int midLineWidth, QBrush fill) {
            staticInterceptor.Invoke("qDrawShadeRect#$$$$#$$$#", "qDrawShadeRect(QPainter*, int, int, int, int, const QPalette&, bool, int, int, const QBrush*)", typeof(void), typeof(QPainter), p, typeof(int), x, typeof(int), y, typeof(int), w, typeof(int), h, typeof(QPalette), pal, typeof(bool), sunken, typeof(int), lineWidth, typeof(int), midLineWidth, typeof(QBrush), fill);
        }
        public static void QDrawShadeRect(QPainter p, int x, int y, int w, int h, QPalette pal, bool sunken, int lineWidth, int midLineWidth) {
            staticInterceptor.Invoke("qDrawShadeRect#$$$$#$$$", "qDrawShadeRect(QPainter*, int, int, int, int, const QPalette&, bool, int, int)", typeof(void), typeof(QPainter), p, typeof(int), x, typeof(int), y, typeof(int), w, typeof(int), h, typeof(QPalette), pal, typeof(bool), sunken, typeof(int), lineWidth, typeof(int), midLineWidth);
        }
        public static void QDrawShadeRect(QPainter p, int x, int y, int w, int h, QPalette pal, bool sunken, int lineWidth) {
            staticInterceptor.Invoke("qDrawShadeRect#$$$$#$$", "qDrawShadeRect(QPainter*, int, int, int, int, const QPalette&, bool, int)", typeof(void), typeof(QPainter), p, typeof(int), x, typeof(int), y, typeof(int), w, typeof(int), h, typeof(QPalette), pal, typeof(bool), sunken, typeof(int), lineWidth);
        }
        public static void QDrawShadeRect(QPainter p, int x, int y, int w, int h, QPalette pal, bool sunken) {
            staticInterceptor.Invoke("qDrawShadeRect#$$$$#$", "qDrawShadeRect(QPainter*, int, int, int, int, const QPalette&, bool)", typeof(void), typeof(QPainter), p, typeof(int), x, typeof(int), y, typeof(int), w, typeof(int), h, typeof(QPalette), pal, typeof(bool), sunken);
        }
        public static void QDrawShadeRect(QPainter p, int x, int y, int w, int h, QPalette pal) {
            staticInterceptor.Invoke("qDrawShadeRect#$$$$#", "qDrawShadeRect(QPainter*, int, int, int, int, const QPalette&)", typeof(void), typeof(QPainter), p, typeof(int), x, typeof(int), y, typeof(int), w, typeof(int), h, typeof(QPalette), pal);
        }
        public static void QDrawShadeRect(QPainter p, QRect r, QPalette pal, bool sunken, int lineWidth, int midLineWidth, QBrush fill) {
            staticInterceptor.Invoke("qDrawShadeRect###$$$#", "qDrawShadeRect(QPainter*, const QRect&, const QPalette&, bool, int, int, const QBrush*)", typeof(void), typeof(QPainter), p, typeof(QRect), r, typeof(QPalette), pal, typeof(bool), sunken, typeof(int), lineWidth, typeof(int), midLineWidth, typeof(QBrush), fill);
        }
        public static void QDrawShadeRect(QPainter p, QRect r, QPalette pal, bool sunken, int lineWidth, int midLineWidth) {
            staticInterceptor.Invoke("qDrawShadeRect###$$$", "qDrawShadeRect(QPainter*, const QRect&, const QPalette&, bool, int, int)", typeof(void), typeof(QPainter), p, typeof(QRect), r, typeof(QPalette), pal, typeof(bool), sunken, typeof(int), lineWidth, typeof(int), midLineWidth);
        }
        public static void QDrawShadeRect(QPainter p, QRect r, QPalette pal, bool sunken, int lineWidth) {
            staticInterceptor.Invoke("qDrawShadeRect###$$", "qDrawShadeRect(QPainter*, const QRect&, const QPalette&, bool, int)", typeof(void), typeof(QPainter), p, typeof(QRect), r, typeof(QPalette), pal, typeof(bool), sunken, typeof(int), lineWidth);
        }
        public static void QDrawShadeRect(QPainter p, QRect r, QPalette pal, bool sunken) {
            staticInterceptor.Invoke("qDrawShadeRect###$", "qDrawShadeRect(QPainter*, const QRect&, const QPalette&, bool)", typeof(void), typeof(QPainter), p, typeof(QRect), r, typeof(QPalette), pal, typeof(bool), sunken);
        }
        public static void QDrawShadeRect(QPainter p, QRect r, QPalette pal) {
            staticInterceptor.Invoke("qDrawShadeRect###", "qDrawShadeRect(QPainter*, const QRect&, const QPalette&)", typeof(void), typeof(QPainter), p, typeof(QRect), r, typeof(QPalette), pal);
        }
        public static void QDrawShadePanel(QPainter p, int x, int y, int w, int h, QPalette pal, bool sunken, int lineWidth, QBrush fill) {
            staticInterceptor.Invoke("qDrawShadePanel#$$$$#$$#", "qDrawShadePanel(QPainter*, int, int, int, int, const QPalette&, bool, int, const QBrush*)", typeof(void), typeof(QPainter), p, typeof(int), x, typeof(int), y, typeof(int), w, typeof(int), h, typeof(QPalette), pal, typeof(bool), sunken, typeof(int), lineWidth, typeof(QBrush), fill);
        }
        public static void QDrawShadePanel(QPainter p, int x, int y, int w, int h, QPalette pal, bool sunken, int lineWidth) {
            staticInterceptor.Invoke("qDrawShadePanel#$$$$#$$", "qDrawShadePanel(QPainter*, int, int, int, int, const QPalette&, bool, int)", typeof(void), typeof(QPainter), p, typeof(int), x, typeof(int), y, typeof(int), w, typeof(int), h, typeof(QPalette), pal, typeof(bool), sunken, typeof(int), lineWidth);
        }
        public static void QDrawShadePanel(QPainter p, int x, int y, int w, int h, QPalette pal, bool sunken) {
            staticInterceptor.Invoke("qDrawShadePanel#$$$$#$", "qDrawShadePanel(QPainter*, int, int, int, int, const QPalette&, bool)", typeof(void), typeof(QPainter), p, typeof(int), x, typeof(int), y, typeof(int), w, typeof(int), h, typeof(QPalette), pal, typeof(bool), sunken);
        }
        public static void QDrawShadePanel(QPainter p, int x, int y, int w, int h, QPalette pal) {
            staticInterceptor.Invoke("qDrawShadePanel#$$$$#", "qDrawShadePanel(QPainter*, int, int, int, int, const QPalette&)", typeof(void), typeof(QPainter), p, typeof(int), x, typeof(int), y, typeof(int), w, typeof(int), h, typeof(QPalette), pal);
        }
        public static void QDrawShadePanel(QPainter p, QRect r, QPalette pal, bool sunken, int lineWidth, QBrush fill) {
            staticInterceptor.Invoke("qDrawShadePanel###$$#", "qDrawShadePanel(QPainter*, const QRect&, const QPalette&, bool, int, const QBrush*)", typeof(void), typeof(QPainter), p, typeof(QRect), r, typeof(QPalette), pal, typeof(bool), sunken, typeof(int), lineWidth, typeof(QBrush), fill);
        }
        public static void QDrawShadePanel(QPainter p, QRect r, QPalette pal, bool sunken, int lineWidth) {
            staticInterceptor.Invoke("qDrawShadePanel###$$", "qDrawShadePanel(QPainter*, const QRect&, const QPalette&, bool, int)", typeof(void), typeof(QPainter), p, typeof(QRect), r, typeof(QPalette), pal, typeof(bool), sunken, typeof(int), lineWidth);
        }
        public static void QDrawShadePanel(QPainter p, QRect r, QPalette pal, bool sunken) {
            staticInterceptor.Invoke("qDrawShadePanel###$", "qDrawShadePanel(QPainter*, const QRect&, const QPalette&, bool)", typeof(void), typeof(QPainter), p, typeof(QRect), r, typeof(QPalette), pal, typeof(bool), sunken);
        }
        public static void QDrawShadePanel(QPainter p, QRect r, QPalette pal) {
            staticInterceptor.Invoke("qDrawShadePanel###", "qDrawShadePanel(QPainter*, const QRect&, const QPalette&)", typeof(void), typeof(QPainter), p, typeof(QRect), r, typeof(QPalette), pal);
        }
        public static void QDrawWinButton(QPainter p, int x, int y, int w, int h, QPalette pal, bool sunken, QBrush fill) {
            staticInterceptor.Invoke("qDrawWinButton#$$$$#$#", "qDrawWinButton(QPainter*, int, int, int, int, const QPalette&, bool, const QBrush*)", typeof(void), typeof(QPainter), p, typeof(int), x, typeof(int), y, typeof(int), w, typeof(int), h, typeof(QPalette), pal, typeof(bool), sunken, typeof(QBrush), fill);
        }
        public static void QDrawWinButton(QPainter p, int x, int y, int w, int h, QPalette pal, bool sunken) {
            staticInterceptor.Invoke("qDrawWinButton#$$$$#$", "qDrawWinButton(QPainter*, int, int, int, int, const QPalette&, bool)", typeof(void), typeof(QPainter), p, typeof(int), x, typeof(int), y, typeof(int), w, typeof(int), h, typeof(QPalette), pal, typeof(bool), sunken);
        }
        public static void QDrawWinButton(QPainter p, int x, int y, int w, int h, QPalette pal) {
            staticInterceptor.Invoke("qDrawWinButton#$$$$#", "qDrawWinButton(QPainter*, int, int, int, int, const QPalette&)", typeof(void), typeof(QPainter), p, typeof(int), x, typeof(int), y, typeof(int), w, typeof(int), h, typeof(QPalette), pal);
        }
        public static void QDrawWinButton(QPainter p, QRect r, QPalette pal, bool sunken, QBrush fill) {
            staticInterceptor.Invoke("qDrawWinButton###$#", "qDrawWinButton(QPainter*, const QRect&, const QPalette&, bool, const QBrush*)", typeof(void), typeof(QPainter), p, typeof(QRect), r, typeof(QPalette), pal, typeof(bool), sunken, typeof(QBrush), fill);
        }
        public static void QDrawWinButton(QPainter p, QRect r, QPalette pal, bool sunken) {
            staticInterceptor.Invoke("qDrawWinButton###$", "qDrawWinButton(QPainter*, const QRect&, const QPalette&, bool)", typeof(void), typeof(QPainter), p, typeof(QRect), r, typeof(QPalette), pal, typeof(bool), sunken);
        }
        public static void QDrawWinButton(QPainter p, QRect r, QPalette pal) {
            staticInterceptor.Invoke("qDrawWinButton###", "qDrawWinButton(QPainter*, const QRect&, const QPalette&)", typeof(void), typeof(QPainter), p, typeof(QRect), r, typeof(QPalette), pal);
        }
        public static void QDrawWinPanel(QPainter p, int x, int y, int w, int h, QPalette pal, bool sunken, QBrush fill) {
            staticInterceptor.Invoke("qDrawWinPanel#$$$$#$#", "qDrawWinPanel(QPainter*, int, int, int, int, const QPalette&, bool, const QBrush*)", typeof(void), typeof(QPainter), p, typeof(int), x, typeof(int), y, typeof(int), w, typeof(int), h, typeof(QPalette), pal, typeof(bool), sunken, typeof(QBrush), fill);
        }
        public static void QDrawWinPanel(QPainter p, int x, int y, int w, int h, QPalette pal, bool sunken) {
            staticInterceptor.Invoke("qDrawWinPanel#$$$$#$", "qDrawWinPanel(QPainter*, int, int, int, int, const QPalette&, bool)", typeof(void), typeof(QPainter), p, typeof(int), x, typeof(int), y, typeof(int), w, typeof(int), h, typeof(QPalette), pal, typeof(bool), sunken);
        }
        public static void QDrawWinPanel(QPainter p, int x, int y, int w, int h, QPalette pal) {
            staticInterceptor.Invoke("qDrawWinPanel#$$$$#", "qDrawWinPanel(QPainter*, int, int, int, int, const QPalette&)", typeof(void), typeof(QPainter), p, typeof(int), x, typeof(int), y, typeof(int), w, typeof(int), h, typeof(QPalette), pal);
        }
        public static void QDrawWinPanel(QPainter p, QRect r, QPalette pal, bool sunken, QBrush fill) {
            staticInterceptor.Invoke("qDrawWinPanel###$#", "qDrawWinPanel(QPainter*, const QRect&, const QPalette&, bool, const QBrush*)", typeof(void), typeof(QPainter), p, typeof(QRect), r, typeof(QPalette), pal, typeof(bool), sunken, typeof(QBrush), fill);
        }
        public static void QDrawWinPanel(QPainter p, QRect r, QPalette pal, bool sunken) {
            staticInterceptor.Invoke("qDrawWinPanel###$", "qDrawWinPanel(QPainter*, const QRect&, const QPalette&, bool)", typeof(void), typeof(QPainter), p, typeof(QRect), r, typeof(QPalette), pal, typeof(bool), sunken);
        }
        public static void QDrawWinPanel(QPainter p, QRect r, QPalette pal) {
            staticInterceptor.Invoke("qDrawWinPanel###", "qDrawWinPanel(QPainter*, const QRect&, const QPalette&)", typeof(void), typeof(QPainter), p, typeof(QRect), r, typeof(QPalette), pal);
        }
        public static void QDrawPlainRect(QPainter p, int x, int y, int w, int h, QColor arg6, int lineWidth, QBrush fill) {
            staticInterceptor.Invoke("qDrawPlainRect#$$$$#$#", "qDrawPlainRect(QPainter*, int, int, int, int, const QColor&, int, const QBrush*)", typeof(void), typeof(QPainter), p, typeof(int), x, typeof(int), y, typeof(int), w, typeof(int), h, typeof(QColor), arg6, typeof(int), lineWidth, typeof(QBrush), fill);
        }
        public static void QDrawPlainRect(QPainter p, int x, int y, int w, int h, QColor arg6, int lineWidth) {
            staticInterceptor.Invoke("qDrawPlainRect#$$$$#$", "qDrawPlainRect(QPainter*, int, int, int, int, const QColor&, int)", typeof(void), typeof(QPainter), p, typeof(int), x, typeof(int), y, typeof(int), w, typeof(int), h, typeof(QColor), arg6, typeof(int), lineWidth);
        }
        public static void QDrawPlainRect(QPainter p, int x, int y, int w, int h, QColor arg6) {
            staticInterceptor.Invoke("qDrawPlainRect#$$$$#", "qDrawPlainRect(QPainter*, int, int, int, int, const QColor&)", typeof(void), typeof(QPainter), p, typeof(int), x, typeof(int), y, typeof(int), w, typeof(int), h, typeof(QColor), arg6);
        }
        public static void QDrawPlainRect(QPainter p, QRect r, QColor arg3, int lineWidth, QBrush fill) {
            staticInterceptor.Invoke("qDrawPlainRect###$#", "qDrawPlainRect(QPainter*, const QRect&, const QColor&, int, const QBrush*)", typeof(void), typeof(QPainter), p, typeof(QRect), r, typeof(QColor), arg3, typeof(int), lineWidth, typeof(QBrush), fill);
        }
        public static void QDrawPlainRect(QPainter p, QRect r, QColor arg3, int lineWidth) {
            staticInterceptor.Invoke("qDrawPlainRect###$", "qDrawPlainRect(QPainter*, const QRect&, const QColor&, int)", typeof(void), typeof(QPainter), p, typeof(QRect), r, typeof(QColor), arg3, typeof(int), lineWidth);
        }
        public static void QDrawPlainRect(QPainter p, QRect r, QColor arg3) {
            staticInterceptor.Invoke("qDrawPlainRect###", "qDrawPlainRect(QPainter*, const QRect&, const QColor&)", typeof(void), typeof(QPainter), p, typeof(QRect), r, typeof(QColor), arg3);
        }
        public static QDataStream Write(QDataStream arg1, QTransform arg2) {
            return (QDataStream) staticInterceptor.Invoke("operator<<##", "operator<<(QDataStream&, const QTransform&)", typeof(QDataStream), typeof(QDataStream), arg1, typeof(QTransform), arg2);
        }
        public static QDataStream Read(QDataStream arg1, QTransform arg2) {
            return (QDataStream) staticInterceptor.Invoke("operator>>##", "operator>>(QDataStream&, QTransform&)", typeof(QDataStream), typeof(QDataStream), arg1, typeof(QTransform), arg2);
        }
        public static QAccessible2Interface QAccessibleValueCastHelper() {
            return (QAccessible2Interface) staticInterceptor.Invoke("qAccessibleValueCastHelper", "qAccessibleValueCastHelper()", typeof(QAccessible2Interface));
        }
        public static QAccessible2Interface QAccessibleTextCastHelper() {
            return (QAccessible2Interface) staticInterceptor.Invoke("qAccessibleTextCastHelper", "qAccessibleTextCastHelper()", typeof(QAccessible2Interface));
        }
        public static QAccessible2Interface QAccessibleEditableTextCastHelper() {
            return (QAccessible2Interface) staticInterceptor.Invoke("qAccessibleEditableTextCastHelper", "qAccessibleEditableTextCastHelper()", typeof(QAccessible2Interface));
        }
        public static QAccessible2Interface QAccessibleTableCastHelper() {
            return (QAccessible2Interface) staticInterceptor.Invoke("qAccessibleTableCastHelper", "qAccessibleTableCastHelper()", typeof(QAccessible2Interface));
        }
        public static QDataStream Write(QDataStream outS, QCursor cursor) {
            return (QDataStream) staticInterceptor.Invoke("operator<<##", "operator<<(QDataStream&, const QCursor&)", typeof(QDataStream), typeof(QDataStream), outS, typeof(QCursor), cursor);
        }
        public static QDataStream Read(QDataStream inS, QCursor cursor) {
            return (QDataStream) staticInterceptor.Invoke("operator>>##", "operator>>(QDataStream&, QCursor&)", typeof(QDataStream), typeof(QDataStream), inS, typeof(QCursor), cursor);
        }
        public static QDataStream Write(QDataStream arg1, QPen arg2) {
            return (QDataStream) staticInterceptor.Invoke("operator<<##", "operator<<(QDataStream&, const QPen&)", typeof(QDataStream), typeof(QDataStream), arg1, typeof(QPen), arg2);
        }
        public static QDataStream Read(QDataStream arg1, QPen arg2) {
            return (QDataStream) staticInterceptor.Invoke("operator>>##", "operator>>(QDataStream&, QPen&)", typeof(QDataStream), typeof(QDataStream), arg1, typeof(QPen), arg2);
        }
        public static QDataStream Write(QDataStream stream, QPolygon polygon) {
            return (QDataStream) staticInterceptor.Invoke("operator<<##", "operator<<(QDataStream&, const QPolygon&)", typeof(QDataStream), typeof(QDataStream), stream, typeof(QPolygon), polygon);
        }
        public static QDataStream Read(QDataStream stream, QPolygon polygon) {
            return (QDataStream) staticInterceptor.Invoke("operator>>##", "operator>>(QDataStream&, QPolygon&)", typeof(QDataStream), typeof(QDataStream), stream, typeof(QPolygon), polygon);
        }
        public static QDataStream Write(QDataStream stream, QPolygonF array) {
            return (QDataStream) staticInterceptor.Invoke("operator<<##", "operator<<(QDataStream&, const QPolygonF&)", typeof(QDataStream), typeof(QDataStream), stream, typeof(QPolygonF), array);
        }
        public static QDataStream Read(QDataStream stream, QPolygonF array) {
            return (QDataStream) staticInterceptor.Invoke("operator>>##", "operator>>(QDataStream&, QPolygonF&)", typeof(QDataStream), typeof(QDataStream), stream, typeof(QPolygonF), array);
        }
        public static QDataStream Write(QDataStream arg1, QListWidgetItem item) {
            return (QDataStream) staticInterceptor.Invoke("operator<<##", "operator<<(QDataStream&, const QListWidgetItem&)", typeof(QDataStream), typeof(QDataStream), arg1, typeof(QListWidgetItem), item);
        }
        public static QDataStream Read(QDataStream arg1, QListWidgetItem item) {
            return (QDataStream) staticInterceptor.Invoke("operator>>##", "operator>>(QDataStream&, QListWidgetItem&)", typeof(QDataStream), typeof(QDataStream), arg1, typeof(QListWidgetItem), item);
        }
        public static QDataStream Write(QDataStream arg1, QKeySequence ks) {
            return (QDataStream) staticInterceptor.Invoke("operator<<##", "operator<<(QDataStream&, const QKeySequence&)", typeof(QDataStream), typeof(QDataStream), arg1, typeof(QKeySequence), ks);
        }
        public static QDataStream Read(QDataStream arg1, QKeySequence ks) {
            return (QDataStream) staticInterceptor.Invoke("operator>>##", "operator>>(QDataStream&, QKeySequence&)", typeof(QDataStream), typeof(QDataStream), arg1, typeof(QKeySequence), ks);
        }
        public static QDataStream Write(QDataStream arg1, QPixmap arg2) {
            return (QDataStream) staticInterceptor.Invoke("operator<<##", "operator<<(QDataStream&, const QPixmap&)", typeof(QDataStream), typeof(QDataStream), arg1, typeof(QPixmap), arg2);
        }
        public static QDataStream Read(QDataStream arg1, QPixmap arg2) {
            return (QDataStream) staticInterceptor.Invoke("operator>>##", "operator>>(QDataStream&, QPixmap&)", typeof(QDataStream), typeof(QDataStream), arg1, typeof(QPixmap), arg2);
        }
        public static QDataStream Write(QDataStream arg1, QIcon arg2) {
            return (QDataStream) staticInterceptor.Invoke("operator<<##", "operator<<(QDataStream&, const QIcon&)", typeof(QDataStream), typeof(QDataStream), arg1, typeof(QIcon), arg2);
        }
        public static QDataStream Read(QDataStream arg1, QIcon arg2) {
            return (QDataStream) staticInterceptor.Invoke("operator>>##", "operator>>(QDataStream&, QIcon&)", typeof(QDataStream), typeof(QDataStream), arg1, typeof(QIcon), arg2);
        }
        public static QDataStream Write(QDataStream arg1, QRegion arg2) {
            return (QDataStream) staticInterceptor.Invoke("operator<<##", "operator<<(QDataStream&, const QRegion&)", typeof(QDataStream), typeof(QDataStream), arg1, typeof(QRegion), arg2);
        }
        public static QDataStream Read(QDataStream arg1, QRegion arg2) {
            return (QDataStream) staticInterceptor.Invoke("operator>>##", "operator>>(QDataStream&, QRegion&)", typeof(QDataStream), typeof(QDataStream), arg1, typeof(QRegion), arg2);
        }
        public static QDataStream Write(QDataStream arg1, QPicture arg2) {
            return (QDataStream) staticInterceptor.Invoke("operator<<##", "operator<<(QDataStream&, const QPicture&)", typeof(QDataStream), typeof(QDataStream), arg1, typeof(QPicture), arg2);
        }
        public static QDataStream Read(QDataStream arg1, QPicture arg2) {
            return (QDataStream) staticInterceptor.Invoke("operator>>##", "operator>>(QDataStream&, QPicture&)", typeof(QDataStream), typeof(QDataStream), arg1, typeof(QPicture), arg2);
        }
        public static uint QHash(QItemSelectionRange arg1) {
            return (uint) staticInterceptor.Invoke("qHash#", "qHash(const QItemSelectionRange&)", typeof(uint), typeof(QItemSelectionRange), arg1);
        }
        public static QDataStream Write(QDataStream arg1, QTreeWidgetItem item) {
            return (QDataStream) staticInterceptor.Invoke("operator<<##", "operator<<(QDataStream&, const QTreeWidgetItem&)", typeof(QDataStream), typeof(QDataStream), arg1, typeof(QTreeWidgetItem), item);
        }
        public static QDataStream Read(QDataStream arg1, QTreeWidgetItem item) {
            return (QDataStream) staticInterceptor.Invoke("operator>>##", "operator>>(QDataStream&, QTreeWidgetItem&)", typeof(QDataStream), typeof(QDataStream), arg1, typeof(QTreeWidgetItem), item);
        }
        public static QDataStream Write(QDataStream arg1, QFont arg2) {
            return (QDataStream) staticInterceptor.Invoke("operator<<##", "operator<<(QDataStream&, const QFont&)", typeof(QDataStream), typeof(QDataStream), arg1, typeof(QFont), arg2);
        }
        public static QDataStream Read(QDataStream arg1, QFont arg2) {
            return (QDataStream) staticInterceptor.Invoke("operator>>##", "operator>>(QDataStream&, QFont&)", typeof(QDataStream), typeof(QDataStream), arg1, typeof(QFont), arg2);
        }
    }
}
