//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {
    using System;
    [SmokeClass("QMargins")]
    public class QMargins : Object, IDisposable {
        protected SmokeInvocation interceptor = null;
        private IntPtr smokeObject;
        protected QMargins(Type dummy) {}
        protected void CreateProxy() {
            interceptor = new SmokeInvocation(typeof(QMargins), this);
        }
        private static SmokeInvocation staticInterceptor = null;
        static QMargins() {
            staticInterceptor = new SmokeInvocation(typeof(QMargins), null);
        }
        public QMargins() : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("QMargins", "QMargins()", typeof(void));
        }
        public QMargins(int left, int top, int right, int bottom) : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("QMargins$$$$", "QMargins(int, int, int, int)", typeof(void), typeof(int), left, typeof(int), top, typeof(int), right, typeof(int), bottom);
        }
        public bool IsNull() {
            return (bool) interceptor.Invoke("isNull", "isNull() const", typeof(bool));
        }
        public int Left() {
            return (int) interceptor.Invoke("left", "left() const", typeof(int));
        }
        public int Top() {
            return (int) interceptor.Invoke("top", "top() const", typeof(int));
        }
        public int Right() {
            return (int) interceptor.Invoke("right", "right() const", typeof(int));
        }
        public int Bottom() {
            return (int) interceptor.Invoke("bottom", "bottom() const", typeof(int));
        }
        public void SetLeft(int left) {
            interceptor.Invoke("setLeft$", "setLeft(int)", typeof(void), typeof(int), left);
        }
        public void SetTop(int top) {
            interceptor.Invoke("setTop$", "setTop(int)", typeof(void), typeof(int), top);
        }
        public void SetRight(int right) {
            interceptor.Invoke("setRight$", "setRight(int)", typeof(void), typeof(int), right);
        }
        public void SetBottom(int bottom) {
            interceptor.Invoke("setBottom$", "setBottom(int)", typeof(void), typeof(int), bottom);
        }
        ~QMargins() {
            interceptor.Invoke("~QMargins", "~QMargins()", typeof(void));
        }
        public void Dispose() {
            interceptor.Invoke("~QMargins", "~QMargins()", typeof(void));
        }
        public override bool Equals(object o) {
            if (!(o is QMargins)) { return false; }
            return this == (QMargins) o;
        }
        public override int GetHashCode() {
            return interceptor.GetHashCode();
        }
        public static bool operator==(QMargins m1, QMargins m2) {
            return (bool) staticInterceptor.Invoke("operator==##", "operator==(const QMargins&, const QMargins&)", typeof(bool), typeof(QMargins), m1, typeof(QMargins), m2);
        }
        public static bool operator!=(QMargins m1, QMargins m2) {
            return !(bool) staticInterceptor.Invoke("operator==##", "operator==(const QMargins&, const QMargins&)", typeof(bool), typeof(QMargins), m1, typeof(QMargins), m2);
        }
    }
}
