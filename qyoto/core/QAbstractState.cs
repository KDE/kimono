//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {
    using System;
    [SmokeClass("QAbstractState")]
    public abstract class QAbstractState : QObject {
        protected QAbstractState(Type dummy) : base((Type) null) {}
        protected new void CreateProxy() {
            interceptor = new SmokeInvocation(typeof(QAbstractState), this);
        }
        private static SmokeInvocation staticInterceptor = null;
        static QAbstractState() {
            staticInterceptor = new SmokeInvocation(typeof(QAbstractState), null);
        }
        // QAbstractState* QAbstractState(QAbstractStatePrivate& arg1,QState* arg2); >>>> NOT CONVERTED
        public QState ParentState() {
            return (QState) interceptor.Invoke("parentState", "parentState() const", typeof(QState));
        }
        public QStateMachine Machine() {
            return (QStateMachine) interceptor.Invoke("machine", "machine() const", typeof(QStateMachine));
        }
        public QAbstractState(QState parent) : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("QAbstractState#", "QAbstractState(QState*)", typeof(void), typeof(QState), parent);
        }
        public QAbstractState() : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("QAbstractState", "QAbstractState()", typeof(void));
        }
        [SmokeMethod("onEntry(QEvent*)")]
        protected abstract void OnEntry(QEvent arg1);
        [SmokeMethod("onExit(QEvent*)")]
        protected abstract void OnExit(QEvent arg1);
        [SmokeMethod("event(QEvent*)")]
        protected new virtual bool Event(QEvent e) {
            return (bool) interceptor.Invoke("event#", "event(QEvent*)", typeof(bool), typeof(QEvent), e);
        }
        public static new string Tr(string s, string c) {
            return (string) staticInterceptor.Invoke("tr$$", "tr(const char*, const char*)", typeof(string), typeof(string), s, typeof(string), c);
        }
        public static new string Tr(string s) {
            return (string) staticInterceptor.Invoke("tr$", "tr(const char*)", typeof(string), typeof(string), s);
        }
        protected new IQAbstractStateSignals Emit {
            get { return (IQAbstractStateSignals) Q_EMIT; }
        }
    }

    public interface IQAbstractStateSignals : IQObjectSignals {
    }
}
