//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {
    using System;
    [SmokeClass("QSignalTransition")]
    public class QSignalTransition : QAbstractTransition, IDisposable {
        protected QSignalTransition(Type dummy) : base((Type) null) {}
        protected new void CreateProxy() {
            interceptor = new SmokeInvocation(typeof(QSignalTransition), this);
        }
        private static SmokeInvocation staticInterceptor = null;
        static QSignalTransition() {
            staticInterceptor = new SmokeInvocation(typeof(QSignalTransition), null);
        }
        [Q_PROPERTY("QObject*", "senderObject")]
        public QObject SenderObject {
            get { return (QObject) interceptor.Invoke("senderObject", "senderObject()", typeof(QObject)); }
            set { interceptor.Invoke("setSenderObject#", "setSenderObject(QObject*)", typeof(void), typeof(QObject), value); }
        }
        [Q_PROPERTY("QByteArray", "signal")]
        public QByteArray Signal {
            get { return (QByteArray) interceptor.Invoke("signal", "signal()", typeof(QByteArray)); }
            set { interceptor.Invoke("setSignal#", "setSignal(QByteArray)", typeof(void), typeof(QByteArray), value); }
        }
        public QSignalTransition(QState sourceState) : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("QSignalTransition#", "QSignalTransition(QState*)", typeof(void), typeof(QState), sourceState);
        }
        public QSignalTransition() : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("QSignalTransition", "QSignalTransition()", typeof(void));
        }
        public QSignalTransition(QObject sender, string signal, QState sourceState) : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("QSignalTransition#$#", "QSignalTransition(QObject*, const char*, QState*)", typeof(void), typeof(QObject), sender, typeof(string), signal, typeof(QState), sourceState);
        }
        public QSignalTransition(QObject sender, string signal) : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("QSignalTransition#$", "QSignalTransition(QObject*, const char*)", typeof(void), typeof(QObject), sender, typeof(string), signal);
        }
        [SmokeMethod("eventTest(QEvent*)")]
        protected override bool EventTest(QEvent arg1) {
            return (bool) interceptor.Invoke("eventTest#", "eventTest(QEvent*)", typeof(bool), typeof(QEvent), arg1);
        }
        [SmokeMethod("onTransition(QEvent*)")]
        protected override void OnTransition(QEvent arg1) {
            interceptor.Invoke("onTransition#", "onTransition(QEvent*)", typeof(void), typeof(QEvent), arg1);
        }
        [SmokeMethod("event(QEvent*)")]
        protected override bool Event(QEvent e) {
            return (bool) interceptor.Invoke("event#", "event(QEvent*)", typeof(bool), typeof(QEvent), e);
        }
        ~QSignalTransition() {
            interceptor.Invoke("~QSignalTransition", "~QSignalTransition()", typeof(void));
        }
        public new void Dispose() {
            interceptor.Invoke("~QSignalTransition", "~QSignalTransition()", typeof(void));
        }
        public static new string Tr(string s, string c) {
            return (string) staticInterceptor.Invoke("tr$$", "tr(const char*, const char*)", typeof(string), typeof(string), s, typeof(string), c);
        }
        public static new string Tr(string s) {
            return (string) staticInterceptor.Invoke("tr$", "tr(const char*)", typeof(string), typeof(string), s);
        }
        protected new IQSignalTransitionSignals Emit {
            get { return (IQSignalTransitionSignals) Q_EMIT; }
        }
    }

    public interface IQSignalTransitionSignals : IQAbstractTransitionSignals {
    }
}
