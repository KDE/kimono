//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {
    using System;
    /// <remarks> See <see cref="IQAbstractAnimationSignals"></see> for signals emitted by QAbstractAnimation
    /// </remarks>
    [SmokeClass("QAbstractAnimation")]
    public abstract class QAbstractAnimation : QObject {
        protected QAbstractAnimation(Type dummy) : base((Type) null) {}
        protected new void CreateProxy() {
            interceptor = new SmokeInvocation(typeof(QAbstractAnimation), this);
        }
        private static SmokeInvocation staticInterceptor = null;
        static QAbstractAnimation() {
            staticInterceptor = new SmokeInvocation(typeof(QAbstractAnimation), null);
        }
        public enum Direction {
            Forward = 0,
            Backward = 1,
        }
        public enum State {
            Stopped = 0,
            Paused = 1,
            Running = 2,
        }
        public enum DeletionPolicy {
            KeepWhenStopped = 0,
            DeleteWhenStopped = 1,
        }
        [Q_PROPERTY("QAbstractAnimation::State", "state")]
        public QAbstractAnimation.State state {
            get { return (QAbstractAnimation.State) interceptor.Invoke("state", "state()", typeof(QAbstractAnimation.State)); }
            set { interceptor.Invoke("stateChanged$", "stateChanged(QAbstractAnimation::State)", typeof(void), typeof(QAbstractAnimation.State), value); }
        }
        [Q_PROPERTY("int", "loopCount")]
        public int LoopCount {
            get { return (int) interceptor.Invoke("loopCount", "loopCount()", typeof(int)); }
            set { interceptor.Invoke("setLoopCount$", "setLoopCount(int)", typeof(void), typeof(int), value); }
        }
        [Q_PROPERTY("int", "currentTime")]
        public int CurrentTime {
            get { return (int) interceptor.Invoke("currentTime", "currentTime()", typeof(int)); }
            set { interceptor.Invoke("setCurrentTime$", "setCurrentTime(int)", typeof(void), typeof(int), value); }
        }
        [Q_PROPERTY("int", "currentLoop")]
        public int CurrentLoop {
            get { return (int) interceptor.Invoke("currentLoop", "currentLoop()", typeof(int)); }
            set { interceptor.Invoke("currentLoopChanged$", "currentLoopChanged(int)", typeof(void), typeof(int), value); }
        }
        [Q_PROPERTY("QAbstractAnimation::Direction", "direction")]
        public QAbstractAnimation.Direction direction {
            get { return (QAbstractAnimation.Direction) interceptor.Invoke("direction", "direction()", typeof(QAbstractAnimation.Direction)); }
            set { interceptor.Invoke("setDirection$", "setDirection(QAbstractAnimation::Direction)", typeof(void), typeof(QAbstractAnimation.Direction), value); }
        }
        [Q_PROPERTY("int", "duration")]
        public int Duration {
            get { return (int) interceptor.Invoke("duration", "duration()", typeof(int)); }
        }
        // QAbstractAnimation* QAbstractAnimation(QAbstractAnimationPrivate& arg1,QObject* arg2); >>>> NOT CONVERTED
        // QAbstractAnimation* QAbstractAnimation(QAbstractAnimationPrivate& arg1); >>>> NOT CONVERTED
        public QAbstractAnimation(QObject parent) : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("QAbstractAnimation#", "QAbstractAnimation(QObject*)", typeof(void), typeof(QObject), parent);
        }
        public QAbstractAnimation() : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("QAbstractAnimation", "QAbstractAnimation()", typeof(void));
        }
        public QAnimationGroup Group() {
            return (QAnimationGroup) interceptor.Invoke("group", "group() const", typeof(QAnimationGroup));
        }
        public int CurrentLoopTime() {
            return (int) interceptor.Invoke("currentLoopTime", "currentLoopTime() const", typeof(int));
        }
        [SmokeMethod("duration() const")]
        public abstract int duration();
        public int TotalDuration() {
            return (int) interceptor.Invoke("totalDuration", "totalDuration() const", typeof(int));
        }
        [Q_SLOT("void start(QAbstractAnimation::DeletionPolicy)")]
        public void Start(QAbstractAnimation.DeletionPolicy policy) {
            interceptor.Invoke("start$", "start(QAbstractAnimation::DeletionPolicy)", typeof(void), typeof(QAbstractAnimation.DeletionPolicy), policy);
        }
        [Q_SLOT("void start()")]
        public void Start() {
            interceptor.Invoke("start", "start()", typeof(void));
        }
        [Q_SLOT("void pause()")]
        public void Pause() {
            interceptor.Invoke("pause", "pause()", typeof(void));
        }
        [Q_SLOT("void resume()")]
        public void Resume() {
            interceptor.Invoke("resume", "resume()", typeof(void));
        }
        [Q_SLOT("void setPaused(bool)")]
        public void SetPaused(bool arg1) {
            interceptor.Invoke("setPaused$", "setPaused(bool)", typeof(void), typeof(bool), arg1);
        }
        [Q_SLOT("void stop()")]
        public void Stop() {
            interceptor.Invoke("stop", "stop()", typeof(void));
        }
        [Q_SLOT("void setCurrentTime(int)")]
        public void SetCurrentTime(int msecs) {
            interceptor.Invoke("setCurrentTime$", "setCurrentTime(int)", typeof(void), typeof(int), msecs);
        }
        [SmokeMethod("event(QEvent*)")]
        protected new virtual bool Event(QEvent arg1) {
            return (bool) interceptor.Invoke("event#", "event(QEvent*)", typeof(bool), typeof(QEvent), arg1);
        }
        [SmokeMethod("updateCurrentTime(int)")]
        protected abstract void UpdateCurrentTime(int currentTime);
        [SmokeMethod("updateState(QAbstractAnimation::State, QAbstractAnimation::State)")]
        protected virtual void UpdateState(QAbstractAnimation.State newState, QAbstractAnimation.State oldState) {
            interceptor.Invoke("updateState$$", "updateState(QAbstractAnimation::State, QAbstractAnimation::State)", typeof(void), typeof(QAbstractAnimation.State), newState, typeof(QAbstractAnimation.State), oldState);
        }
        [SmokeMethod("updateDirection(QAbstractAnimation::Direction)")]
        protected virtual void UpdateDirection(QAbstractAnimation.Direction direction) {
            interceptor.Invoke("updateDirection$", "updateDirection(QAbstractAnimation::Direction)", typeof(void), typeof(QAbstractAnimation.Direction), direction);
        }
        public static new string Tr(string s, string c) {
            return (string) staticInterceptor.Invoke("tr$$", "tr(const char*, const char*)", typeof(string), typeof(string), s, typeof(string), c);
        }
        public static new string Tr(string s) {
            return (string) staticInterceptor.Invoke("tr$", "tr(const char*)", typeof(string), typeof(string), s);
        }
        protected new IQAbstractAnimationSignals Emit {
            get { return (IQAbstractAnimationSignals) Q_EMIT; }
        }
    }

    public interface IQAbstractAnimationSignals : IQObjectSignals {
        [Q_SIGNAL("void finished()")]
        void Finished();
        [Q_SIGNAL("void stateChanged(QAbstractAnimation::State, QAbstractAnimation::State)")]
        void StateChanged(QAbstractAnimation.State newState, QAbstractAnimation.State oldState);
        [Q_SIGNAL("void currentLoopChanged(int)")]
        void CurrentLoopChanged(int currentLoop);
        [Q_SIGNAL("void directionChanged(QAbstractAnimation::Direction)")]
        void DirectionChanged(QAbstractAnimation.Direction arg1);
    }
}
