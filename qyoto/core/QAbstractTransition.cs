//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {
    using System;
    using System.Collections.Generic;
    [SmokeClass("QAbstractTransition")]
    public abstract class QAbstractTransition : QObject {
        protected QAbstractTransition(Type dummy) : base((Type) null) {}
        protected new void CreateProxy() {
            interceptor = new SmokeInvocation(typeof(QAbstractTransition), this);
        }
        private static SmokeInvocation staticInterceptor = null;
        static QAbstractTransition() {
            staticInterceptor = new SmokeInvocation(typeof(QAbstractTransition), null);
        }
        [Q_PROPERTY("QState*", "sourceState")]
        public QState SourceState {
            get { return (QState) interceptor.Invoke("sourceState", "sourceState()", typeof(QState)); }
        }
        [Q_PROPERTY("QAbstractState*", "targetState")]
        public QAbstractState TargetState {
            get { return (QAbstractState) interceptor.Invoke("targetState", "targetState()", typeof(QAbstractState)); }
            set { interceptor.Invoke("setTargetState#", "setTargetState(QAbstractState*)", typeof(void), typeof(QAbstractState), value); }
        }
        // QAbstractTransition* QAbstractTransition(QAbstractTransitionPrivate& arg1,QState* arg2); >>>> NOT CONVERTED
        public QAbstractTransition(QState sourceState) : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("QAbstractTransition#", "QAbstractTransition(QState*)", typeof(void), typeof(QState), sourceState);
        }
        public QAbstractTransition() : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("QAbstractTransition", "QAbstractTransition()", typeof(void));
        }
        public List<QAbstractState> TargetStates() {
            return (List<QAbstractState>) interceptor.Invoke("targetStates", "targetStates() const", typeof(List<QAbstractState>));
        }
        public void SetTargetStates(List<QAbstractState> targets) {
            interceptor.Invoke("setTargetStates?", "setTargetStates(const QList<QAbstractState*>&)", typeof(void), typeof(List<QAbstractState>), targets);
        }
        public QStateMachine Machine() {
            return (QStateMachine) interceptor.Invoke("machine", "machine() const", typeof(QStateMachine));
        }
        public void AddAnimation(QAbstractAnimation animation) {
            interceptor.Invoke("addAnimation#", "addAnimation(QAbstractAnimation*)", typeof(void), typeof(QAbstractAnimation), animation);
        }
        public void RemoveAnimation(QAbstractAnimation animation) {
            interceptor.Invoke("removeAnimation#", "removeAnimation(QAbstractAnimation*)", typeof(void), typeof(QAbstractAnimation), animation);
        }
        public List<QAbstractAnimation> Animations() {
            return (List<QAbstractAnimation>) interceptor.Invoke("animations", "animations() const", typeof(List<QAbstractAnimation>));
        }
        [SmokeMethod("eventTest(QEvent*)")]
        protected abstract bool EventTest(QEvent arg1);
        [SmokeMethod("onTransition(QEvent*)")]
        protected abstract void OnTransition(QEvent arg1);
        [SmokeMethod("event(QEvent*)")]
        protected new virtual bool Event(QEvent e) {
            return (bool) interceptor.Invoke("event#", "event(QEvent*)", typeof(bool), typeof(QEvent), e);
        }
        public static new string Tr(string s, string c) {
            return (string) staticInterceptor.Invoke("tr$$", "tr(const char*, const char*)", typeof(string), typeof(string), s, typeof(string), c);
        }
        public static new string Tr(string s) {
            return (string) staticInterceptor.Invoke("tr$", "tr(const char*)", typeof(string), typeof(string), s);
        }
        protected new IQAbstractTransitionSignals Emit {
            get { return (IQAbstractTransitionSignals) Q_EMIT; }
        }
    }

    public interface IQAbstractTransitionSignals : IQObjectSignals {
    }
}
