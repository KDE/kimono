//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {
    using System;
    /// <remarks> See <see cref="IQStateSignals"></see> for signals emitted by QState
    /// </remarks>
    [SmokeClass("QState")]
    public class QState : QAbstractState, IDisposable {
        protected QState(Type dummy) : base((Type) null) {}
        protected new void CreateProxy() {
            interceptor = new SmokeInvocation(typeof(QState), this);
        }
        private static SmokeInvocation staticInterceptor = null;
        static QState() {
            staticInterceptor = new SmokeInvocation(typeof(QState), null);
        }
        public enum ChildMode {
            ExclusiveStates = 0,
            ParallelStates = 1,
        }
        [Q_PROPERTY("QAbstractState*", "initialState")]
        public QAbstractState InitialState {
            get { return (QAbstractState) interceptor.Invoke("initialState", "initialState()", typeof(QAbstractState)); }
            set { interceptor.Invoke("setInitialState#", "setInitialState(QAbstractState*)", typeof(void), typeof(QAbstractState), value); }
        }
        [Q_PROPERTY("QAbstractState*", "errorState")]
        public QAbstractState ErrorState {
            get { return (QAbstractState) interceptor.Invoke("errorState", "errorState()", typeof(QAbstractState)); }
            set { interceptor.Invoke("setErrorState#", "setErrorState(QAbstractState*)", typeof(void), typeof(QAbstractState), value); }
        }
        [Q_PROPERTY("QState::ChildMode", "childMode")]
        public QState.ChildMode childMode {
            get { return (QState.ChildMode) interceptor.Invoke("childMode", "childMode()", typeof(QState.ChildMode)); }
            set { interceptor.Invoke("setChildMode$", "setChildMode(QState::ChildMode)", typeof(void), typeof(QState.ChildMode), value); }
        }
        // QState* QState(QStatePrivate& arg1,QState* arg2); >>>> NOT CONVERTED
        public QState(QState parent) : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("QState#", "QState(QState*)", typeof(void), typeof(QState), parent);
        }
        public QState() : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("QState", "QState()", typeof(void));
        }
        public QState(QState.ChildMode childMode, QState parent) : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("QState$#", "QState(QState::ChildMode, QState*)", typeof(void), typeof(QState.ChildMode), childMode, typeof(QState), parent);
        }
        public QState(QState.ChildMode childMode) : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("QState$", "QState(QState::ChildMode)", typeof(void), typeof(QState.ChildMode), childMode);
        }
        public void AddTransition(QAbstractTransition transition) {
            interceptor.Invoke("addTransition#", "addTransition(QAbstractTransition*)", typeof(void), typeof(QAbstractTransition), transition);
        }
        public QSignalTransition AddTransition(QObject sender, string signal, QAbstractState target) {
            return (QSignalTransition) interceptor.Invoke("addTransition#$#", "addTransition(QObject*, const char*, QAbstractState*)", typeof(QSignalTransition), typeof(QObject), sender, typeof(string), signal, typeof(QAbstractState), target);
        }
        public QAbstractTransition AddTransition(QAbstractState target) {
            return (QAbstractTransition) interceptor.Invoke("addTransition#", "addTransition(QAbstractState*)", typeof(QAbstractTransition), typeof(QAbstractState), target);
        }
        public void RemoveTransition(QAbstractTransition transition) {
            interceptor.Invoke("removeTransition#", "removeTransition(QAbstractTransition*)", typeof(void), typeof(QAbstractTransition), transition);
        }
        public void AssignProperty(QObject arg1, string name, QVariant value) {
            interceptor.Invoke("assignProperty#$#", "assignProperty(QObject*, const char*, const QVariant&)", typeof(void), typeof(QObject), arg1, typeof(string), name, typeof(QVariant), value);
        }
        [SmokeMethod("onEntry(QEvent*)")]
        protected override void OnEntry(QEvent arg1) {
            interceptor.Invoke("onEntry#", "onEntry(QEvent*)", typeof(void), typeof(QEvent), arg1);
        }
        [SmokeMethod("onExit(QEvent*)")]
        protected override void OnExit(QEvent arg1) {
            interceptor.Invoke("onExit#", "onExit(QEvent*)", typeof(void), typeof(QEvent), arg1);
        }
        [SmokeMethod("event(QEvent*)")]
        protected override bool Event(QEvent e) {
            return (bool) interceptor.Invoke("event#", "event(QEvent*)", typeof(bool), typeof(QEvent), e);
        }
        ~QState() {
            interceptor.Invoke("~QState", "~QState()", typeof(void));
        }
        public new void Dispose() {
            interceptor.Invoke("~QState", "~QState()", typeof(void));
        }
        public static new string Tr(string s, string c) {
            return (string) staticInterceptor.Invoke("tr$$", "tr(const char*, const char*)", typeof(string), typeof(string), s, typeof(string), c);
        }
        public static new string Tr(string s) {
            return (string) staticInterceptor.Invoke("tr$", "tr(const char*)", typeof(string), typeof(string), s);
        }
        protected new IQStateSignals Emit {
            get { return (IQStateSignals) Q_EMIT; }
        }
    }

    public interface IQStateSignals : IQAbstractStateSignals {
        [Q_SIGNAL("void finished()")]
        void Finished();
        [Q_SIGNAL("void propertiesAssigned()")]
        void PropertiesAssigned();
    }
}
