//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {
    using System;
    using System.Collections.Generic;
    [SmokeClass("QProcessEnvironment")]
    public class QProcessEnvironment : Object, IDisposable {
        protected SmokeInvocation interceptor = null;
        private IntPtr smokeObject;
        protected QProcessEnvironment(Type dummy) {}
        protected void CreateProxy() {
            interceptor = new SmokeInvocation(typeof(QProcessEnvironment), this);
        }
        private static SmokeInvocation staticInterceptor = null;
        static QProcessEnvironment() {
            staticInterceptor = new SmokeInvocation(typeof(QProcessEnvironment), null);
        }
        public QProcessEnvironment() : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("QProcessEnvironment", "QProcessEnvironment()", typeof(void));
        }
        public QProcessEnvironment(QProcessEnvironment other) : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("QProcessEnvironment#", "QProcessEnvironment(const QProcessEnvironment&)", typeof(void), typeof(QProcessEnvironment), other);
        }
        public override bool Equals(object o) {
            if (!(o is QProcessEnvironment)) { return false; }
            return this == (QProcessEnvironment) o;
        }
        public override int GetHashCode() {
            return interceptor.GetHashCode();
        }
        public bool IsEmpty() {
            return (bool) interceptor.Invoke("isEmpty", "isEmpty() const", typeof(bool));
        }
        public void Clear() {
            interceptor.Invoke("clear", "clear()", typeof(void));
        }
        public bool Contains(string name) {
            return (bool) interceptor.Invoke("contains$", "contains(const QString&) const", typeof(bool), typeof(string), name);
        }
        public void Insert(string name, string value) {
            interceptor.Invoke("insert$$", "insert(const QString&, const QString&)", typeof(void), typeof(string), name, typeof(string), value);
        }
        public void Remove(string name) {
            interceptor.Invoke("remove$", "remove(const QString&)", typeof(void), typeof(string), name);
        }
        public string Value(string name, string defaultValue) {
            return (string) interceptor.Invoke("value$$", "value(const QString&, const QString&) const", typeof(string), typeof(string), name, typeof(string), defaultValue);
        }
        public string Value(string name) {
            return (string) interceptor.Invoke("value$", "value(const QString&) const", typeof(string), typeof(string), name);
        }
        public List<string> ToStringList() {
            return (List<string>) interceptor.Invoke("toStringList", "toStringList() const", typeof(List<string>));
        }
        ~QProcessEnvironment() {
            interceptor.Invoke("~QProcessEnvironment", "~QProcessEnvironment()", typeof(void));
        }
        public void Dispose() {
            interceptor.Invoke("~QProcessEnvironment", "~QProcessEnvironment()", typeof(void));
        }
        public static bool operator==(QProcessEnvironment lhs, QProcessEnvironment other) {
            return (bool) staticInterceptor.Invoke("operator==#", "operator==(const QProcessEnvironment&) const", typeof(bool), typeof(QProcessEnvironment), lhs, typeof(QProcessEnvironment), other);
        }
        public static bool operator!=(QProcessEnvironment lhs, QProcessEnvironment other) {
            return !(bool) staticInterceptor.Invoke("operator==#", "operator==(const QProcessEnvironment&) const", typeof(bool), typeof(QProcessEnvironment), lhs, typeof(QProcessEnvironment), other);
        }
        public static QProcessEnvironment SystemEnvironment() {
            return (QProcessEnvironment) staticInterceptor.Invoke("systemEnvironment", "systemEnvironment()", typeof(QProcessEnvironment));
        }
    }
}
