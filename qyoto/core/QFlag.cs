//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {
    using System;
    [SmokeClass("QFlag")]
    public class QFlag : Object, IDisposable {
        protected SmokeInvocation interceptor = null;
        private IntPtr smokeObject;
        protected QFlag(Type dummy) {}
        protected void CreateProxy() {
            interceptor = new SmokeInvocation(typeof(QFlag), this);
        }
        private static SmokeInvocation staticInterceptor = null;
        static QFlag() {
            staticInterceptor = new SmokeInvocation(typeof(QFlag), null);
        }
        public QFlag(int i) : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("QFlag$", "QFlag(int)", typeof(void), typeof(int), i);
        }
        ~QFlag() {
            interceptor.Invoke("~QFlag", "~QFlag()", typeof(void));
        }
        public void Dispose() {
            interceptor.Invoke("~QFlag", "~QFlag()", typeof(void));
        }
        public static int operatorint(QFlag lhs) {
            return (int) staticInterceptor.Invoke("operator int", "operator int() const", typeof(int), typeof(QFlag), lhs);
        }
    }
}
