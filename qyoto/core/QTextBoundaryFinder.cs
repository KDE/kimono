//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {
    using System;
    [SmokeClass("QTextBoundaryFinder")]
    public class QTextBoundaryFinder : Object, IDisposable {
        protected SmokeInvocation interceptor = null;
        private IntPtr smokeObject;
        protected QTextBoundaryFinder(Type dummy) {}
        protected void CreateProxy() {
            interceptor = new SmokeInvocation(typeof(QTextBoundaryFinder), this);
        }
        public enum BoundaryType {
            Grapheme = 0,
            Word = 1,
            Line = 2,
            Sentence = 3,
        }
        public enum BoundaryReason {
            NotAtBoundary = 0,
            StartWord = 1,
            EndWord = 2,
        }
        public QTextBoundaryFinder() : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("QTextBoundaryFinder", "QTextBoundaryFinder()", typeof(void));
        }
        public QTextBoundaryFinder(QTextBoundaryFinder other) : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("QTextBoundaryFinder#", "QTextBoundaryFinder(const QTextBoundaryFinder&)", typeof(void), typeof(QTextBoundaryFinder), other);
        }
        public QTextBoundaryFinder(QTextBoundaryFinder.BoundaryType type, string arg2) : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("QTextBoundaryFinder$$", "QTextBoundaryFinder(QTextBoundaryFinder::BoundaryType, const QString&)", typeof(void), typeof(QTextBoundaryFinder.BoundaryType), type, typeof(string), arg2);
        }
        public QTextBoundaryFinder(QTextBoundaryFinder.BoundaryType type, QChar chars, int length, Pointer<byte> buffer, int bufferSize) : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("QTextBoundaryFinder$#$$$", "QTextBoundaryFinder(QTextBoundaryFinder::BoundaryType, const QChar*, int, unsigned char*, int)", typeof(void), typeof(QTextBoundaryFinder.BoundaryType), type, typeof(QChar), chars, typeof(int), length, typeof(Pointer<byte>), buffer, typeof(int), bufferSize);
        }
        public QTextBoundaryFinder(QTextBoundaryFinder.BoundaryType type, QChar chars, int length, Pointer<byte> buffer) : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("QTextBoundaryFinder$#$$", "QTextBoundaryFinder(QTextBoundaryFinder::BoundaryType, const QChar*, int, unsigned char*)", typeof(void), typeof(QTextBoundaryFinder.BoundaryType), type, typeof(QChar), chars, typeof(int), length, typeof(Pointer<byte>), buffer);
        }
        public QTextBoundaryFinder(QTextBoundaryFinder.BoundaryType type, QChar chars, int length) : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("QTextBoundaryFinder$#$", "QTextBoundaryFinder(QTextBoundaryFinder::BoundaryType, const QChar*, int)", typeof(void), typeof(QTextBoundaryFinder.BoundaryType), type, typeof(QChar), chars, typeof(int), length);
        }
        public bool IsValid() {
            return (bool) interceptor.Invoke("isValid", "isValid() const", typeof(bool));
        }
        public QTextBoundaryFinder.BoundaryType type() {
            return (QTextBoundaryFinder.BoundaryType) interceptor.Invoke("type", "type() const", typeof(QTextBoundaryFinder.BoundaryType));
        }
        public string String() {
            return (string) interceptor.Invoke("string", "string() const", typeof(string));
        }
        public void ToStart() {
            interceptor.Invoke("toStart", "toStart()", typeof(void));
        }
        public void ToEnd() {
            interceptor.Invoke("toEnd", "toEnd()", typeof(void));
        }
        public int Position() {
            return (int) interceptor.Invoke("position", "position() const", typeof(int));
        }
        public void SetPosition(int position) {
            interceptor.Invoke("setPosition$", "setPosition(int)", typeof(void), typeof(int), position);
        }
        public int ToNextBoundary() {
            return (int) interceptor.Invoke("toNextBoundary", "toNextBoundary()", typeof(int));
        }
        public int ToPreviousBoundary() {
            return (int) interceptor.Invoke("toPreviousBoundary", "toPreviousBoundary()", typeof(int));
        }
        public bool IsAtBoundary() {
            return (bool) interceptor.Invoke("isAtBoundary", "isAtBoundary() const", typeof(bool));
        }
        public uint BoundaryReasons() {
            return (uint) interceptor.Invoke("boundaryReasons", "boundaryReasons() const", typeof(uint));
        }
        ~QTextBoundaryFinder() {
            interceptor.Invoke("~QTextBoundaryFinder", "~QTextBoundaryFinder()", typeof(void));
        }
        public void Dispose() {
            interceptor.Invoke("~QTextBoundaryFinder", "~QTextBoundaryFinder()", typeof(void));
        }
    }
}
