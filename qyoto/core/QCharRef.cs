//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {
    using System;
    [SmokeClass("QCharRef")]
    public class QCharRef : Object {
        protected SmokeInvocation interceptor = null;
        private IntPtr smokeObject;
        protected QCharRef(Type dummy) {}
        protected void CreateProxy() {
            interceptor = new SmokeInvocation(typeof(QCharRef), this);
        }
        private static SmokeInvocation staticInterceptor = null;
        static QCharRef() {
            staticInterceptor = new SmokeInvocation(typeof(QCharRef), null);
        }
        public bool IsNull() {
            return (bool) interceptor.Invoke("isNull", "isNull() const", typeof(bool));
        }
        public bool IsPrint() {
            return (bool) interceptor.Invoke("isPrint", "isPrint() const", typeof(bool));
        }
        public bool IsPunct() {
            return (bool) interceptor.Invoke("isPunct", "isPunct() const", typeof(bool));
        }
        public bool IsSpace() {
            return (bool) interceptor.Invoke("isSpace", "isSpace() const", typeof(bool));
        }
        public bool IsMark() {
            return (bool) interceptor.Invoke("isMark", "isMark() const", typeof(bool));
        }
        public bool IsLetter() {
            return (bool) interceptor.Invoke("isLetter", "isLetter() const", typeof(bool));
        }
        public bool IsNumber() {
            return (bool) interceptor.Invoke("isNumber", "isNumber() const", typeof(bool));
        }
        public bool IsLetterOrNumber() {
            return (bool) interceptor.Invoke("isLetterOrNumber", "isLetterOrNumber()", typeof(bool));
        }
        public bool IsDigit() {
            return (bool) interceptor.Invoke("isDigit", "isDigit() const", typeof(bool));
        }
        public bool IsLower() {
            return (bool) interceptor.Invoke("isLower", "isLower() const", typeof(bool));
        }
        public bool IsUpper() {
            return (bool) interceptor.Invoke("isUpper", "isUpper() const", typeof(bool));
        }
        public bool IsTitleCase() {
            return (bool) interceptor.Invoke("isTitleCase", "isTitleCase() const", typeof(bool));
        }
        public int DigitValue() {
            return (int) interceptor.Invoke("digitValue", "digitValue() const", typeof(int));
        }
        public QChar ToLower() {
            return (QChar) interceptor.Invoke("toLower", "toLower() const", typeof(QChar));
        }
        public QChar ToUpper() {
            return (QChar) interceptor.Invoke("toUpper", "toUpper() const", typeof(QChar));
        }
        public QChar ToTitleCase() {
            return (QChar) interceptor.Invoke("toTitleCase", "toTitleCase() const", typeof(QChar));
        }
        public QChar.Category Category() {
            return (QChar.Category) interceptor.Invoke("category", "category() const", typeof(QChar.Category));
        }
        public QChar.Direction Direction() {
            return (QChar.Direction) interceptor.Invoke("direction", "direction() const", typeof(QChar.Direction));
        }
        public QChar.Joining Joining() {
            return (QChar.Joining) interceptor.Invoke("joining", "joining() const", typeof(QChar.Joining));
        }
        public bool HasMirrored() {
            return (bool) interceptor.Invoke("hasMirrored", "hasMirrored() const", typeof(bool));
        }
        public QChar MirroredChar() {
            return (QChar) interceptor.Invoke("mirroredChar", "mirroredChar() const", typeof(QChar));
        }
        public string Decomposition() {
            return (string) interceptor.Invoke("decomposition", "decomposition() const", typeof(string));
        }
        public QChar.Decomposition DecompositionTag() {
            return (QChar.Decomposition) interceptor.Invoke("decompositionTag", "decompositionTag() const", typeof(QChar.Decomposition));
        }
        public ushort CombiningClass() {
            return (ushort) interceptor.Invoke("combiningClass", "combiningClass() const", typeof(ushort));
        }
        public QChar.UnicodeVersion UnicodeVersion() {
            return (QChar.UnicodeVersion) interceptor.Invoke("unicodeVersion", "unicodeVersion() const", typeof(QChar.UnicodeVersion));
        }
        public ushort Cell() {
            return (ushort) interceptor.Invoke("cell", "cell() const", typeof(ushort));
        }
        public ushort Row() {
            return (ushort) interceptor.Invoke("row", "row() const", typeof(ushort));
        }
        public void SetCell(ushort cell) {
            interceptor.Invoke("setCell$", "setCell(uchar)", typeof(void), typeof(ushort), cell);
        }
        public void SetRow(ushort row) {
            interceptor.Invoke("setRow$", "setRow(uchar)", typeof(void), typeof(ushort), row);
        }
        public char ToAscii() {
            return (char) interceptor.Invoke("toAscii", "toAscii() const", typeof(char));
        }
        public char ToLatin1() {
            return (char) interceptor.Invoke("toLatin1", "toLatin1() const", typeof(char));
        }
        public short Unicode() {
            return (short) interceptor.Invoke("unicode", "unicode()", typeof(short));
        }
        public static QChar operatorQChar(QCharRef lhs) {
            return (QChar) staticInterceptor.Invoke("operator QChar", "operator QChar() const", typeof(QChar), typeof(QCharRef), lhs);
        }
    }
}
