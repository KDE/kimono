//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {
    using System;
    /// <remarks> See <see cref="IQSequentialAnimationGroupSignals"></see> for signals emitted by QSequentialAnimationGroup
    /// </remarks>
    [SmokeClass("QSequentialAnimationGroup")]
    public class QSequentialAnimationGroup : QAnimationGroup, IDisposable {
        protected QSequentialAnimationGroup(Type dummy) : base((Type) null) {}
        protected new void CreateProxy() {
            interceptor = new SmokeInvocation(typeof(QSequentialAnimationGroup), this);
        }
        private static SmokeInvocation staticInterceptor = null;
        static QSequentialAnimationGroup() {
            staticInterceptor = new SmokeInvocation(typeof(QSequentialAnimationGroup), null);
        }
        [Q_PROPERTY("QAbstractAnimation*", "currentAnimation")]
        public QAbstractAnimation CurrentAnimation {
            get { return (QAbstractAnimation) interceptor.Invoke("currentAnimation", "currentAnimation()", typeof(QAbstractAnimation)); }
            set { interceptor.Invoke("currentAnimationChanged#", "currentAnimationChanged(QAbstractAnimation*)", typeof(void), typeof(QAbstractAnimation), value); }
        }
        // QSequentialAnimationGroup* QSequentialAnimationGroup(QSequentialAnimationGroupPrivate& arg1,QObject* arg2); >>>> NOT CONVERTED
        public QSequentialAnimationGroup(QObject parent) : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("QSequentialAnimationGroup#", "QSequentialAnimationGroup(QObject*)", typeof(void), typeof(QObject), parent);
        }
        public QSequentialAnimationGroup() : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("QSequentialAnimationGroup", "QSequentialAnimationGroup()", typeof(void));
        }
        public QPauseAnimation AddPause(int msecs) {
            return (QPauseAnimation) interceptor.Invoke("addPause$", "addPause(int)", typeof(QPauseAnimation), typeof(int), msecs);
        }
        public QPauseAnimation InsertPause(int index, int msecs) {
            return (QPauseAnimation) interceptor.Invoke("insertPause$$", "insertPause(int, int)", typeof(QPauseAnimation), typeof(int), index, typeof(int), msecs);
        }
        [SmokeMethod("duration() const")]
        public override int duration() {
            return (int) interceptor.Invoke("duration", "duration() const", typeof(int));
        }
        [SmokeMethod("event(QEvent*)")]
        protected override bool Event(QEvent arg1) {
            return (bool) interceptor.Invoke("event#", "event(QEvent*)", typeof(bool), typeof(QEvent), arg1);
        }
        [SmokeMethod("updateCurrentTime(int)")]
        protected override void UpdateCurrentTime(int arg1) {
            interceptor.Invoke("updateCurrentTime$", "updateCurrentTime(int)", typeof(void), typeof(int), arg1);
        }
        [SmokeMethod("updateState(QAbstractAnimation::State, QAbstractAnimation::State)")]
        protected override void UpdateState(QAbstractAnimation.State newState, QAbstractAnimation.State oldState) {
            interceptor.Invoke("updateState$$", "updateState(QAbstractAnimation::State, QAbstractAnimation::State)", typeof(void), typeof(QAbstractAnimation.State), newState, typeof(QAbstractAnimation.State), oldState);
        }
        [SmokeMethod("updateDirection(QAbstractAnimation::Direction)")]
        protected override void UpdateDirection(QAbstractAnimation.Direction direction) {
            interceptor.Invoke("updateDirection$", "updateDirection(QAbstractAnimation::Direction)", typeof(void), typeof(QAbstractAnimation.Direction), direction);
        }
        ~QSequentialAnimationGroup() {
            interceptor.Invoke("~QSequentialAnimationGroup", "~QSequentialAnimationGroup()", typeof(void));
        }
        public new void Dispose() {
            interceptor.Invoke("~QSequentialAnimationGroup", "~QSequentialAnimationGroup()", typeof(void));
        }
        public static new string Tr(string s, string c) {
            return (string) staticInterceptor.Invoke("tr$$", "tr(const char*, const char*)", typeof(string), typeof(string), s, typeof(string), c);
        }
        public static new string Tr(string s) {
            return (string) staticInterceptor.Invoke("tr$", "tr(const char*)", typeof(string), typeof(string), s);
        }
        protected new IQSequentialAnimationGroupSignals Emit {
            get { return (IQSequentialAnimationGroupSignals) Q_EMIT; }
        }
    }

    public interface IQSequentialAnimationGroupSignals : IQAnimationGroupSignals {
        [Q_SIGNAL("void currentAnimationChanged(QAbstractAnimation*)")]
        void CurrentAnimationChanged(QAbstractAnimation current);
    }
}
