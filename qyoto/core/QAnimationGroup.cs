//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {
    using System;
    [SmokeClass("QAnimationGroup")]
    public class QAnimationGroup : QAbstractAnimation, IDisposable {
        protected QAnimationGroup(Type dummy) : base((Type) null) {}
        protected new void CreateProxy() {
            interceptor = new SmokeInvocation(typeof(QAnimationGroup), this);
        }
        private static SmokeInvocation staticInterceptor = null;
        static QAnimationGroup() {
            staticInterceptor = new SmokeInvocation(typeof(QAnimationGroup), null);
        }
        // QAnimationGroup* QAnimationGroup(QAnimationGroupPrivate& arg1,QObject* arg2); >>>> NOT CONVERTED
        public QAnimationGroup(QObject parent) : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("QAnimationGroup#", "QAnimationGroup(QObject*)", typeof(void), typeof(QObject), parent);
        }
        public QAnimationGroup() : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("QAnimationGroup", "QAnimationGroup()", typeof(void));
        }
        public QAbstractAnimation AnimationAt(int index) {
            return (QAbstractAnimation) interceptor.Invoke("animationAt$", "animationAt(int) const", typeof(QAbstractAnimation), typeof(int), index);
        }
        public int AnimationCount() {
            return (int) interceptor.Invoke("animationCount", "animationCount() const", typeof(int));
        }
        public int IndexOfAnimation(QAbstractAnimation animation) {
            return (int) interceptor.Invoke("indexOfAnimation#", "indexOfAnimation(QAbstractAnimation*) const", typeof(int), typeof(QAbstractAnimation), animation);
        }
        public void AddAnimation(QAbstractAnimation animation) {
            interceptor.Invoke("addAnimation#", "addAnimation(QAbstractAnimation*)", typeof(void), typeof(QAbstractAnimation), animation);
        }
        public void InsertAnimation(int index, QAbstractAnimation animation) {
            interceptor.Invoke("insertAnimation$#", "insertAnimation(int, QAbstractAnimation*)", typeof(void), typeof(int), index, typeof(QAbstractAnimation), animation);
        }
        public void RemoveAnimation(QAbstractAnimation animation) {
            interceptor.Invoke("removeAnimation#", "removeAnimation(QAbstractAnimation*)", typeof(void), typeof(QAbstractAnimation), animation);
        }
        public QAbstractAnimation TakeAnimation(int index) {
            return (QAbstractAnimation) interceptor.Invoke("takeAnimation$", "takeAnimation(int)", typeof(QAbstractAnimation), typeof(int), index);
        }
        public void Clear() {
            interceptor.Invoke("clear", "clear()", typeof(void));
        }
        [SmokeMethod("event(QEvent*)")]
        protected override bool Event(QEvent arg1) {
            return (bool) interceptor.Invoke("event#", "event(QEvent*)", typeof(bool), typeof(QEvent), arg1);
        }
        // WARNING: Unimplemented C++ pure virtual - DO NOT CALL
        [SmokeMethod("updateCurrentTime(int)")]
        protected override void UpdateCurrentTime(int currentTime) {
            interceptor.Invoke("updateCurrentTime$", "updateCurrentTime(int)", typeof(void), typeof(int), currentTime);
        }
        // WARNING: Unimplemented C++ pure virtual - DO NOT CALL
        [SmokeMethod("duration() const")]
        public override int duration() {
            return (int) interceptor.Invoke("duration", "duration() const", typeof(int));
        }
        ~QAnimationGroup() {
            interceptor.Invoke("~QAnimationGroup", "~QAnimationGroup()", typeof(void));
        }
        public new void Dispose() {
            interceptor.Invoke("~QAnimationGroup", "~QAnimationGroup()", typeof(void));
        }
        public static new string Tr(string s, string c) {
            return (string) staticInterceptor.Invoke("tr$$", "tr(const char*, const char*)", typeof(string), typeof(string), s, typeof(string), c);
        }
        public static new string Tr(string s) {
            return (string) staticInterceptor.Invoke("tr$", "tr(const char*)", typeof(string), typeof(string), s);
        }
        protected new IQAnimationGroupSignals Emit {
            get { return (IQAnimationGroupSignals) Q_EMIT; }
        }
    }

    public interface IQAnimationGroupSignals : IQAbstractAnimationSignals {
    }
}
