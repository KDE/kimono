//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {
    using System;
    [SmokeClass("QParallelAnimationGroup")]
    public class QParallelAnimationGroup : QAnimationGroup, IDisposable {
        protected QParallelAnimationGroup(Type dummy) : base((Type) null) {}
        protected new void CreateProxy() {
            interceptor = new SmokeInvocation(typeof(QParallelAnimationGroup), this);
        }
        private static SmokeInvocation staticInterceptor = null;
        static QParallelAnimationGroup() {
            staticInterceptor = new SmokeInvocation(typeof(QParallelAnimationGroup), null);
        }
        // QParallelAnimationGroup* QParallelAnimationGroup(QParallelAnimationGroupPrivate& arg1,QObject* arg2); >>>> NOT CONVERTED
        public QParallelAnimationGroup(QObject parent) : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("QParallelAnimationGroup#", "QParallelAnimationGroup(QObject*)", typeof(void), typeof(QObject), parent);
        }
        public QParallelAnimationGroup() : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("QParallelAnimationGroup", "QParallelAnimationGroup()", typeof(void));
        }
        [SmokeMethod("duration() const")]
        public override int duration() {
            return (int) interceptor.Invoke("duration", "duration() const", typeof(int));
        }
        [SmokeMethod("event(QEvent*)")]
        protected override bool Event(QEvent arg1) {
            return (bool) interceptor.Invoke("event#", "event(QEvent*)", typeof(bool), typeof(QEvent), arg1);
        }
        [SmokeMethod("updateCurrentTime(int)")]
        protected override void UpdateCurrentTime(int currentTime) {
            interceptor.Invoke("updateCurrentTime$", "updateCurrentTime(int)", typeof(void), typeof(int), currentTime);
        }
        [SmokeMethod("updateState(QAbstractAnimation::State, QAbstractAnimation::State)")]
        protected override void UpdateState(QAbstractAnimation.State newState, QAbstractAnimation.State oldState) {
            interceptor.Invoke("updateState$$", "updateState(QAbstractAnimation::State, QAbstractAnimation::State)", typeof(void), typeof(QAbstractAnimation.State), newState, typeof(QAbstractAnimation.State), oldState);
        }
        [SmokeMethod("updateDirection(QAbstractAnimation::Direction)")]
        protected override void UpdateDirection(QAbstractAnimation.Direction direction) {
            interceptor.Invoke("updateDirection$", "updateDirection(QAbstractAnimation::Direction)", typeof(void), typeof(QAbstractAnimation.Direction), direction);
        }
        ~QParallelAnimationGroup() {
            interceptor.Invoke("~QParallelAnimationGroup", "~QParallelAnimationGroup()", typeof(void));
        }
        public new void Dispose() {
            interceptor.Invoke("~QParallelAnimationGroup", "~QParallelAnimationGroup()", typeof(void));
        }
        public static new string Tr(string s, string c) {
            return (string) staticInterceptor.Invoke("tr$$", "tr(const char*, const char*)", typeof(string), typeof(string), s, typeof(string), c);
        }
        public static new string Tr(string s) {
            return (string) staticInterceptor.Invoke("tr$", "tr(const char*)", typeof(string), typeof(string), s);
        }
        protected new IQParallelAnimationGroupSignals Emit {
            get { return (IQParallelAnimationGroupSignals) Q_EMIT; }
        }
    }

    public interface IQParallelAnimationGroupSignals : IQAnimationGroupSignals {
    }
}
