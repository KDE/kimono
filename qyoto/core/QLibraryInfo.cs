//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {
    using System;
    [SmokeClass("QLibraryInfo")]
    public class QLibraryInfo : Object {
        protected SmokeInvocation interceptor = null;
        private IntPtr smokeObject;
        protected QLibraryInfo(Type dummy) {}
        private static SmokeInvocation staticInterceptor = null;
        static QLibraryInfo() {
            staticInterceptor = new SmokeInvocation(typeof(QLibraryInfo), null);
        }
        public enum LibraryLocation {
            PrefixPath = 0,
            DocumentationPath = 1,
            HeadersPath = 2,
            LibrariesPath = 3,
            BinariesPath = 4,
            PluginsPath = 5,
            DataPath = 6,
            TranslationsPath = 7,
            SettingsPath = 8,
            DemosPath = 9,
            ExamplesPath = 10,
        }
        public static string Licensee() {
            return (string) staticInterceptor.Invoke("licensee", "licensee()", typeof(string));
        }
        public static string LicensedProducts() {
            return (string) staticInterceptor.Invoke("licensedProducts", "licensedProducts()", typeof(string));
        }
        public static string BuildKey() {
            return (string) staticInterceptor.Invoke("buildKey", "buildKey()", typeof(string));
        }
        public static QDate BuildDate() {
            return (QDate) staticInterceptor.Invoke("buildDate", "buildDate()", typeof(QDate));
        }
        public static string Location(QLibraryInfo.LibraryLocation arg1) {
            return (string) staticInterceptor.Invoke("location$", "location(QLibraryInfo::LibraryLocation)", typeof(string), typeof(QLibraryInfo.LibraryLocation), arg1);
        }
    }
}
