//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {
    using System;
    using System.Runtime.InteropServices;
    [SmokeClass("QMatrix4x4")]
    public class QMatrix4x4 : Object, IDisposable {
        protected SmokeInvocation interceptor = null;
        private IntPtr smokeObject;
        protected QMatrix4x4(Type dummy) {}
        protected void CreateProxy() {
            interceptor = new SmokeInvocation(typeof(QMatrix4x4), this);
        }
        private static SmokeInvocation staticInterceptor = null;
        static QMatrix4x4() {
            staticInterceptor = new SmokeInvocation(typeof(QMatrix4x4), null);
        }
        public const int Identity = 0x0001;
        public const int General = 0x0002;
        public const int Translation = 0x0004;
        public const int scale = 0x0008;
        public const int Rotation = 0x0010;
        // QMatrix4x4* QMatrix4x4(const QGenericMatrix<N,M,qreal>& arg1); >>>> NOT CONVERTED
        // QGenericMatrix<3,3,qreal> normalMatrix(); >>>> NOT CONVERTED
        public QMatrix4x4() : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("QMatrix4x4", "QMatrix4x4()", typeof(void));
        }
        public QMatrix4x4(ref double values) : this((Type) null) {
            CreateProxy();
            StackItem[] stack = new StackItem[2];
            stack[1].s_double = values;
            interceptor.Invoke("QMatrix4x4$", "QMatrix4x4(const qreal*)", stack);
            values = stack[1].s_double;
            return;
        }
        public QMatrix4x4(double m11, double m12, double m13, double m14, double m21, double m22, double m23, double m24, double m31, double m32, double m33, double m34, double m41, double m42, double m43, double m44) : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("QMatrix4x4$$$$$$$$$$$$$$$$", "QMatrix4x4(qreal, qreal, qreal, qreal, qreal, qreal, qreal, qreal, qreal, qreal, qreal, qreal, qreal, qreal, qreal, qreal)", typeof(void), typeof(double), m11, typeof(double), m12, typeof(double), m13, typeof(double), m14, typeof(double), m21, typeof(double), m22, typeof(double), m23, typeof(double), m24, typeof(double), m31, typeof(double), m32, typeof(double), m33, typeof(double), m34, typeof(double), m41, typeof(double), m42, typeof(double), m43, typeof(double), m44);
        }
        public QMatrix4x4(ref double values, int cols, int rows) : this((Type) null) {
            CreateProxy();
            StackItem[] stack = new StackItem[4];
            stack[1].s_double = values;
            stack[2].s_int = cols;
            stack[3].s_int = rows;
            interceptor.Invoke("QMatrix4x4$$$", "QMatrix4x4(const qreal*, int, int)", stack);
            values = stack[1].s_double;
            return;
        }
        public QMatrix4x4(QTransform transform) : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("QMatrix4x4#", "QMatrix4x4(const QTransform&)", typeof(void), typeof(QTransform), transform);
        }
        public QMatrix4x4(QMatrix matrix) : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("QMatrix4x4#", "QMatrix4x4(const QMatrix&)", typeof(void), typeof(QMatrix), matrix);
        }
        public QVector4D Column(int index) {
            return (QVector4D) interceptor.Invoke("column$", "column(int) const", typeof(QVector4D), typeof(int), index);
        }
        public void SetColumn(int index, QVector4D value) {
            interceptor.Invoke("setColumn$#", "setColumn(int, const QVector4D&)", typeof(void), typeof(int), index, typeof(QVector4D), value);
        }
        public QVector4D Row(int index) {
            return (QVector4D) interceptor.Invoke("row$", "row(int) const", typeof(QVector4D), typeof(int), index);
        }
        public void SetRow(int index, QVector4D value) {
            interceptor.Invoke("setRow$#", "setRow(int, const QVector4D&)", typeof(void), typeof(int), index, typeof(QVector4D), value);
        }
        public bool IsIdentity() {
            return (bool) interceptor.Invoke("isIdentity", "isIdentity() const", typeof(bool));
        }
        public void SetToIdentity() {
            interceptor.Invoke("setToIdentity", "setToIdentity()", typeof(void));
        }
        public void Fill(double value) {
            interceptor.Invoke("fill$", "fill(qreal)", typeof(void), typeof(double), value);
        }
        public double Determinant() {
            return (double) interceptor.Invoke("determinant", "determinant() const", typeof(double));
        }
        public QMatrix4x4 Inverted(ref bool invertible) {
            StackItem[] stack = new StackItem[2];
            stack[1].s_bool = invertible;
            interceptor.Invoke("inverted$", "inverted(bool*) const", stack);
            invertible = stack[1].s_bool;
            object returnValue = ((GCHandle) stack[0].s_class).Target;
#if DEBUG
            DebugGCHandle.Free((GCHandle) stack[0].s_class);
#else
            ((GCHandle) stack[0].s_class).Free();
#endif
            return (QMatrix4x4) returnValue;
        }
        public QMatrix4x4 Inverted() {
            return (QMatrix4x4) interceptor.Invoke("inverted", "inverted() const", typeof(QMatrix4x4));
        }
        public QMatrix4x4 Transposed() {
            return (QMatrix4x4) interceptor.Invoke("transposed", "transposed() const", typeof(QMatrix4x4));
        }
        public override bool Equals(object o) {
            if (!(o is QMatrix4x4)) { return false; }
            return this == (QMatrix4x4) o;
        }
        public override int GetHashCode() {
            return interceptor.GetHashCode();
        }
        public void Scale(QVector3D vector) {
            interceptor.Invoke("scale#", "scale(const QVector3D&)", typeof(void), typeof(QVector3D), vector);
        }
        public void Translate(QVector3D vector) {
            interceptor.Invoke("translate#", "translate(const QVector3D&)", typeof(void), typeof(QVector3D), vector);
        }
        public void Rotate(double angle, QVector3D vector) {
            interceptor.Invoke("rotate$#", "rotate(qreal, const QVector3D&)", typeof(void), typeof(double), angle, typeof(QVector3D), vector);
        }
        public void Scale(double x, double y) {
            interceptor.Invoke("scale$$", "scale(qreal, qreal)", typeof(void), typeof(double), x, typeof(double), y);
        }
        public void Scale(double x, double y, double z) {
            interceptor.Invoke("scale$$$", "scale(qreal, qreal, qreal)", typeof(void), typeof(double), x, typeof(double), y, typeof(double), z);
        }
        public void Scale(double factor) {
            interceptor.Invoke("scale$", "scale(qreal)", typeof(void), typeof(double), factor);
        }
        public void Translate(double x, double y) {
            interceptor.Invoke("translate$$", "translate(qreal, qreal)", typeof(void), typeof(double), x, typeof(double), y);
        }
        public void Translate(double x, double y, double z) {
            interceptor.Invoke("translate$$$", "translate(qreal, qreal, qreal)", typeof(void), typeof(double), x, typeof(double), y, typeof(double), z);
        }
        public void Rotate(double angle, double x, double y, double z) {
            interceptor.Invoke("rotate$$$$", "rotate(qreal, qreal, qreal, qreal)", typeof(void), typeof(double), angle, typeof(double), x, typeof(double), y, typeof(double), z);
        }
        public void Rotate(double angle, double x, double y) {
            interceptor.Invoke("rotate$$$", "rotate(qreal, qreal, qreal)", typeof(void), typeof(double), angle, typeof(double), x, typeof(double), y);
        }
        public void Rotate(QQuaternion quaternion) {
            interceptor.Invoke("rotate#", "rotate(const QQuaternion&)", typeof(void), typeof(QQuaternion), quaternion);
        }
        public void Ortho(QRect rect) {
            interceptor.Invoke("ortho#", "ortho(const QRect&)", typeof(void), typeof(QRect), rect);
        }
        public void Ortho(QRectF rect) {
            interceptor.Invoke("ortho#", "ortho(const QRectF&)", typeof(void), typeof(QRectF), rect);
        }
        public void Ortho(double left, double right, double bottom, double top, double nearPlane, double farPlane) {
            interceptor.Invoke("ortho$$$$$$", "ortho(qreal, qreal, qreal, qreal, qreal, qreal)", typeof(void), typeof(double), left, typeof(double), right, typeof(double), bottom, typeof(double), top, typeof(double), nearPlane, typeof(double), farPlane);
        }
        public void Frustum(double left, double right, double bottom, double top, double nearPlane, double farPlane) {
            interceptor.Invoke("frustum$$$$$$", "frustum(qreal, qreal, qreal, qreal, qreal, qreal)", typeof(void), typeof(double), left, typeof(double), right, typeof(double), bottom, typeof(double), top, typeof(double), nearPlane, typeof(double), farPlane);
        }
        public void Perspective(double angle, double aspect, double nearPlane, double farPlane) {
            interceptor.Invoke("perspective$$$$", "perspective(qreal, qreal, qreal, qreal)", typeof(void), typeof(double), angle, typeof(double), aspect, typeof(double), nearPlane, typeof(double), farPlane);
        }
        public void LookAt(QVector3D eye, QVector3D center, QVector3D up) {
            interceptor.Invoke("lookAt###", "lookAt(const QVector3D&, const QVector3D&, const QVector3D&)", typeof(void), typeof(QVector3D), eye, typeof(QVector3D), center, typeof(QVector3D), up);
        }
        public void FlipCoordinates() {
            interceptor.Invoke("flipCoordinates", "flipCoordinates()", typeof(void));
        }
        public void CopyDataTo(ref double values) {
            StackItem[] stack = new StackItem[2];
            stack[1].s_double = values;
            interceptor.Invoke("copyDataTo$", "copyDataTo(qreal*) const", stack);
            values = stack[1].s_double;
            return;
        }
        public QMatrix ToAffine() {
            return (QMatrix) interceptor.Invoke("toAffine", "toAffine() const", typeof(QMatrix));
        }
        public QTransform ToTransform() {
            return (QTransform) interceptor.Invoke("toTransform", "toTransform() const", typeof(QTransform));
        }
        public QTransform ToTransform(double distanceToPlane) {
            return (QTransform) interceptor.Invoke("toTransform$", "toTransform(qreal) const", typeof(QTransform), typeof(double), distanceToPlane);
        }
        public QPoint Map(QPoint point) {
            return (QPoint) interceptor.Invoke("map#", "map(const QPoint&) const", typeof(QPoint), typeof(QPoint), point);
        }
        public QPointF Map(QPointF point) {
            return (QPointF) interceptor.Invoke("map#", "map(const QPointF&) const", typeof(QPointF), typeof(QPointF), point);
        }
        public QVector3D Map(QVector3D point) {
            return (QVector3D) interceptor.Invoke("map#", "map(const QVector3D&) const", typeof(QVector3D), typeof(QVector3D), point);
        }
        public QVector3D MapVector(QVector3D vector) {
            return (QVector3D) interceptor.Invoke("mapVector#", "mapVector(const QVector3D&) const", typeof(QVector3D), typeof(QVector3D), vector);
        }
        public QVector4D Map(QVector4D point) {
            return (QVector4D) interceptor.Invoke("map#", "map(const QVector4D&) const", typeof(QVector4D), typeof(QVector4D), point);
        }
        public QRect MapRect(QRect rect) {
            return (QRect) interceptor.Invoke("mapRect#", "mapRect(const QRect&) const", typeof(QRect), typeof(QRect), rect);
        }
        public QRectF MapRect(QRectF rect) {
            return (QRectF) interceptor.Invoke("mapRect#", "mapRect(const QRectF&) const", typeof(QRectF), typeof(QRectF), rect);
        }
        public double Data() {
            return (double) interceptor.Invoke("data", "data()", typeof(double));
        }
        public double ConstData() {
            return (double) interceptor.Invoke("constData", "constData() const", typeof(double));
        }
        public void Optimize() {
            interceptor.Invoke("optimize", "optimize()", typeof(void));
        }
        ~QMatrix4x4() {
            interceptor.Invoke("~QMatrix4x4", "~QMatrix4x4()", typeof(void));
        }
        public void Dispose() {
            interceptor.Invoke("~QMatrix4x4", "~QMatrix4x4()", typeof(void));
        }
        public static QMatrix4x4 operator*(QMatrix4x4 lhs, QMatrix4x4 other) {
            return (QMatrix4x4) staticInterceptor.Invoke("operator*=#", "operator*=(const QMatrix4x4&)", typeof(QMatrix4x4), typeof(QMatrix4x4), lhs, typeof(QMatrix4x4), other);
        }
        public static QMatrix4x4 operator*(QMatrix4x4 lhs, double factor) {
            return (QMatrix4x4) staticInterceptor.Invoke("operator*=$", "operator*=(qreal)", typeof(QMatrix4x4), typeof(QMatrix4x4), lhs, typeof(double), factor);
        }
        public static QMatrix4x4 operator/(QMatrix4x4 lhs, double divisor) {
            return (QMatrix4x4) staticInterceptor.Invoke("operator/=$", "operator/=(qreal)", typeof(QMatrix4x4), typeof(QMatrix4x4), lhs, typeof(double), divisor);
        }
        public static bool operator==(QMatrix4x4 lhs, QMatrix4x4 other) {
            return (bool) staticInterceptor.Invoke("operator==#", "operator==(const QMatrix4x4&) const", typeof(bool), typeof(QMatrix4x4), lhs, typeof(QMatrix4x4), other);
        }
        public static bool operator!=(QMatrix4x4 lhs, QMatrix4x4 other) {
            return !(bool) staticInterceptor.Invoke("operator==#", "operator==(const QMatrix4x4&) const", typeof(bool), typeof(QMatrix4x4), lhs, typeof(QMatrix4x4), other);
        }
        public static QMatrix4x4 operator+(QMatrix4x4 m1, QMatrix4x4 m2) {
            return (QMatrix4x4) staticInterceptor.Invoke("operator+##", "operator+(const QMatrix4x4&, const QMatrix4x4&)", typeof(QMatrix4x4), typeof(QMatrix4x4), m1, typeof(QMatrix4x4), m2);
        }
        public static QMatrix4x4 operator-(QMatrix4x4 m1, QMatrix4x4 m2) {
            return (QMatrix4x4) staticInterceptor.Invoke("operator-##", "operator-(const QMatrix4x4&, const QMatrix4x4&)", typeof(QMatrix4x4), typeof(QMatrix4x4), m1, typeof(QMatrix4x4), m2);
        }
        public static QVector3D operator*(QVector3D vector, QMatrix4x4 matrix) {
            return (QVector3D) staticInterceptor.Invoke("operator*##", "operator*(const QVector3D&, const QMatrix4x4&)", typeof(QVector3D), typeof(QVector3D), vector, typeof(QMatrix4x4), matrix);
        }
        public static QVector3D operator*(QMatrix4x4 matrix, QVector3D vector) {
            return (QVector3D) staticInterceptor.Invoke("operator*##", "operator*(const QMatrix4x4&, const QVector3D&)", typeof(QVector3D), typeof(QMatrix4x4), matrix, typeof(QVector3D), vector);
        }
        public static QVector4D operator*(QVector4D vector, QMatrix4x4 matrix) {
            return (QVector4D) staticInterceptor.Invoke("operator*##", "operator*(const QVector4D&, const QMatrix4x4&)", typeof(QVector4D), typeof(QVector4D), vector, typeof(QMatrix4x4), matrix);
        }
        public static QVector4D operator*(QMatrix4x4 matrix, QVector4D vector) {
            return (QVector4D) staticInterceptor.Invoke("operator*##", "operator*(const QMatrix4x4&, const QVector4D&)", typeof(QVector4D), typeof(QMatrix4x4), matrix, typeof(QVector4D), vector);
        }
        public static QPoint operator*(QPoint point, QMatrix4x4 matrix) {
            return (QPoint) staticInterceptor.Invoke("operator*##", "operator*(const QPoint&, const QMatrix4x4&)", typeof(QPoint), typeof(QPoint), point, typeof(QMatrix4x4), matrix);
        }
        public static QPointF operator*(QPointF point, QMatrix4x4 matrix) {
            return (QPointF) staticInterceptor.Invoke("operator*##", "operator*(const QPointF&, const QMatrix4x4&)", typeof(QPointF), typeof(QPointF), point, typeof(QMatrix4x4), matrix);
        }
        public static QPoint operator*(QMatrix4x4 matrix, QPoint point) {
            return (QPoint) staticInterceptor.Invoke("operator*##", "operator*(const QMatrix4x4&, const QPoint&)", typeof(QPoint), typeof(QMatrix4x4), matrix, typeof(QPoint), point);
        }
        public static QPointF operator*(QMatrix4x4 matrix, QPointF point) {
            return (QPointF) staticInterceptor.Invoke("operator*##", "operator*(const QMatrix4x4&, const QPointF&)", typeof(QPointF), typeof(QMatrix4x4), matrix, typeof(QPointF), point);
        }
        public static QMatrix4x4 operator-(QMatrix4x4 matrix) {
            return (QMatrix4x4) staticInterceptor.Invoke("operator-#", "operator-(const QMatrix4x4&)", typeof(QMatrix4x4), typeof(QMatrix4x4), matrix);
        }
        public static QMatrix4x4 operator*(double factor, QMatrix4x4 matrix) {
            return (QMatrix4x4) staticInterceptor.Invoke("operator*$#", "operator*(qreal, const QMatrix4x4&)", typeof(QMatrix4x4), typeof(double), factor, typeof(QMatrix4x4), matrix);
        }
    }
}
