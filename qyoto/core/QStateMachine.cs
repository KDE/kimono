//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {
    using System;
    using System.Collections.Generic;
    /// <remarks> See <see cref="IQStateMachineSignals"></see> for signals emitted by QStateMachine
    /// </remarks>
    [SmokeClass("QStateMachine")]
    public class QStateMachine : QState, IDisposable {
        protected QStateMachine(Type dummy) : base((Type) null) {}
        [SmokeClass("QStateMachine::SignalEvent")]
        public class SignalEvent : QEvent, IDisposable {
            protected SignalEvent(Type dummy) : base((Type) null) {}
            protected new void CreateProxy() {
                interceptor = new SmokeInvocation(typeof(SignalEvent), this);
            }
            public SignalEvent(QObject sender, int signalIndex, List<QVariant> arguments) : this((Type) null) {
                CreateProxy();
                interceptor.Invoke("SignalEvent#$?", "SignalEvent(QObject*, int, const QList<QVariant>&)", typeof(void), typeof(QObject), sender, typeof(int), signalIndex, typeof(List<QVariant>), arguments);
            }
            public QObject Sender() {
                return (QObject) interceptor.Invoke("sender", "sender() const", typeof(QObject));
            }
            public int SignalIndex() {
                return (int) interceptor.Invoke("signalIndex", "signalIndex() const", typeof(int));
            }
            public List<QVariant> Arguments() {
                return (List<QVariant>) interceptor.Invoke("arguments", "arguments() const", typeof(List<QVariant>));
            }
            ~SignalEvent() {
                interceptor.Invoke("~SignalEvent", "~SignalEvent()", typeof(void));
            }
            public new void Dispose() {
                interceptor.Invoke("~SignalEvent", "~SignalEvent()", typeof(void));
            }
        }
        [SmokeClass("QStateMachine::WrappedEvent")]
        public class WrappedEvent : QEvent, IDisposable {
            protected WrappedEvent(Type dummy) : base((Type) null) {}
            protected new void CreateProxy() {
                interceptor = new SmokeInvocation(typeof(WrappedEvent), this);
            }
            public WrappedEvent(QObject arg1, QEvent arg2) : this((Type) null) {
                CreateProxy();
                interceptor.Invoke("WrappedEvent##", "WrappedEvent(QObject*, QEvent*)", typeof(void), typeof(QObject), arg1, typeof(QEvent), arg2);
            }
            public QObject Object() {
                return (QObject) interceptor.Invoke("object", "object() const", typeof(QObject));
            }
            public QEvent Event() {
                return (QEvent) interceptor.Invoke("event", "event() const", typeof(QEvent));
            }
            ~WrappedEvent() {
                interceptor.Invoke("~WrappedEvent", "~WrappedEvent()", typeof(void));
            }
            public new void Dispose() {
                interceptor.Invoke("~WrappedEvent", "~WrappedEvent()", typeof(void));
            }
        }
        protected new void CreateProxy() {
            interceptor = new SmokeInvocation(typeof(QStateMachine), this);
        }
        private static SmokeInvocation staticInterceptor = null;
        static QStateMachine() {
            staticInterceptor = new SmokeInvocation(typeof(QStateMachine), null);
        }
        public enum EventPriority {
            NormalPriority = 0,
            HighPriority = 1,
        }
        public enum RestorePolicy {
            DontRestoreProperties = 0,
            RestoreProperties = 1,
        }
        public enum Error {
            NoError = 0,
            NoInitialStateError = 1,
            NoDefaultStateInHistoryStateError = 2,
            NoCommonAncestorForTransitionError = 3,
        }
        [Q_PROPERTY("QString", "errorString")]
        public string ErrorString {
            get { return (string) interceptor.Invoke("errorString", "errorString()", typeof(string)); }
        }
        [Q_PROPERTY("QStateMachine::RestorePolicy", "globalRestorePolicy")]
        public QStateMachine.RestorePolicy GlobalRestorePolicy {
            get { return (QStateMachine.RestorePolicy) interceptor.Invoke("globalRestorePolicy", "globalRestorePolicy()", typeof(QStateMachine.RestorePolicy)); }
            set { interceptor.Invoke("setGlobalRestorePolicy$", "setGlobalRestorePolicy(QStateMachine::RestorePolicy)", typeof(void), typeof(QStateMachine.RestorePolicy), value); }
        }
        [Q_PROPERTY("bool", "animated")]
        public bool Animated {
            get { return (bool) interceptor.Invoke("isAnimated", "isAnimated()", typeof(bool)); }
            set { interceptor.Invoke("setAnimated$", "setAnimated(bool)", typeof(void), typeof(bool), value); }
        }
        // QSet<QAbstractState*> configuration(); >>>> NOT CONVERTED
        // QStateMachine* QStateMachine(QStateMachinePrivate& arg1,QObject* arg2); >>>> NOT CONVERTED
        public QStateMachine(QObject parent) : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("QStateMachine#", "QStateMachine(QObject*)", typeof(void), typeof(QObject), parent);
        }
        public QStateMachine() : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("QStateMachine", "QStateMachine()", typeof(void));
        }
        public void AddState(QAbstractState state) {
            interceptor.Invoke("addState#", "addState(QAbstractState*)", typeof(void), typeof(QAbstractState), state);
        }
        public void RemoveState(QAbstractState state) {
            interceptor.Invoke("removeState#", "removeState(QAbstractState*)", typeof(void), typeof(QAbstractState), state);
        }
        public QStateMachine.Error error() {
            return (QStateMachine.Error) interceptor.Invoke("error", "error() const", typeof(QStateMachine.Error));
        }
        public void ClearError() {
            interceptor.Invoke("clearError", "clearError()", typeof(void));
        }
        public bool IsRunning() {
            return (bool) interceptor.Invoke("isRunning", "isRunning() const", typeof(bool));
        }
        public void AddDefaultAnimation(QAbstractAnimation animation) {
            interceptor.Invoke("addDefaultAnimation#", "addDefaultAnimation(QAbstractAnimation*)", typeof(void), typeof(QAbstractAnimation), animation);
        }
        public List<QAbstractAnimation> DefaultAnimations() {
            return (List<QAbstractAnimation>) interceptor.Invoke("defaultAnimations", "defaultAnimations() const", typeof(List<QAbstractAnimation>));
        }
        public void RemoveDefaultAnimation(QAbstractAnimation animation) {
            interceptor.Invoke("removeDefaultAnimation#", "removeDefaultAnimation(QAbstractAnimation*)", typeof(void), typeof(QAbstractAnimation), animation);
        }
        public void PostEvent(QEvent arg1, QStateMachine.EventPriority priority) {
            interceptor.Invoke("postEvent#$", "postEvent(QEvent*, QStateMachine::EventPriority)", typeof(void), typeof(QEvent), arg1, typeof(QStateMachine.EventPriority), priority);
        }
        public void PostEvent(QEvent arg1) {
            interceptor.Invoke("postEvent#", "postEvent(QEvent*)", typeof(void), typeof(QEvent), arg1);
        }
        public int PostDelayedEvent(QEvent arg1, int delay) {
            return (int) interceptor.Invoke("postDelayedEvent#$", "postDelayedEvent(QEvent*, int)", typeof(int), typeof(QEvent), arg1, typeof(int), delay);
        }
        public bool CancelDelayedEvent(int id) {
            return (bool) interceptor.Invoke("cancelDelayedEvent$", "cancelDelayedEvent(int)", typeof(bool), typeof(int), id);
        }
        [SmokeMethod("eventFilter(QObject*, QEvent*)")]
        public override bool EventFilter(QObject watched, QEvent arg2) {
            return (bool) interceptor.Invoke("eventFilter##", "eventFilter(QObject*, QEvent*)", typeof(bool), typeof(QObject), watched, typeof(QEvent), arg2);
        }
        [Q_SLOT("void start()")]
        public void Start() {
            interceptor.Invoke("start", "start()", typeof(void));
        }
        [Q_SLOT("void stop()")]
        public void Stop() {
            interceptor.Invoke("stop", "stop()", typeof(void));
        }
        [SmokeMethod("onEntry(QEvent*)")]
        protected override void OnEntry(QEvent arg1) {
            interceptor.Invoke("onEntry#", "onEntry(QEvent*)", typeof(void), typeof(QEvent), arg1);
        }
        [SmokeMethod("onExit(QEvent*)")]
        protected override void OnExit(QEvent arg1) {
            interceptor.Invoke("onExit#", "onExit(QEvent*)", typeof(void), typeof(QEvent), arg1);
        }
        [SmokeMethod("beginSelectTransitions(QEvent*)")]
        protected virtual void BeginSelectTransitions(QEvent arg1) {
            interceptor.Invoke("beginSelectTransitions#", "beginSelectTransitions(QEvent*)", typeof(void), typeof(QEvent), arg1);
        }
        [SmokeMethod("endSelectTransitions(QEvent*)")]
        protected virtual void EndSelectTransitions(QEvent arg1) {
            interceptor.Invoke("endSelectTransitions#", "endSelectTransitions(QEvent*)", typeof(void), typeof(QEvent), arg1);
        }
        [SmokeMethod("beginMicrostep(QEvent*)")]
        protected virtual void BeginMicrostep(QEvent arg1) {
            interceptor.Invoke("beginMicrostep#", "beginMicrostep(QEvent*)", typeof(void), typeof(QEvent), arg1);
        }
        [SmokeMethod("endMicrostep(QEvent*)")]
        protected virtual void EndMicrostep(QEvent arg1) {
            interceptor.Invoke("endMicrostep#", "endMicrostep(QEvent*)", typeof(void), typeof(QEvent), arg1);
        }
        [SmokeMethod("event(QEvent*)")]
        protected override bool Event(QEvent e) {
            return (bool) interceptor.Invoke("event#", "event(QEvent*)", typeof(bool), typeof(QEvent), e);
        }
        ~QStateMachine() {
            interceptor.Invoke("~QStateMachine", "~QStateMachine()", typeof(void));
        }
        public new void Dispose() {
            interceptor.Invoke("~QStateMachine", "~QStateMachine()", typeof(void));
        }
        public static new string Tr(string s, string c) {
            return (string) staticInterceptor.Invoke("tr$$", "tr(const char*, const char*)", typeof(string), typeof(string), s, typeof(string), c);
        }
        public static new string Tr(string s) {
            return (string) staticInterceptor.Invoke("tr$", "tr(const char*)", typeof(string), typeof(string), s);
        }
        protected new IQStateMachineSignals Emit {
            get { return (IQStateMachineSignals) Q_EMIT; }
        }
    }

    public interface IQStateMachineSignals : IQStateSignals {
        [Q_SIGNAL("void started()")]
        void Started();
        [Q_SIGNAL("void stopped()")]
        void Stopped();
    }
}
