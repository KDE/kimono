//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {
    using System;
    [SmokeClass("QByteRef")]
    public class QByteRef : Object {
        protected SmokeInvocation interceptor = null;
        private IntPtr smokeObject;
        protected QByteRef(Type dummy) {}
        protected void CreateProxy() {
            interceptor = new SmokeInvocation(typeof(QByteRef), this);
        }
        private static SmokeInvocation staticInterceptor = null;
        static QByteRef() {
            staticInterceptor = new SmokeInvocation(typeof(QByteRef), null);
        }
        public override bool Equals(object o) {
            if (!(o is QByteRef)) { return false; }
            return this == (QByteRef) o;
        }
        public override int GetHashCode() {
            return interceptor.GetHashCode();
        }
        public static char operatorchar(QByteRef lhs) {
            return (char) staticInterceptor.Invoke("operator char", "operator char() const", typeof(char), typeof(QByteRef), lhs);
        }
        public static bool operator==(QByteRef lhs, char c) {
            return (bool) staticInterceptor.Invoke("operator==$", "operator==(char) const", typeof(bool), typeof(QByteRef), lhs, typeof(char), c);
        }
        public static bool operator!=(QByteRef lhs, char c) {
            return !(bool) staticInterceptor.Invoke("operator==$", "operator==(char) const", typeof(bool), typeof(QByteRef), lhs, typeof(char), c);
        }
        public static bool operator>(QByteRef lhs, char c) {
            return (bool) staticInterceptor.Invoke("operator>$", "operator>(char) const", typeof(bool), typeof(QByteRef), lhs, typeof(char), c);
        }
        public static bool operator>=(QByteRef lhs, char c) {
            return (bool) staticInterceptor.Invoke("operator>=$", "operator>=(char) const", typeof(bool), typeof(QByteRef), lhs, typeof(char), c);
        }
        public static bool operator<(QByteRef lhs, char c) {
            return (bool) staticInterceptor.Invoke("operator<$", "operator<(char) const", typeof(bool), typeof(QByteRef), lhs, typeof(char), c);
        }
        public static bool operator<=(QByteRef lhs, char c) {
            return (bool) staticInterceptor.Invoke("operator<=$", "operator<=(char) const", typeof(bool), typeof(QByteRef), lhs, typeof(char), c);
        }
    }
}
