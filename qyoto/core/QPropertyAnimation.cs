//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {
    using System;
    [SmokeClass("QPropertyAnimation")]
    public class QPropertyAnimation : QVariantAnimation, IDisposable {
        protected QPropertyAnimation(Type dummy) : base((Type) null) {}
        protected new void CreateProxy() {
            interceptor = new SmokeInvocation(typeof(QPropertyAnimation), this);
        }
        private static SmokeInvocation staticInterceptor = null;
        static QPropertyAnimation() {
            staticInterceptor = new SmokeInvocation(typeof(QPropertyAnimation), null);
        }
        [Q_PROPERTY("QByteArray", "propertyName")]
        public QByteArray PropertyName {
            get { return (QByteArray) interceptor.Invoke("propertyName", "propertyName()", typeof(QByteArray)); }
            set { interceptor.Invoke("setPropertyName#", "setPropertyName(QByteArray)", typeof(void), typeof(QByteArray), value); }
        }
        [Q_PROPERTY("QObject*", "targetObject")]
        public QObject TargetObject {
            get { return (QObject) interceptor.Invoke("targetObject", "targetObject()", typeof(QObject)); }
            set { interceptor.Invoke("setTargetObject#", "setTargetObject(QObject*)", typeof(void), typeof(QObject), value); }
        }
        public QPropertyAnimation(QObject parent) : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("QPropertyAnimation#", "QPropertyAnimation(QObject*)", typeof(void), typeof(QObject), parent);
        }
        public QPropertyAnimation() : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("QPropertyAnimation", "QPropertyAnimation()", typeof(void));
        }
        public QPropertyAnimation(QObject target, QByteArray propertyName, QObject parent) : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("QPropertyAnimation###", "QPropertyAnimation(QObject*, const QByteArray&, QObject*)", typeof(void), typeof(QObject), target, typeof(QByteArray), propertyName, typeof(QObject), parent);
        }
        public QPropertyAnimation(QObject target, QByteArray propertyName) : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("QPropertyAnimation##", "QPropertyAnimation(QObject*, const QByteArray&)", typeof(void), typeof(QObject), target, typeof(QByteArray), propertyName);
        }
        [SmokeMethod("event(QEvent*)")]
        protected override bool Event(QEvent arg1) {
            return (bool) interceptor.Invoke("event#", "event(QEvent*)", typeof(bool), typeof(QEvent), arg1);
        }
        [SmokeMethod("updateCurrentValue(const QVariant&)")]
        protected override void UpdateCurrentValue(QVariant value) {
            interceptor.Invoke("updateCurrentValue#", "updateCurrentValue(const QVariant&)", typeof(void), typeof(QVariant), value);
        }
        [SmokeMethod("updateState(QAbstractAnimation::State, QAbstractAnimation::State)")]
        protected override void UpdateState(QAbstractAnimation.State newState, QAbstractAnimation.State oldState) {
            interceptor.Invoke("updateState$$", "updateState(QAbstractAnimation::State, QAbstractAnimation::State)", typeof(void), typeof(QAbstractAnimation.State), newState, typeof(QAbstractAnimation.State), oldState);
        }
        // WARNING: Unimplemented C++ pure virtual - DO NOT CALL
        [SmokeMethod("duration() const")]
        public override int duration() {
            return (int) interceptor.Invoke("duration", "duration() const", typeof(int));
        }
        ~QPropertyAnimation() {
            interceptor.Invoke("~QPropertyAnimation", "~QPropertyAnimation()", typeof(void));
        }
        public new void Dispose() {
            interceptor.Invoke("~QPropertyAnimation", "~QPropertyAnimation()", typeof(void));
        }
        public static new string Tr(string s, string c) {
            return (string) staticInterceptor.Invoke("tr$$", "tr(const char*, const char*)", typeof(string), typeof(string), s, typeof(string), c);
        }
        public static new string Tr(string s) {
            return (string) staticInterceptor.Invoke("tr$", "tr(const char*)", typeof(string), typeof(string), s);
        }
        protected new IQPropertyAnimationSignals Emit {
            get { return (IQPropertyAnimationSignals) Q_EMIT; }
        }
    }

    public interface IQPropertyAnimationSignals : IQVariantAnimationSignals {
    }
}
