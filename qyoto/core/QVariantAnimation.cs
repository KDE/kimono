//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {
    using System;
    using System.Collections.Generic;
    /// <remarks> See <see cref="IQVariantAnimationSignals"></see> for signals emitted by QVariantAnimation
    /// </remarks>
    [SmokeClass("QVariantAnimation")]
    public abstract class QVariantAnimation : QAbstractAnimation {
        protected QVariantAnimation(Type dummy) : base((Type) null) {}
        protected new void CreateProxy() {
            interceptor = new SmokeInvocation(typeof(QVariantAnimation), this);
        }
        private static SmokeInvocation staticInterceptor = null;
        static QVariantAnimation() {
            staticInterceptor = new SmokeInvocation(typeof(QVariantAnimation), null);
        }
        [Q_PROPERTY("QVariant", "startValue")]
        public QVariant StartValue {
            get { return (QVariant) interceptor.Invoke("startValue", "startValue()", typeof(QVariant)); }
            set { interceptor.Invoke("setStartValue#", "setStartValue(QVariant)", typeof(void), typeof(QVariant), value); }
        }
        [Q_PROPERTY("QVariant", "endValue")]
        public QVariant EndValue {
            get { return (QVariant) interceptor.Invoke("endValue", "endValue()", typeof(QVariant)); }
            set { interceptor.Invoke("setEndValue#", "setEndValue(QVariant)", typeof(void), typeof(QVariant), value); }
        }
        [Q_PROPERTY("QVariant", "currentValue")]
        public QVariant CurrentValue {
            get { return (QVariant) interceptor.Invoke("currentValue", "currentValue()", typeof(QVariant)); }
            set { interceptor.Invoke("valueChanged#", "valueChanged(QVariant)", typeof(void), typeof(QVariant), value); }
        }
        [Q_PROPERTY("int", "duration")]
        public new int Duration {
            get { return (int) interceptor.Invoke("duration", "duration()", typeof(int)); }
            set { interceptor.Invoke("setDuration$", "setDuration(int)", typeof(void), typeof(int), value); }
        }
        [Q_PROPERTY("QEasingCurve", "easingCurve")]
        public QEasingCurve EasingCurve {
            get { return (QEasingCurve) interceptor.Invoke("easingCurve", "easingCurve()", typeof(QEasingCurve)); }
            set { interceptor.Invoke("setEasingCurve#", "setEasingCurve(QEasingCurve)", typeof(void), typeof(QEasingCurve), value); }
        }
        // QVariantAnimation* QVariantAnimation(QVariantAnimationPrivate& arg1,QObject* arg2); >>>> NOT CONVERTED
        // QVariantAnimation* QVariantAnimation(QVariantAnimationPrivate& arg1); >>>> NOT CONVERTED
        public QVariantAnimation(QObject parent) : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("QVariantAnimation#", "QVariantAnimation(QObject*)", typeof(void), typeof(QObject), parent);
        }
        public QVariantAnimation() : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("QVariantAnimation", "QVariantAnimation()", typeof(void));
        }
        public QVariant KeyValueAt(double step) {
            return (QVariant) interceptor.Invoke("keyValueAt$", "keyValueAt(qreal) const", typeof(QVariant), typeof(double), step);
        }
        public void SetKeyValueAt(double step, QVariant value) {
            interceptor.Invoke("setKeyValueAt$#", "setKeyValueAt(qreal, const QVariant&)", typeof(void), typeof(double), step, typeof(QVariant), value);
        }
        public List<QPair<double, QVariant>> KeyValues() {
            return (List<QPair<double, QVariant>>) interceptor.Invoke("keyValues", "keyValues() const", typeof(List<QPair<double, QVariant>>));
        }
        public void SetKeyValues(List<QPair<double, QVariant>> values) {
            interceptor.Invoke("setKeyValues?", "setKeyValues(const QVector<QPair<qreal,QVariant> >&)", typeof(void), typeof(List<QPair<double, QVariant>>), values);
        }
        [SmokeMethod("event(QEvent*)")]
        protected override bool Event(QEvent arg1) {
            return (bool) interceptor.Invoke("event#", "event(QEvent*)", typeof(bool), typeof(QEvent), arg1);
        }
        [SmokeMethod("updateCurrentTime(int)")]
        protected override void UpdateCurrentTime(int arg1) {
            interceptor.Invoke("updateCurrentTime$", "updateCurrentTime(int)", typeof(void), typeof(int), arg1);
        }
        [SmokeMethod("updateState(QAbstractAnimation::State, QAbstractAnimation::State)")]
        protected override void UpdateState(QAbstractAnimation.State newState, QAbstractAnimation.State oldState) {
            interceptor.Invoke("updateState$$", "updateState(QAbstractAnimation::State, QAbstractAnimation::State)", typeof(void), typeof(QAbstractAnimation.State), newState, typeof(QAbstractAnimation.State), oldState);
        }
        [SmokeMethod("updateCurrentValue(const QVariant&)")]
        protected abstract void UpdateCurrentValue(QVariant value);
        [SmokeMethod("interpolated(const QVariant&, const QVariant&, qreal) const")]
        protected virtual QVariant Interpolated(QVariant from, QVariant to, double progress) {
            return (QVariant) interceptor.Invoke("interpolated##$", "interpolated(const QVariant&, const QVariant&, qreal) const", typeof(QVariant), typeof(QVariant), from, typeof(QVariant), to, typeof(double), progress);
        }
        public static new string Tr(string s, string c) {
            return (string) staticInterceptor.Invoke("tr$$", "tr(const char*, const char*)", typeof(string), typeof(string), s, typeof(string), c);
        }
        public static new string Tr(string s) {
            return (string) staticInterceptor.Invoke("tr$", "tr(const char*)", typeof(string), typeof(string), s);
        }
        protected new IQVariantAnimationSignals Emit {
            get { return (IQVariantAnimationSignals) Q_EMIT; }
        }
    }

    public interface IQVariantAnimationSignals : IQAbstractAnimationSignals {
        [Q_SIGNAL("void valueChanged(QVariant)")]
        void ValueChanged(QVariant value);
    }
}
