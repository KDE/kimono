//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {
    using System;
    [SmokeClass("QMouseEventTransition")]
    public class QMouseEventTransition : QEventTransition, IDisposable {
        protected QMouseEventTransition(Type dummy) : base((Type) null) {}
        protected new void CreateProxy() {
            interceptor = new SmokeInvocation(typeof(QMouseEventTransition), this);
        }
        private static SmokeInvocation staticInterceptor = null;
        static QMouseEventTransition() {
            staticInterceptor = new SmokeInvocation(typeof(QMouseEventTransition), null);
        }
        [Q_PROPERTY("Qt::MouseButton", "button")]
        public Qt.MouseButton Button {
            get { return (Qt.MouseButton) interceptor.Invoke("button", "button()", typeof(Qt.MouseButton)); }
            set { interceptor.Invoke("setButton$", "setButton(Qt::MouseButton)", typeof(void), typeof(Qt.MouseButton), value); }
        }
        [Q_PROPERTY("Qt::KeyboardModifiers", "modifierMask")]
        public uint ModifierMask {
            get { return (uint) interceptor.Invoke("modifierMask", "modifierMask()", typeof(uint)); }
            set { interceptor.Invoke("setModifierMask$", "setModifierMask(Qt::KeyboardModifiers)", typeof(void), typeof(uint), value); }
        }
        public QMouseEventTransition(QState sourceState) : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("QMouseEventTransition#", "QMouseEventTransition(QState*)", typeof(void), typeof(QState), sourceState);
        }
        public QMouseEventTransition() : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("QMouseEventTransition", "QMouseEventTransition()", typeof(void));
        }
        public QMouseEventTransition(QObject arg1, QEvent.TypeOf type, Qt.MouseButton button, QState sourceState) : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("QMouseEventTransition#$$#", "QMouseEventTransition(QObject*, QEvent::Type, Qt::MouseButton, QState*)", typeof(void), typeof(QObject), arg1, typeof(QEvent.TypeOf), type, typeof(Qt.MouseButton), button, typeof(QState), sourceState);
        }
        public QMouseEventTransition(QObject arg1, QEvent.TypeOf type, Qt.MouseButton button) : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("QMouseEventTransition#$$", "QMouseEventTransition(QObject*, QEvent::Type, Qt::MouseButton)", typeof(void), typeof(QObject), arg1, typeof(QEvent.TypeOf), type, typeof(Qt.MouseButton), button);
        }
        public QPainterPath HitTestPath() {
            return (QPainterPath) interceptor.Invoke("hitTestPath", "hitTestPath() const", typeof(QPainterPath));
        }
        public void SetHitTestPath(QPainterPath path) {
            interceptor.Invoke("setHitTestPath#", "setHitTestPath(const QPainterPath&)", typeof(void), typeof(QPainterPath), path);
        }
        [SmokeMethod("onTransition(QEvent*)")]
        protected override void OnTransition(QEvent arg1) {
            interceptor.Invoke("onTransition#", "onTransition(QEvent*)", typeof(void), typeof(QEvent), arg1);
        }
        [SmokeMethod("eventTest(QEvent*)")]
        protected override bool EventTest(QEvent arg1) {
            return (bool) interceptor.Invoke("eventTest#", "eventTest(QEvent*)", typeof(bool), typeof(QEvent), arg1);
        }
        ~QMouseEventTransition() {
            interceptor.Invoke("~QMouseEventTransition", "~QMouseEventTransition()", typeof(void));
        }
        public new void Dispose() {
            interceptor.Invoke("~QMouseEventTransition", "~QMouseEventTransition()", typeof(void));
        }
        public static new string Tr(string s, string c) {
            return (string) staticInterceptor.Invoke("tr$$", "tr(const char*, const char*)", typeof(string), typeof(string), s, typeof(string), c);
        }
        public static new string Tr(string s) {
            return (string) staticInterceptor.Invoke("tr$", "tr(const char*)", typeof(string), typeof(string), s);
        }
        protected new IQMouseEventTransitionSignals Emit {
            get { return (IQMouseEventTransitionSignals) Q_EMIT; }
        }
    }

    public interface IQMouseEventTransitionSignals : IQEventTransitionSignals {
    }
}
