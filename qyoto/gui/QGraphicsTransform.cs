//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {
    using System;
    [SmokeClass("QGraphicsTransform")]
    public abstract class QGraphicsTransform : QObject {
        protected QGraphicsTransform(Type dummy) : base((Type) null) {}
        protected new void CreateProxy() {
            interceptor = new SmokeInvocation(typeof(QGraphicsTransform), this);
        }
        private static SmokeInvocation staticInterceptor = null;
        static QGraphicsTransform() {
            staticInterceptor = new SmokeInvocation(typeof(QGraphicsTransform), null);
        }
        // QGraphicsTransform* QGraphicsTransform(QGraphicsTransformPrivate& arg1,QObject* arg2); >>>> NOT CONVERTED
        public QGraphicsTransform(QObject parent) : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("QGraphicsTransform#", "QGraphicsTransform(QObject*)", typeof(void), typeof(QObject), parent);
        }
        public QGraphicsTransform() : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("QGraphicsTransform", "QGraphicsTransform()", typeof(void));
        }
        [SmokeMethod("applyTo(QMatrix4x4*) const")]
        public abstract void ApplyTo(QMatrix4x4 matrix);
        [Q_SLOT("void update()")]
        protected void Update() {
            interceptor.Invoke("update", "update()", typeof(void));
        }
        public static new string Tr(string s, string c) {
            return (string) staticInterceptor.Invoke("tr$$", "tr(const char*, const char*)", typeof(string), typeof(string), s, typeof(string), c);
        }
        public static new string Tr(string s) {
            return (string) staticInterceptor.Invoke("tr$", "tr(const char*)", typeof(string), typeof(string), s);
        }
        protected new IQGraphicsTransformSignals Emit {
            get { return (IQGraphicsTransformSignals) Q_EMIT; }
        }
    }

    public interface IQGraphicsTransformSignals : IQObjectSignals {
    }
}
