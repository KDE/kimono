//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {
    using System;
    [SmokeClass("QTapAndHoldGesture")]
    public class QTapAndHoldGesture : QGesture, IDisposable {
        protected QTapAndHoldGesture(Type dummy) : base((Type) null) {}
        protected new void CreateProxy() {
            interceptor = new SmokeInvocation(typeof(QTapAndHoldGesture), this);
        }
        private static SmokeInvocation staticInterceptor = null;
        static QTapAndHoldGesture() {
            staticInterceptor = new SmokeInvocation(typeof(QTapAndHoldGesture), null);
        }
        [Q_PROPERTY("QPointF", "position")]
        public QPointF Position {
            get { return (QPointF) interceptor.Invoke("position", "position()", typeof(QPointF)); }
            set { interceptor.Invoke("setPosition#", "setPosition(QPointF)", typeof(void), typeof(QPointF), value); }
        }
        public QTapAndHoldGesture(QObject parent) : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("QTapAndHoldGesture#", "QTapAndHoldGesture(QObject*)", typeof(void), typeof(QObject), parent);
        }
        public QTapAndHoldGesture() : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("QTapAndHoldGesture", "QTapAndHoldGesture()", typeof(void));
        }
        ~QTapAndHoldGesture() {
            interceptor.Invoke("~QTapAndHoldGesture", "~QTapAndHoldGesture()", typeof(void));
        }
        public new void Dispose() {
            interceptor.Invoke("~QTapAndHoldGesture", "~QTapAndHoldGesture()", typeof(void));
        }
        public static new string Tr(string s, string c) {
            return (string) staticInterceptor.Invoke("tr$$", "tr(const char*, const char*)", typeof(string), typeof(string), s, typeof(string), c);
        }
        public static new string Tr(string s) {
            return (string) staticInterceptor.Invoke("tr$", "tr(const char*)", typeof(string), typeof(string), s);
        }
        protected new IQTapAndHoldGestureSignals Emit {
            get { return (IQTapAndHoldGestureSignals) Q_EMIT; }
        }
    }

    public interface IQTapAndHoldGestureSignals : IQGestureSignals {
    }
}
