//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {
    using System;
    using System.Collections.Generic;
    [SmokeClass("QTextDocumentWriter")]
    public class QTextDocumentWriter : Object, IDisposable {
        protected SmokeInvocation interceptor = null;
        private IntPtr smokeObject;
        protected QTextDocumentWriter(Type dummy) {}
        protected void CreateProxy() {
            interceptor = new SmokeInvocation(typeof(QTextDocumentWriter), this);
        }
        private static SmokeInvocation staticInterceptor = null;
        static QTextDocumentWriter() {
            staticInterceptor = new SmokeInvocation(typeof(QTextDocumentWriter), null);
        }
        public QTextDocumentWriter() : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("QTextDocumentWriter", "QTextDocumentWriter()", typeof(void));
        }
        public QTextDocumentWriter(QIODevice device, QByteArray format) : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("QTextDocumentWriter##", "QTextDocumentWriter(QIODevice*, const QByteArray&)", typeof(void), typeof(QIODevice), device, typeof(QByteArray), format);
        }
        public QTextDocumentWriter(string fileName, QByteArray format) : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("QTextDocumentWriter$#", "QTextDocumentWriter(const QString&, const QByteArray&)", typeof(void), typeof(string), fileName, typeof(QByteArray), format);
        }
        public QTextDocumentWriter(string fileName) : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("QTextDocumentWriter$", "QTextDocumentWriter(const QString&)", typeof(void), typeof(string), fileName);
        }
        public void SetFormat(QByteArray format) {
            interceptor.Invoke("setFormat#", "setFormat(const QByteArray&)", typeof(void), typeof(QByteArray), format);
        }
        public QByteArray Format() {
            return (QByteArray) interceptor.Invoke("format", "format() const", typeof(QByteArray));
        }
        public void SetDevice(QIODevice device) {
            interceptor.Invoke("setDevice#", "setDevice(QIODevice*)", typeof(void), typeof(QIODevice), device);
        }
        public QIODevice Device() {
            return (QIODevice) interceptor.Invoke("device", "device() const", typeof(QIODevice));
        }
        public void SetFileName(string fileName) {
            interceptor.Invoke("setFileName$", "setFileName(const QString&)", typeof(void), typeof(string), fileName);
        }
        public string FileName() {
            return (string) interceptor.Invoke("fileName", "fileName() const", typeof(string));
        }
        public bool Write(QTextDocument document) {
            return (bool) interceptor.Invoke("write#", "write(const QTextDocument*)", typeof(bool), typeof(QTextDocument), document);
        }
        public bool Write(QTextDocumentFragment fragment) {
            return (bool) interceptor.Invoke("write#", "write(const QTextDocumentFragment&)", typeof(bool), typeof(QTextDocumentFragment), fragment);
        }
        public void SetCodec(QTextCodec codec) {
            interceptor.Invoke("setCodec#", "setCodec(QTextCodec*)", typeof(void), typeof(QTextCodec), codec);
        }
        public QTextCodec Codec() {
            return (QTextCodec) interceptor.Invoke("codec", "codec() const", typeof(QTextCodec));
        }
        ~QTextDocumentWriter() {
            interceptor.Invoke("~QTextDocumentWriter", "~QTextDocumentWriter()", typeof(void));
        }
        public void Dispose() {
            interceptor.Invoke("~QTextDocumentWriter", "~QTextDocumentWriter()", typeof(void));
        }
        public static List<QByteArray> SupportedDocumentFormats() {
            return (List<QByteArray>) staticInterceptor.Invoke("supportedDocumentFormats", "supportedDocumentFormats()", typeof(List<QByteArray>));
        }
    }
}
