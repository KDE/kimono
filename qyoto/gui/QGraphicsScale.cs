//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {
    using System;
    /// <remarks> See <see cref="IQGraphicsScaleSignals"></see> for signals emitted by QGraphicsScale
    /// </remarks>
    [SmokeClass("QGraphicsScale")]
    public class QGraphicsScale : QGraphicsTransform, IDisposable {
        protected QGraphicsScale(Type dummy) : base((Type) null) {}
        protected new void CreateProxy() {
            interceptor = new SmokeInvocation(typeof(QGraphicsScale), this);
        }
        private static SmokeInvocation staticInterceptor = null;
        static QGraphicsScale() {
            staticInterceptor = new SmokeInvocation(typeof(QGraphicsScale), null);
        }
        [Q_PROPERTY("QVector3D", "origin")]
        public QVector3D Origin {
            get { return (QVector3D) interceptor.Invoke("origin", "origin()", typeof(QVector3D)); }
            set { interceptor.Invoke("setOrigin#", "setOrigin(QVector3D)", typeof(void), typeof(QVector3D), value); }
        }
        [Q_PROPERTY("qreal", "xScale")]
        public double XScale {
            get { return (double) interceptor.Invoke("xScale", "xScale()", typeof(double)); }
            set { interceptor.Invoke("setXScale$", "setXScale(qreal)", typeof(void), typeof(double), value); }
        }
        [Q_PROPERTY("qreal", "yScale")]
        public double YScale {
            get { return (double) interceptor.Invoke("yScale", "yScale()", typeof(double)); }
            set { interceptor.Invoke("setYScale$", "setYScale(qreal)", typeof(void), typeof(double), value); }
        }
        [Q_PROPERTY("qreal", "zScale")]
        public double ZScale {
            get { return (double) interceptor.Invoke("zScale", "zScale()", typeof(double)); }
            set { interceptor.Invoke("setZScale$", "setZScale(qreal)", typeof(void), typeof(double), value); }
        }
        public QGraphicsScale(QObject parent) : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("QGraphicsScale#", "QGraphicsScale(QObject*)", typeof(void), typeof(QObject), parent);
        }
        public QGraphicsScale() : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("QGraphicsScale", "QGraphicsScale()", typeof(void));
        }
        [SmokeMethod("applyTo(QMatrix4x4*) const")]
        public override void ApplyTo(QMatrix4x4 matrix) {
            interceptor.Invoke("applyTo#", "applyTo(QMatrix4x4*) const", typeof(void), typeof(QMatrix4x4), matrix);
        }
        ~QGraphicsScale() {
            interceptor.Invoke("~QGraphicsScale", "~QGraphicsScale()", typeof(void));
        }
        public new void Dispose() {
            interceptor.Invoke("~QGraphicsScale", "~QGraphicsScale()", typeof(void));
        }
        public static new string Tr(string s, string c) {
            return (string) staticInterceptor.Invoke("tr$$", "tr(const char*, const char*)", typeof(string), typeof(string), s, typeof(string), c);
        }
        public static new string Tr(string s) {
            return (string) staticInterceptor.Invoke("tr$", "tr(const char*)", typeof(string), typeof(string), s);
        }
        protected new IQGraphicsScaleSignals Emit {
            get { return (IQGraphicsScaleSignals) Q_EMIT; }
        }
    }

    public interface IQGraphicsScaleSignals : IQGraphicsTransformSignals {
        [Q_SIGNAL("void originChanged()")]
        void OriginChanged();
        [Q_SIGNAL("void scaleChanged()")]
        void ScaleChanged();
    }
}
