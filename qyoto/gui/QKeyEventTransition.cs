//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {
    using System;
    [SmokeClass("QKeyEventTransition")]
    public class QKeyEventTransition : QEventTransition, IDisposable {
        protected QKeyEventTransition(Type dummy) : base((Type) null) {}
        protected new void CreateProxy() {
            interceptor = new SmokeInvocation(typeof(QKeyEventTransition), this);
        }
        private static SmokeInvocation staticInterceptor = null;
        static QKeyEventTransition() {
            staticInterceptor = new SmokeInvocation(typeof(QKeyEventTransition), null);
        }
        [Q_PROPERTY("int", "key")]
        public new int Key {
            get { return (int) interceptor.Invoke("key", "key()", typeof(int)); }
            set { interceptor.Invoke("setKey$", "setKey(int)", typeof(void), typeof(int), value); }
        }
        [Q_PROPERTY("Qt::KeyboardModifiers", "modifierMask")]
        public uint ModifierMask {
            get { return (uint) interceptor.Invoke("modifierMask", "modifierMask()", typeof(uint)); }
            set { interceptor.Invoke("setModifierMask$", "setModifierMask(Qt::KeyboardModifiers)", typeof(void), typeof(uint), value); }
        }
        public QKeyEventTransition(QState sourceState) : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("QKeyEventTransition#", "QKeyEventTransition(QState*)", typeof(void), typeof(QState), sourceState);
        }
        public QKeyEventTransition() : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("QKeyEventTransition", "QKeyEventTransition()", typeof(void));
        }
        public QKeyEventTransition(QObject arg1, QEvent.TypeOf type, int key, QState sourceState) : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("QKeyEventTransition#$$#", "QKeyEventTransition(QObject*, QEvent::Type, int, QState*)", typeof(void), typeof(QObject), arg1, typeof(QEvent.TypeOf), type, typeof(int), key, typeof(QState), sourceState);
        }
        public QKeyEventTransition(QObject arg1, QEvent.TypeOf type, int key) : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("QKeyEventTransition#$$", "QKeyEventTransition(QObject*, QEvent::Type, int)", typeof(void), typeof(QObject), arg1, typeof(QEvent.TypeOf), type, typeof(int), key);
        }
        [SmokeMethod("onTransition(QEvent*)")]
        protected override void OnTransition(QEvent arg1) {
            interceptor.Invoke("onTransition#", "onTransition(QEvent*)", typeof(void), typeof(QEvent), arg1);
        }
        [SmokeMethod("eventTest(QEvent*)")]
        protected override bool EventTest(QEvent arg1) {
            return (bool) interceptor.Invoke("eventTest#", "eventTest(QEvent*)", typeof(bool), typeof(QEvent), arg1);
        }
        ~QKeyEventTransition() {
            interceptor.Invoke("~QKeyEventTransition", "~QKeyEventTransition()", typeof(void));
        }
        public new void Dispose() {
            interceptor.Invoke("~QKeyEventTransition", "~QKeyEventTransition()", typeof(void));
        }
        public static new string Tr(string s, string c) {
            return (string) staticInterceptor.Invoke("tr$$", "tr(const char*, const char*)", typeof(string), typeof(string), s, typeof(string), c);
        }
        public static new string Tr(string s) {
            return (string) staticInterceptor.Invoke("tr$", "tr(const char*)", typeof(string), typeof(string), s);
        }
        protected new IQKeyEventTransitionSignals Emit {
            get { return (IQKeyEventTransitionSignals) Q_EMIT; }
        }
    }

    public interface IQKeyEventTransitionSignals : IQEventTransitionSignals {
    }
}
