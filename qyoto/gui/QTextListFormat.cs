//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {
    using System;
    [SmokeClass("QTextListFormat")]
    public class QTextListFormat : QTextFormat, IDisposable {
        protected QTextListFormat(Type dummy) : base((Type) null) {}
        protected new void CreateProxy() {
            interceptor = new SmokeInvocation(typeof(QTextListFormat), this);
        }
        public enum Style {
            ListDisc = -1,
            ListCircle = -2,
            ListSquare = -3,
            ListDecimal = -4,
            ListLowerAlpha = -5,
            ListUpperAlpha = -6,
            ListLowerRoman = -7,
            ListUpperRoman = -8,
            ListStyleUndefined = 0,
        }
        public QTextListFormat() : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("QTextListFormat", "QTextListFormat()", typeof(void));
        }
        public new bool IsValid() {
            return (bool) interceptor.Invoke("isValid", "isValid() const", typeof(bool));
        }
        public void SetStyle(QTextListFormat.Style style) {
            interceptor.Invoke("setStyle$", "setStyle(QTextListFormat::Style)", typeof(void), typeof(QTextListFormat.Style), style);
        }
        public QTextListFormat.Style style() {
            return (QTextListFormat.Style) interceptor.Invoke("style", "style() const", typeof(QTextListFormat.Style));
        }
        public void SetIndent(int indent) {
            interceptor.Invoke("setIndent$", "setIndent(int)", typeof(void), typeof(int), indent);
        }
        public int Indent() {
            return (int) interceptor.Invoke("indent", "indent() const", typeof(int));
        }
        public QTextListFormat(QTextFormat fmt) : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("QTextListFormat#", "QTextListFormat(const QTextFormat&)", typeof(void), typeof(QTextFormat), fmt);
        }
        ~QTextListFormat() {
            interceptor.Invoke("~QTextListFormat", "~QTextListFormat()", typeof(void));
        }
        public new void Dispose() {
            interceptor.Invoke("~QTextListFormat", "~QTextListFormat()", typeof(void));
        }
    }
}
