//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {
    using System;
    using System.Collections.Generic;
    [SmokeClass("QTouchEvent")]
    public class QTouchEvent : QInputEvent, IDisposable {
        protected QTouchEvent(Type dummy) : base((Type) null) {}
        [SmokeClass("QTouchEvent::TouchPoint")]
        public class TouchPoint : Object, IDisposable {
            protected SmokeInvocation interceptor = null;
            private IntPtr smokeObject;
            protected TouchPoint(Type dummy) {}
            protected void CreateProxy() {
                interceptor = new SmokeInvocation(typeof(TouchPoint), this);
            }
            public TouchPoint(int id) : this((Type) null) {
                CreateProxy();
                interceptor.Invoke("TouchPoint$", "TouchPoint(int)", typeof(void), typeof(int), id);
            }
            public TouchPoint() : this((Type) null) {
                CreateProxy();
                interceptor.Invoke("TouchPoint", "TouchPoint()", typeof(void));
            }
            public TouchPoint(QTouchEvent.TouchPoint other) : this((Type) null) {
                CreateProxy();
                interceptor.Invoke("TouchPoint#", "TouchPoint(const QTouchEvent::TouchPoint&)", typeof(void), typeof(QTouchEvent.TouchPoint), other);
            }
            public int Id() {
                return (int) interceptor.Invoke("id", "id() const", typeof(int));
            }
            public Qt.TouchPointState State() {
                return (Qt.TouchPointState) interceptor.Invoke("state", "state() const", typeof(Qt.TouchPointState));
            }
            public bool IsPrimary() {
                return (bool) interceptor.Invoke("isPrimary", "isPrimary() const", typeof(bool));
            }
            public QPointF Pos() {
                return (QPointF) interceptor.Invoke("pos", "pos() const", typeof(QPointF));
            }
            public QPointF StartPos() {
                return (QPointF) interceptor.Invoke("startPos", "startPos() const", typeof(QPointF));
            }
            public QPointF LastPos() {
                return (QPointF) interceptor.Invoke("lastPos", "lastPos() const", typeof(QPointF));
            }
            public QPointF ScenePos() {
                return (QPointF) interceptor.Invoke("scenePos", "scenePos() const", typeof(QPointF));
            }
            public QPointF StartScenePos() {
                return (QPointF) interceptor.Invoke("startScenePos", "startScenePos() const", typeof(QPointF));
            }
            public QPointF LastScenePos() {
                return (QPointF) interceptor.Invoke("lastScenePos", "lastScenePos() const", typeof(QPointF));
            }
            public QPointF ScreenPos() {
                return (QPointF) interceptor.Invoke("screenPos", "screenPos() const", typeof(QPointF));
            }
            public QPointF StartScreenPos() {
                return (QPointF) interceptor.Invoke("startScreenPos", "startScreenPos() const", typeof(QPointF));
            }
            public QPointF LastScreenPos() {
                return (QPointF) interceptor.Invoke("lastScreenPos", "lastScreenPos() const", typeof(QPointF));
            }
            public QPointF NormalizedPos() {
                return (QPointF) interceptor.Invoke("normalizedPos", "normalizedPos() const", typeof(QPointF));
            }
            public QPointF StartNormalizedPos() {
                return (QPointF) interceptor.Invoke("startNormalizedPos", "startNormalizedPos() const", typeof(QPointF));
            }
            public QPointF LastNormalizedPos() {
                return (QPointF) interceptor.Invoke("lastNormalizedPos", "lastNormalizedPos() const", typeof(QPointF));
            }
            public QRectF Rect() {
                return (QRectF) interceptor.Invoke("rect", "rect() const", typeof(QRectF));
            }
            public QRectF SceneRect() {
                return (QRectF) interceptor.Invoke("sceneRect", "sceneRect() const", typeof(QRectF));
            }
            public QRectF ScreenRect() {
                return (QRectF) interceptor.Invoke("screenRect", "screenRect() const", typeof(QRectF));
            }
            public double Pressure() {
                return (double) interceptor.Invoke("pressure", "pressure() const", typeof(double));
            }
            public void SetId(int id) {
                interceptor.Invoke("setId$", "setId(int)", typeof(void), typeof(int), id);
            }
            public void SetState(uint state) {
                interceptor.Invoke("setState$", "setState(Qt::TouchPointStates)", typeof(void), typeof(uint), state);
            }
            public void SetPos(QPointF pos) {
                interceptor.Invoke("setPos#", "setPos(const QPointF&)", typeof(void), typeof(QPointF), pos);
            }
            public void SetScenePos(QPointF scenePos) {
                interceptor.Invoke("setScenePos#", "setScenePos(const QPointF&)", typeof(void), typeof(QPointF), scenePos);
            }
            public void SetScreenPos(QPointF screenPos) {
                interceptor.Invoke("setScreenPos#", "setScreenPos(const QPointF&)", typeof(void), typeof(QPointF), screenPos);
            }
            public void SetNormalizedPos(QPointF normalizedPos) {
                interceptor.Invoke("setNormalizedPos#", "setNormalizedPos(const QPointF&)", typeof(void), typeof(QPointF), normalizedPos);
            }
            public void SetStartPos(QPointF startPos) {
                interceptor.Invoke("setStartPos#", "setStartPos(const QPointF&)", typeof(void), typeof(QPointF), startPos);
            }
            public void SetStartScenePos(QPointF startScenePos) {
                interceptor.Invoke("setStartScenePos#", "setStartScenePos(const QPointF&)", typeof(void), typeof(QPointF), startScenePos);
            }
            public void SetStartScreenPos(QPointF startScreenPos) {
                interceptor.Invoke("setStartScreenPos#", "setStartScreenPos(const QPointF&)", typeof(void), typeof(QPointF), startScreenPos);
            }
            public void SetStartNormalizedPos(QPointF startNormalizedPos) {
                interceptor.Invoke("setStartNormalizedPos#", "setStartNormalizedPos(const QPointF&)", typeof(void), typeof(QPointF), startNormalizedPos);
            }
            public void SetLastPos(QPointF lastPos) {
                interceptor.Invoke("setLastPos#", "setLastPos(const QPointF&)", typeof(void), typeof(QPointF), lastPos);
            }
            public void SetLastScenePos(QPointF lastScenePos) {
                interceptor.Invoke("setLastScenePos#", "setLastScenePos(const QPointF&)", typeof(void), typeof(QPointF), lastScenePos);
            }
            public void SetLastScreenPos(QPointF lastScreenPos) {
                interceptor.Invoke("setLastScreenPos#", "setLastScreenPos(const QPointF&)", typeof(void), typeof(QPointF), lastScreenPos);
            }
            public void SetLastNormalizedPos(QPointF lastNormalizedPos) {
                interceptor.Invoke("setLastNormalizedPos#", "setLastNormalizedPos(const QPointF&)", typeof(void), typeof(QPointF), lastNormalizedPos);
            }
            public void SetRect(QRectF rect) {
                interceptor.Invoke("setRect#", "setRect(const QRectF&)", typeof(void), typeof(QRectF), rect);
            }
            public void SetSceneRect(QRectF sceneRect) {
                interceptor.Invoke("setSceneRect#", "setSceneRect(const QRectF&)", typeof(void), typeof(QRectF), sceneRect);
            }
            public void SetScreenRect(QRectF screenRect) {
                interceptor.Invoke("setScreenRect#", "setScreenRect(const QRectF&)", typeof(void), typeof(QRectF), screenRect);
            }
            public void SetPressure(double pressure) {
                interceptor.Invoke("setPressure$", "setPressure(qreal)", typeof(void), typeof(double), pressure);
            }
            ~TouchPoint() {
                interceptor.Invoke("~TouchPoint", "~TouchPoint()", typeof(void));
            }
            public void Dispose() {
                interceptor.Invoke("~TouchPoint", "~TouchPoint()", typeof(void));
            }
        }
        protected new void CreateProxy() {
            interceptor = new SmokeInvocation(typeof(QTouchEvent), this);
        }
        public enum DeviceType {
            TouchScreen = 0,
            TouchPad = 1,
        }
        public QTouchEvent(QEvent.TypeOf eventType, QTouchEvent.DeviceType deviceType, uint modifiers, uint touchPointStates, List<QTouchEvent.TouchPoint> touchPoints) : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("QTouchEvent$$$$?", "QTouchEvent(QEvent::Type, QTouchEvent::DeviceType, Qt::KeyboardModifiers, Qt::TouchPointStates, const QList<QTouchEvent::TouchPoint>&)", typeof(void), typeof(QEvent.TypeOf), eventType, typeof(QTouchEvent.DeviceType), deviceType, typeof(uint), modifiers, typeof(uint), touchPointStates, typeof(List<QTouchEvent.TouchPoint>), touchPoints);
        }
        public QTouchEvent(QEvent.TypeOf eventType, QTouchEvent.DeviceType deviceType, uint modifiers, uint touchPointStates) : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("QTouchEvent$$$$", "QTouchEvent(QEvent::Type, QTouchEvent::DeviceType, Qt::KeyboardModifiers, Qt::TouchPointStates)", typeof(void), typeof(QEvent.TypeOf), eventType, typeof(QTouchEvent.DeviceType), deviceType, typeof(uint), modifiers, typeof(uint), touchPointStates);
        }
        public QTouchEvent(QEvent.TypeOf eventType, QTouchEvent.DeviceType deviceType, uint modifiers) : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("QTouchEvent$$$", "QTouchEvent(QEvent::Type, QTouchEvent::DeviceType, Qt::KeyboardModifiers)", typeof(void), typeof(QEvent.TypeOf), eventType, typeof(QTouchEvent.DeviceType), deviceType, typeof(uint), modifiers);
        }
        public QTouchEvent(QEvent.TypeOf eventType, QTouchEvent.DeviceType deviceType) : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("QTouchEvent$$", "QTouchEvent(QEvent::Type, QTouchEvent::DeviceType)", typeof(void), typeof(QEvent.TypeOf), eventType, typeof(QTouchEvent.DeviceType), deviceType);
        }
        public QTouchEvent(QEvent.TypeOf eventType) : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("QTouchEvent$", "QTouchEvent(QEvent::Type)", typeof(void), typeof(QEvent.TypeOf), eventType);
        }
        public QWidget Widget() {
            return (QWidget) interceptor.Invoke("widget", "widget() const", typeof(QWidget));
        }
        public QTouchEvent.DeviceType deviceType() {
            return (QTouchEvent.DeviceType) interceptor.Invoke("deviceType", "deviceType() const", typeof(QTouchEvent.DeviceType));
        }
        public uint TouchPointStates() {
            return (uint) interceptor.Invoke("touchPointStates", "touchPointStates() const", typeof(uint));
        }
        public List<QTouchEvent.TouchPoint> TouchPoints() {
            return (List<QTouchEvent.TouchPoint>) interceptor.Invoke("touchPoints", "touchPoints() const", typeof(List<QTouchEvent.TouchPoint>));
        }
        public void SetWidget(QWidget awidget) {
            interceptor.Invoke("setWidget#", "setWidget(QWidget*)", typeof(void), typeof(QWidget), awidget);
        }
        public void SetDeviceType(QTouchEvent.DeviceType adeviceType) {
            interceptor.Invoke("setDeviceType$", "setDeviceType(QTouchEvent::DeviceType)", typeof(void), typeof(QTouchEvent.DeviceType), adeviceType);
        }
        public void SetTouchPointStates(uint aTouchPointStates) {
            interceptor.Invoke("setTouchPointStates$", "setTouchPointStates(Qt::TouchPointStates)", typeof(void), typeof(uint), aTouchPointStates);
        }
        public void SetTouchPoints(List<QTouchEvent.TouchPoint> atouchPoints) {
            interceptor.Invoke("setTouchPoints?", "setTouchPoints(const QList<QTouchEvent::TouchPoint>&)", typeof(void), typeof(List<QTouchEvent.TouchPoint>), atouchPoints);
        }
        ~QTouchEvent() {
            interceptor.Invoke("~QTouchEvent", "~QTouchEvent()", typeof(void));
        }
        public new void Dispose() {
            interceptor.Invoke("~QTouchEvent", "~QTouchEvent()", typeof(void));
        }
    }
}
