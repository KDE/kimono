//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {
    using System;
    [SmokeClass("QPlainTextDocumentLayout")]
    public class QPlainTextDocumentLayout : QAbstractTextDocumentLayout, IDisposable {
        protected QPlainTextDocumentLayout(Type dummy) : base((Type) null) {}
        protected new void CreateProxy() {
            interceptor = new SmokeInvocation(typeof(QPlainTextDocumentLayout), this);
        }
        private static SmokeInvocation staticInterceptor = null;
        static QPlainTextDocumentLayout() {
            staticInterceptor = new SmokeInvocation(typeof(QPlainTextDocumentLayout), null);
        }
        [Q_PROPERTY("int", "cursorWidth")]
        public int CursorWidth {
            get { return (int) interceptor.Invoke("cursorWidth", "cursorWidth()", typeof(int)); }
            set { interceptor.Invoke("setCursorWidth$", "setCursorWidth(int)", typeof(void), typeof(int), value); }
        }
        // void draw(QPainter* arg1,const QAbstractTextDocumentLayout::PaintContext& arg2); >>>> NOT CONVERTED
        public QPlainTextDocumentLayout(QTextDocument document) : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("QPlainTextDocumentLayout#", "QPlainTextDocumentLayout(QTextDocument*)", typeof(void), typeof(QTextDocument), document);
        }
        [SmokeMethod("hitTest(const QPointF&, Qt::HitTestAccuracy) const")]
        public override int HitTest(QPointF arg1, Qt.HitTestAccuracy arg2) {
            return (int) interceptor.Invoke("hitTest#$", "hitTest(const QPointF&, Qt::HitTestAccuracy) const", typeof(int), typeof(QPointF), arg1, typeof(Qt.HitTestAccuracy), arg2);
        }
        [SmokeMethod("pageCount() const")]
        public override int PageCount() {
            return (int) interceptor.Invoke("pageCount", "pageCount() const", typeof(int));
        }
        [SmokeMethod("documentSize() const")]
        public override QSizeF DocumentSize() {
            return (QSizeF) interceptor.Invoke("documentSize", "documentSize() const", typeof(QSizeF));
        }
        [SmokeMethod("frameBoundingRect(QTextFrame*) const")]
        public override QRectF FrameBoundingRect(QTextFrame arg1) {
            return (QRectF) interceptor.Invoke("frameBoundingRect#", "frameBoundingRect(QTextFrame*) const", typeof(QRectF), typeof(QTextFrame), arg1);
        }
        [SmokeMethod("blockBoundingRect(const QTextBlock&) const")]
        public override QRectF BlockBoundingRect(QTextBlock block) {
            return (QRectF) interceptor.Invoke("blockBoundingRect#", "blockBoundingRect(const QTextBlock&) const", typeof(QRectF), typeof(QTextBlock), block);
        }
        public void EnsureBlockLayout(QTextBlock block) {
            interceptor.Invoke("ensureBlockLayout#", "ensureBlockLayout(const QTextBlock&) const", typeof(void), typeof(QTextBlock), block);
        }
        public void RequestUpdate() {
            interceptor.Invoke("requestUpdate", "requestUpdate()", typeof(void));
        }
        [SmokeMethod("documentChanged(int, int, int)")]
        protected override void DocumentChanged(int from, int arg2, int charsAdded) {
            interceptor.Invoke("documentChanged$$$", "documentChanged(int, int, int)", typeof(void), typeof(int), from, typeof(int), arg2, typeof(int), charsAdded);
        }
        ~QPlainTextDocumentLayout() {
            interceptor.Invoke("~QPlainTextDocumentLayout", "~QPlainTextDocumentLayout()", typeof(void));
        }
        public new void Dispose() {
            interceptor.Invoke("~QPlainTextDocumentLayout", "~QPlainTextDocumentLayout()", typeof(void));
        }
        public static new string Tr(string s, string c) {
            return (string) staticInterceptor.Invoke("tr$$", "tr(const char*, const char*)", typeof(string), typeof(string), s, typeof(string), c);
        }
        public static new string Tr(string s) {
            return (string) staticInterceptor.Invoke("tr$", "tr(const char*)", typeof(string), typeof(string), s);
        }
        protected new IQPlainTextDocumentLayoutSignals Emit {
            get { return (IQPlainTextDocumentLayoutSignals) Q_EMIT; }
        }
    }

    public interface IQPlainTextDocumentLayoutSignals : IQAbstractTextDocumentLayoutSignals {
    }
}
