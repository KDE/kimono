//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {
    using System;
    [SmokeClass("QSymbianEvent")]
    public class QSymbianEvent : Object, IDisposable {
        protected SmokeInvocation interceptor = null;
        private IntPtr smokeObject;
        protected QSymbianEvent(Type dummy) {}
        protected void CreateProxy() {
            interceptor = new SmokeInvocation(typeof(QSymbianEvent), this);
        }
        public enum TypeOf {
            InvalidEvent = 0,
            WindowServerEvent = 1,
            CommandEvent = 2,
            ResourceChangeEvent = 3,
        }
        // QSymbianEvent* QSymbianEvent(const TWsEvent* arg1); >>>> NOT CONVERTED
        // const TWsEvent* windowServerEvent(); >>>> NOT CONVERTED
        public QSymbianEvent(QSymbianEvent.TypeOf eventType, int value) : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("QSymbianEvent$$", "QSymbianEvent(QSymbianEvent::Type, int)", typeof(void), typeof(QSymbianEvent.TypeOf), eventType, typeof(int), value);
        }
        public QSymbianEvent.TypeOf type() {
            return (QSymbianEvent.TypeOf) interceptor.Invoke("type", "type() const", typeof(QSymbianEvent.TypeOf));
        }
        public bool IsValid() {
            return (bool) interceptor.Invoke("isValid", "isValid() const", typeof(bool));
        }
        public int Command() {
            return (int) interceptor.Invoke("command", "command() const", typeof(int));
        }
        public int ResourceChangeType() {
            return (int) interceptor.Invoke("resourceChangeType", "resourceChangeType() const", typeof(int));
        }
        ~QSymbianEvent() {
            interceptor.Invoke("~QSymbianEvent", "~QSymbianEvent()", typeof(void));
        }
        public void Dispose() {
            interceptor.Invoke("~QSymbianEvent", "~QSymbianEvent()", typeof(void));
        }
    }
}
