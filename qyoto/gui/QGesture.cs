//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {
    using System;
    [SmokeClass("QGesture")]
    public class QGesture : QObject, IDisposable {
        protected QGesture(Type dummy) : base((Type) null) {}
        protected new void CreateProxy() {
            interceptor = new SmokeInvocation(typeof(QGesture), this);
        }
        private static SmokeInvocation staticInterceptor = null;
        static QGesture() {
            staticInterceptor = new SmokeInvocation(typeof(QGesture), null);
        }
        public enum GestureCancelPolicy {
            CancelNone = 0,
            CancelAllInContext = 1,
        }
        [Q_PROPERTY("Qt::GestureState", "state")]
        public Qt.GestureState State {
            get { return (Qt.GestureState) interceptor.Invoke("state", "state()", typeof(Qt.GestureState)); }
        }
        [Q_PROPERTY("Qt::GestureType", "gestureType")]
        public new Qt.GestureType GestureType {
            get { return (Qt.GestureType) interceptor.Invoke("gestureType", "gestureType()", typeof(Qt.GestureType)); }
        }
        [Q_PROPERTY("QGesture::GestureCancelPolicy", "gestureCancelPolicy")]
        public QGesture.GestureCancelPolicy gestureCancelPolicy {
            get { return (QGesture.GestureCancelPolicy) interceptor.Invoke("gestureCancelPolicy", "gestureCancelPolicy()", typeof(QGesture.GestureCancelPolicy)); }
            set { interceptor.Invoke("setGestureCancelPolicy$", "setGestureCancelPolicy(QGesture::GestureCancelPolicy)", typeof(void), typeof(QGesture.GestureCancelPolicy), value); }
        }
        [Q_PROPERTY("QPointF", "hotSpot")]
        public QPointF HotSpot {
            get { return (QPointF) interceptor.Invoke("hotSpot", "hotSpot()", typeof(QPointF)); }
            set { interceptor.Invoke("setHotSpot#", "setHotSpot(QPointF)", typeof(void), typeof(QPointF), value); }
        }
        [Q_PROPERTY("bool", "hasHotSpot")]
        public bool HasHotSpot {
            get { return (bool) interceptor.Invoke("hasHotSpot", "hasHotSpot()", typeof(bool)); }
        }
        // QGesture* QGesture(QGesturePrivate& arg1,QObject* arg2); >>>> NOT CONVERTED
        public QGesture(QObject parent) : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("QGesture#", "QGesture(QObject*)", typeof(void), typeof(QObject), parent);
        }
        public QGesture() : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("QGesture", "QGesture()", typeof(void));
        }
        public void UnsetHotSpot() {
            interceptor.Invoke("unsetHotSpot", "unsetHotSpot()", typeof(void));
        }
        ~QGesture() {
            interceptor.Invoke("~QGesture", "~QGesture()", typeof(void));
        }
        public new void Dispose() {
            interceptor.Invoke("~QGesture", "~QGesture()", typeof(void));
        }
        public static new string Tr(string s, string c) {
            return (string) staticInterceptor.Invoke("tr$$", "tr(const char*, const char*)", typeof(string), typeof(string), s, typeof(string), c);
        }
        public static new string Tr(string s) {
            return (string) staticInterceptor.Invoke("tr$", "tr(const char*)", typeof(string), typeof(string), s);
        }
        protected new IQGestureSignals Emit {
            get { return (IQGestureSignals) Q_EMIT; }
        }
    }

    public interface IQGestureSignals : IQObjectSignals {
    }
}
