//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {
    using System;
    [SmokeClass("QGraphicsAnchor")]
    public class QGraphicsAnchor : QObject {
        protected QGraphicsAnchor(Type dummy) : base((Type) null) {}
        protected new void CreateProxy() {
            interceptor = new SmokeInvocation(typeof(QGraphicsAnchor), this);
        }
        private static SmokeInvocation staticInterceptor = null;
        static QGraphicsAnchor() {
            staticInterceptor = new SmokeInvocation(typeof(QGraphicsAnchor), null);
        }
        [Q_PROPERTY("qreal", "spacing")]
        public double Spacing {
            get { return (double) interceptor.Invoke("spacing", "spacing()", typeof(double)); }
            set { interceptor.Invoke("setSpacing$", "setSpacing(qreal)", typeof(void), typeof(double), value); }
        }
        [Q_PROPERTY("QSizePolicy::Policy", "sizePolicy")]
        public QSizePolicy.Policy SizePolicy {
            get { return (QSizePolicy.Policy) interceptor.Invoke("sizePolicy", "sizePolicy()", typeof(QSizePolicy.Policy)); }
            set { interceptor.Invoke("setSizePolicy$", "setSizePolicy(QSizePolicy::Policy)", typeof(void), typeof(QSizePolicy.Policy), value); }
        }
        public void UnsetSpacing() {
            interceptor.Invoke("unsetSpacing", "unsetSpacing()", typeof(void));
        }
        public static new string Tr(string s, string c) {
            return (string) staticInterceptor.Invoke("tr$$", "tr(const char*, const char*)", typeof(string), typeof(string), s, typeof(string), c);
        }
        public static new string Tr(string s) {
            return (string) staticInterceptor.Invoke("tr$", "tr(const char*)", typeof(string), typeof(string), s);
        }
        protected new IQGraphicsAnchorSignals Emit {
            get { return (IQGraphicsAnchorSignals) Q_EMIT; }
        }
    }

    public interface IQGraphicsAnchorSignals : IQObjectSignals {
    }
}
