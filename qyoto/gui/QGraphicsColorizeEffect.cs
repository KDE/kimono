//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {
    using System;
    /// <remarks> See <see cref="IQGraphicsColorizeEffectSignals"></see> for signals emitted by QGraphicsColorizeEffect
    /// </remarks>
    [SmokeClass("QGraphicsColorizeEffect")]
    public class QGraphicsColorizeEffect : QGraphicsEffect, IDisposable {
        protected QGraphicsColorizeEffect(Type dummy) : base((Type) null) {}
        protected new void CreateProxy() {
            interceptor = new SmokeInvocation(typeof(QGraphicsColorizeEffect), this);
        }
        private static SmokeInvocation staticInterceptor = null;
        static QGraphicsColorizeEffect() {
            staticInterceptor = new SmokeInvocation(typeof(QGraphicsColorizeEffect), null);
        }
        [Q_PROPERTY("QColor", "color")]
        public QColor Color {
            get { return (QColor) interceptor.Invoke("color", "color()", typeof(QColor)); }
            set { interceptor.Invoke("setColor#", "setColor(QColor)", typeof(void), typeof(QColor), value); }
        }
        [Q_PROPERTY("qreal", "strength")]
        public double Strength {
            get { return (double) interceptor.Invoke("strength", "strength()", typeof(double)); }
            set { interceptor.Invoke("setStrength$", "setStrength(qreal)", typeof(void), typeof(double), value); }
        }
        public QGraphicsColorizeEffect(QObject parent) : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("QGraphicsColorizeEffect#", "QGraphicsColorizeEffect(QObject*)", typeof(void), typeof(QObject), parent);
        }
        public QGraphicsColorizeEffect() : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("QGraphicsColorizeEffect", "QGraphicsColorizeEffect()", typeof(void));
        }
        [Q_SLOT("void setColor(QColor)")]
        public void SetColor(QColor c) {
            interceptor.Invoke("setColor#", "setColor(const QColor&)", typeof(void), typeof(QColor), c);
        }
        [Q_SLOT("void setStrength(qreal)")]
        public void SetStrength(double strength) {
            interceptor.Invoke("setStrength$", "setStrength(qreal)", typeof(void), typeof(double), strength);
        }
        [SmokeMethod("draw(QPainter*)")]
        protected override void Draw(QPainter painter) {
            interceptor.Invoke("draw#", "draw(QPainter*)", typeof(void), typeof(QPainter), painter);
        }
        ~QGraphicsColorizeEffect() {
            interceptor.Invoke("~QGraphicsColorizeEffect", "~QGraphicsColorizeEffect()", typeof(void));
        }
        public new void Dispose() {
            interceptor.Invoke("~QGraphicsColorizeEffect", "~QGraphicsColorizeEffect()", typeof(void));
        }
        public static new string Tr(string s, string c) {
            return (string) staticInterceptor.Invoke("tr$$", "tr(const char*, const char*)", typeof(string), typeof(string), s, typeof(string), c);
        }
        public static new string Tr(string s) {
            return (string) staticInterceptor.Invoke("tr$", "tr(const char*)", typeof(string), typeof(string), s);
        }
        protected new IQGraphicsColorizeEffectSignals Emit {
            get { return (IQGraphicsColorizeEffectSignals) Q_EMIT; }
        }
    }

    public interface IQGraphicsColorizeEffectSignals : IQGraphicsEffectSignals {
        [Q_SIGNAL("void colorChanged(QColor)")]
        void ColorChanged(QColor color);
        [Q_SIGNAL("void strengthChanged(qreal)")]
        void StrengthChanged(double strength);
    }
}
