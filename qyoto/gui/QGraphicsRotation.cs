//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {
    using System;
    /// <remarks> See <see cref="IQGraphicsRotationSignals"></see> for signals emitted by QGraphicsRotation
    /// </remarks>
    [SmokeClass("QGraphicsRotation")]
    public class QGraphicsRotation : QGraphicsTransform, IDisposable {
        protected QGraphicsRotation(Type dummy) : base((Type) null) {}
        protected new void CreateProxy() {
            interceptor = new SmokeInvocation(typeof(QGraphicsRotation), this);
        }
        private static SmokeInvocation staticInterceptor = null;
        static QGraphicsRotation() {
            staticInterceptor = new SmokeInvocation(typeof(QGraphicsRotation), null);
        }
        [Q_PROPERTY("QVector3D", "origin")]
        public QVector3D Origin {
            get { return (QVector3D) interceptor.Invoke("origin", "origin()", typeof(QVector3D)); }
            set { interceptor.Invoke("setOrigin#", "setOrigin(QVector3D)", typeof(void), typeof(QVector3D), value); }
        }
        [Q_PROPERTY("qreal", "angle")]
        public double Angle {
            get { return (double) interceptor.Invoke("angle", "angle()", typeof(double)); }
            set { interceptor.Invoke("setAngle$", "setAngle(qreal)", typeof(void), typeof(double), value); }
        }
        [Q_PROPERTY("QVector3D", "axis")]
        public new QVector3D Axis {
            get { return (QVector3D) interceptor.Invoke("axis", "axis()", typeof(QVector3D)); }
            set { interceptor.Invoke("setAxis#", "setAxis(QVector3D)", typeof(void), typeof(QVector3D), value); }
        }
        public QGraphicsRotation(QObject parent) : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("QGraphicsRotation#", "QGraphicsRotation(QObject*)", typeof(void), typeof(QObject), parent);
        }
        public QGraphicsRotation() : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("QGraphicsRotation", "QGraphicsRotation()", typeof(void));
        }
        [SmokeMethod("applyTo(QMatrix4x4*) const")]
        public override void ApplyTo(QMatrix4x4 matrix) {
            interceptor.Invoke("applyTo#", "applyTo(QMatrix4x4*) const", typeof(void), typeof(QMatrix4x4), matrix);
        }
        ~QGraphicsRotation() {
            interceptor.Invoke("~QGraphicsRotation", "~QGraphicsRotation()", typeof(void));
        }
        public new void Dispose() {
            interceptor.Invoke("~QGraphicsRotation", "~QGraphicsRotation()", typeof(void));
        }
        public static new string Tr(string s, string c) {
            return (string) staticInterceptor.Invoke("tr$$", "tr(const char*, const char*)", typeof(string), typeof(string), s, typeof(string), c);
        }
        public static new string Tr(string s) {
            return (string) staticInterceptor.Invoke("tr$", "tr(const char*)", typeof(string), typeof(string), s);
        }
        protected new IQGraphicsRotationSignals Emit {
            get { return (IQGraphicsRotationSignals) Q_EMIT; }
        }
    }

    public interface IQGraphicsRotationSignals : IQGraphicsTransformSignals {
        [Q_SIGNAL("void originChanged()")]
        void OriginChanged();
        [Q_SIGNAL("void angleChanged()")]
        void AngleChanged();
        [Q_SIGNAL("void axisChanged()")]
        void AxisChanged();
    }
}
