//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {
    using System;
    /// <remarks> See <see cref="IQX11EmbedWidgetSignals"></see> for signals emitted by QX11EmbedWidget
    /// </remarks>
    [SmokeClass("QX11EmbedWidget")]
    public class QX11EmbedWidget : QWidget, IDisposable {
        protected QX11EmbedWidget(Type dummy) : base((Type) null) {}
        protected new void CreateProxy() {
            interceptor = new SmokeInvocation(typeof(QX11EmbedWidget), this);
        }
        private static SmokeInvocation staticInterceptor = null;
        static QX11EmbedWidget() {
            staticInterceptor = new SmokeInvocation(typeof(QX11EmbedWidget), null);
        }
        public enum Error {
            Unknown = 0,
            Internal = 1,
            InvalidWindowID = 2,
        }
        // void embedInto(HWND arg1); >>>> NOT CONVERTED
        // HWND containerWinId(); >>>> NOT CONVERTED
        // bool x11Event(XEvent* arg1); >>>> NOT CONVERTED
        public QX11EmbedWidget(QWidget parent) : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("QX11EmbedWidget#", "QX11EmbedWidget(QWidget*)", typeof(void), typeof(QWidget), parent);
        }
        public QX11EmbedWidget() : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("QX11EmbedWidget", "QX11EmbedWidget()", typeof(void));
        }
        public QX11EmbedWidget.Error error() {
            return (QX11EmbedWidget.Error) interceptor.Invoke("error", "error() const", typeof(QX11EmbedWidget.Error));
        }
        [SmokeMethod("eventFilter(QObject*, QEvent*)")]
        protected new virtual bool EventFilter(QObject arg1, QEvent arg2) {
            return (bool) interceptor.Invoke("eventFilter##", "eventFilter(QObject*, QEvent*)", typeof(bool), typeof(QObject), arg1, typeof(QEvent), arg2);
        }
        [SmokeMethod("event(QEvent*)")]
        protected override bool Event(QEvent arg1) {
            return (bool) interceptor.Invoke("event#", "event(QEvent*)", typeof(bool), typeof(QEvent), arg1);
        }
        [SmokeMethod("resizeEvent(QResizeEvent*)")]
        protected override void ResizeEvent(QResizeEvent arg1) {
            interceptor.Invoke("resizeEvent#", "resizeEvent(QResizeEvent*)", typeof(void), typeof(QResizeEvent), arg1);
        }
        ~QX11EmbedWidget() {
            interceptor.Invoke("~QX11EmbedWidget", "~QX11EmbedWidget()", typeof(void));
        }
        public new void Dispose() {
            interceptor.Invoke("~QX11EmbedWidget", "~QX11EmbedWidget()", typeof(void));
        }
        public static new string Tr(string s, string c) {
            return (string) staticInterceptor.Invoke("tr$$", "tr(const char*, const char*)", typeof(string), typeof(string), s, typeof(string), c);
        }
        public static new string Tr(string s) {
            return (string) staticInterceptor.Invoke("tr$", "tr(const char*)", typeof(string), typeof(string), s);
        }
        protected new IQX11EmbedWidgetSignals Emit {
            get { return (IQX11EmbedWidgetSignals) Q_EMIT; }
        }
    }

    public interface IQX11EmbedWidgetSignals : IQWidgetSignals {
        [Q_SIGNAL("void embedded()")]
        void Embedded();
        [Q_SIGNAL("void containerClosed()")]
        void ContainerClosed();
        [Q_SIGNAL("void error(QX11EmbedWidget::Error)")]
        void Error(QX11EmbedWidget.Error error);
    }
}
