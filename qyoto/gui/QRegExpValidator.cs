//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {
    using System;
    using System.Runtime.InteropServices;
    using System.Text;
    [SmokeClass("QRegExpValidator")]
    public class QRegExpValidator : QValidator, IDisposable {
        protected QRegExpValidator(Type dummy) : base((Type) null) {}
        protected new void CreateProxy() {
            interceptor = new SmokeInvocation(typeof(QRegExpValidator), this);
        }
        private static SmokeInvocation staticInterceptor = null;
        static QRegExpValidator() {
            staticInterceptor = new SmokeInvocation(typeof(QRegExpValidator), null);
        }
        [Q_PROPERTY("QRegExp", "regExp")]
        public QRegExp RegExp {
            get { return (QRegExp) interceptor.Invoke("regExp", "regExp()", typeof(QRegExp)); }
            set { interceptor.Invoke("setRegExp#", "setRegExp(QRegExp)", typeof(void), typeof(QRegExp), value); }
        }
        public QRegExpValidator(QObject parent) : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("QRegExpValidator#", "QRegExpValidator(QObject*)", typeof(void), typeof(QObject), parent);
        }
        public QRegExpValidator(QRegExp rx, QObject parent) : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("QRegExpValidator##", "QRegExpValidator(const QRegExp&, QObject*)", typeof(void), typeof(QRegExp), rx, typeof(QObject), parent);
        }
        [SmokeMethod("validate(QString&, int&) const")]
        public override QValidator.State Validate(StringBuilder input, ref int pos) {
            StackItem[] stack = new StackItem[3];
#if DEBUG
            stack[1].s_class = (IntPtr) DebugGCHandle.Alloc(input);
#else
            stack[1].s_class = (IntPtr) GCHandle.Alloc(input);
#endif
            stack[2].s_int = pos;
            interceptor.Invoke("validate$$", "validate(QString&, int&) const", stack);
#if DEBUG
            DebugGCHandle.Free((GCHandle) stack[1].s_class);
#else
            ((GCHandle) stack[1].s_class).SynchronizedFree();
#endif
            pos = stack[2].s_int;
            return (QValidator.State) Enum.ToObject(typeof(QValidator.State), stack[0].s_int);
        }
        ~QRegExpValidator() {
            interceptor.Invoke("~QRegExpValidator", "~QRegExpValidator()", typeof(void));
        }
        public new void Dispose() {
            interceptor.Invoke("~QRegExpValidator", "~QRegExpValidator()", typeof(void));
        }
        public static new string Tr(string s, string c) {
            return (string) staticInterceptor.Invoke("tr$$", "tr(const char*, const char*)", typeof(string), typeof(string), s, typeof(string), c);
        }
        public static new string Tr(string s) {
            return (string) staticInterceptor.Invoke("tr$", "tr(const char*)", typeof(string), typeof(string), s);
        }
        protected new IQRegExpValidatorSignals Emit {
            get { return (IQRegExpValidatorSignals) Q_EMIT; }
        }
    }

    public interface IQRegExpValidatorSignals : IQValidatorSignals {
    }
}
