//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {
    using System;
    [SmokeClass("QPanGesture")]
    public class QPanGesture : QGesture, IDisposable {
        protected QPanGesture(Type dummy) : base((Type) null) {}
        protected new void CreateProxy() {
            interceptor = new SmokeInvocation(typeof(QPanGesture), this);
        }
        private static SmokeInvocation staticInterceptor = null;
        static QPanGesture() {
            staticInterceptor = new SmokeInvocation(typeof(QPanGesture), null);
        }
        [Q_PROPERTY("QPointF", "lastOffset")]
        public QPointF LastOffset {
            get { return (QPointF) interceptor.Invoke("lastOffset", "lastOffset()", typeof(QPointF)); }
            set { interceptor.Invoke("setLastOffset#", "setLastOffset(QPointF)", typeof(void), typeof(QPointF), value); }
        }
        [Q_PROPERTY("QPointF", "offset")]
        public QPointF Offset {
            get { return (QPointF) interceptor.Invoke("offset", "offset()", typeof(QPointF)); }
            set { interceptor.Invoke("setOffset#", "setOffset(QPointF)", typeof(void), typeof(QPointF), value); }
        }
        [Q_PROPERTY("QPointF", "delta")]
        public QPointF Delta {
            get { return (QPointF) interceptor.Invoke("delta", "delta()", typeof(QPointF)); }
            set { interceptor.Invoke("false#", "false(QPointF)", typeof(void), typeof(QPointF), value); }
        }
        [Q_PROPERTY("qreal", "acceleration")]
        public double Acceleration {
            get { return (double) interceptor.Invoke("acceleration", "acceleration()", typeof(double)); }
            set { interceptor.Invoke("setAcceleration$", "setAcceleration(qreal)", typeof(void), typeof(double), value); }
        }
        public QPanGesture(QObject parent) : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("QPanGesture#", "QPanGesture(QObject*)", typeof(void), typeof(QObject), parent);
        }
        public QPanGesture() : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("QPanGesture", "QPanGesture()", typeof(void));
        }
        ~QPanGesture() {
            interceptor.Invoke("~QPanGesture", "~QPanGesture()", typeof(void));
        }
        public new void Dispose() {
            interceptor.Invoke("~QPanGesture", "~QPanGesture()", typeof(void));
        }
        public static new string Tr(string s, string c) {
            return (string) staticInterceptor.Invoke("tr$$", "tr(const char*, const char*)", typeof(string), typeof(string), s, typeof(string), c);
        }
        public static new string Tr(string s) {
            return (string) staticInterceptor.Invoke("tr$", "tr(const char*)", typeof(string), typeof(string), s);
        }
        protected new IQPanGestureSignals Emit {
            get { return (IQPanGestureSignals) Q_EMIT; }
        }
    }

    public interface IQPanGestureSignals : IQGestureSignals {
    }
}
