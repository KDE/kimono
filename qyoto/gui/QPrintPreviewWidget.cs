//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {
    using System;
    /// <remarks> See <see cref="IQPrintPreviewWidgetSignals"></see> for signals emitted by QPrintPreviewWidget
    /// </remarks>
    [SmokeClass("QPrintPreviewWidget")]
    public class QPrintPreviewWidget : QWidget, IDisposable {
        protected QPrintPreviewWidget(Type dummy) : base((Type) null) {}
        protected new void CreateProxy() {
            interceptor = new SmokeInvocation(typeof(QPrintPreviewWidget), this);
        }
        private static SmokeInvocation staticInterceptor = null;
        static QPrintPreviewWidget() {
            staticInterceptor = new SmokeInvocation(typeof(QPrintPreviewWidget), null);
        }
        public enum ViewMode {
            SinglePageView = 0,
            FacingPagesView = 1,
            AllPagesView = 2,
        }
        public enum ZoomMode {
            CustomZoom = 0,
            FitToWidth = 1,
            FitInView = 2,
        }
        public QPrintPreviewWidget(QPrinter printer, QWidget parent, uint flags) : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("QPrintPreviewWidget##$", "QPrintPreviewWidget(QPrinter*, QWidget*, Qt::WindowFlags)", typeof(void), typeof(QPrinter), printer, typeof(QWidget), parent, typeof(uint), flags);
        }
        public QPrintPreviewWidget(QPrinter printer, QWidget parent) : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("QPrintPreviewWidget##", "QPrintPreviewWidget(QPrinter*, QWidget*)", typeof(void), typeof(QPrinter), printer, typeof(QWidget), parent);
        }
        public QPrintPreviewWidget(QPrinter printer) : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("QPrintPreviewWidget#", "QPrintPreviewWidget(QPrinter*)", typeof(void), typeof(QPrinter), printer);
        }
        public QPrintPreviewWidget(QWidget parent, uint flags) : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("QPrintPreviewWidget#$", "QPrintPreviewWidget(QWidget*, Qt::WindowFlags)", typeof(void), typeof(QWidget), parent, typeof(uint), flags);
        }
        public QPrintPreviewWidget(QWidget parent) : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("QPrintPreviewWidget#", "QPrintPreviewWidget(QWidget*)", typeof(void), typeof(QWidget), parent);
        }
        public QPrintPreviewWidget() : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("QPrintPreviewWidget", "QPrintPreviewWidget()", typeof(void));
        }
        public double ZoomFactor() {
            return (double) interceptor.Invoke("zoomFactor", "zoomFactor() const", typeof(double));
        }
        public new QPrinter.Orientation Orientation() {
            return (QPrinter.Orientation) interceptor.Invoke("orientation", "orientation() const", typeof(QPrinter.Orientation));
        }
        public QPrintPreviewWidget.ViewMode viewMode() {
            return (QPrintPreviewWidget.ViewMode) interceptor.Invoke("viewMode", "viewMode() const", typeof(QPrintPreviewWidget.ViewMode));
        }
        public QPrintPreviewWidget.ZoomMode zoomMode() {
            return (QPrintPreviewWidget.ZoomMode) interceptor.Invoke("zoomMode", "zoomMode() const", typeof(QPrintPreviewWidget.ZoomMode));
        }
        public int CurrentPage() {
            return (int) interceptor.Invoke("currentPage", "currentPage() const", typeof(int));
        }
        public int PageCount() {
            return (int) interceptor.Invoke("pageCount", "pageCount() const", typeof(int));
        }
        [SmokeMethod("setVisible(bool)")]
        public override void SetVisible(bool visible) {
            interceptor.Invoke("setVisible$", "setVisible(bool)", typeof(void), typeof(bool), visible);
        }
        [Q_SLOT("void print()")]
        public void Print() {
            interceptor.Invoke("print", "print()", typeof(void));
        }
        [Q_SLOT("void zoomIn(qreal)")]
        public void ZoomIn(double zoom) {
            interceptor.Invoke("zoomIn$", "zoomIn(qreal)", typeof(void), typeof(double), zoom);
        }
        [Q_SLOT("void zoomIn()")]
        public void ZoomIn() {
            interceptor.Invoke("zoomIn", "zoomIn()", typeof(void));
        }
        [Q_SLOT("void zoomOut(qreal)")]
        public void ZoomOut(double zoom) {
            interceptor.Invoke("zoomOut$", "zoomOut(qreal)", typeof(void), typeof(double), zoom);
        }
        [Q_SLOT("void zoomOut()")]
        public void ZoomOut() {
            interceptor.Invoke("zoomOut", "zoomOut()", typeof(void));
        }
        [Q_SLOT("void setZoomFactor(qreal)")]
        public void SetZoomFactor(double zoomFactor) {
            interceptor.Invoke("setZoomFactor$", "setZoomFactor(qreal)", typeof(void), typeof(double), zoomFactor);
        }
        [Q_SLOT("void setOrientation(QPrinter::Orientation)")]
        public void SetOrientation(QPrinter.Orientation orientation) {
            interceptor.Invoke("setOrientation$", "setOrientation(QPrinter::Orientation)", typeof(void), typeof(QPrinter.Orientation), orientation);
        }
        [Q_SLOT("void setViewMode(ViewMode)")]
        public void SetViewMode(QPrintPreviewWidget.ViewMode viewMode) {
            interceptor.Invoke("setViewMode$", "setViewMode(QPrintPreviewWidget::ViewMode)", typeof(void), typeof(QPrintPreviewWidget.ViewMode), viewMode);
        }
        [Q_SLOT("void setZoomMode(ZoomMode)")]
        public void SetZoomMode(QPrintPreviewWidget.ZoomMode zoomMode) {
            interceptor.Invoke("setZoomMode$", "setZoomMode(QPrintPreviewWidget::ZoomMode)", typeof(void), typeof(QPrintPreviewWidget.ZoomMode), zoomMode);
        }
        [Q_SLOT("void setCurrentPage(int)")]
        public void SetCurrentPage(int pageNumber) {
            interceptor.Invoke("setCurrentPage$", "setCurrentPage(int)", typeof(void), typeof(int), pageNumber);
        }
        [Q_SLOT("void fitToWidth()")]
        public void FitToWidth() {
            interceptor.Invoke("fitToWidth", "fitToWidth()", typeof(void));
        }
        [Q_SLOT("void fitInView()")]
        public void FitInView() {
            interceptor.Invoke("fitInView", "fitInView()", typeof(void));
        }
        [Q_SLOT("void setLandscapeOrientation()")]
        public void SetLandscapeOrientation() {
            interceptor.Invoke("setLandscapeOrientation", "setLandscapeOrientation()", typeof(void));
        }
        [Q_SLOT("void setPortraitOrientation()")]
        public void SetPortraitOrientation() {
            interceptor.Invoke("setPortraitOrientation", "setPortraitOrientation()", typeof(void));
        }
        [Q_SLOT("void setSinglePageViewMode()")]
        public void SetSinglePageViewMode() {
            interceptor.Invoke("setSinglePageViewMode", "setSinglePageViewMode()", typeof(void));
        }
        [Q_SLOT("void setFacingPagesViewMode()")]
        public void SetFacingPagesViewMode() {
            interceptor.Invoke("setFacingPagesViewMode", "setFacingPagesViewMode()", typeof(void));
        }
        [Q_SLOT("void setAllPagesViewMode()")]
        public void SetAllPagesViewMode() {
            interceptor.Invoke("setAllPagesViewMode", "setAllPagesViewMode()", typeof(void));
        }
        [Q_SLOT("void updatePreview()")]
        public void UpdatePreview() {
            interceptor.Invoke("updatePreview", "updatePreview()", typeof(void));
        }
        ~QPrintPreviewWidget() {
            interceptor.Invoke("~QPrintPreviewWidget", "~QPrintPreviewWidget()", typeof(void));
        }
        public new void Dispose() {
            interceptor.Invoke("~QPrintPreviewWidget", "~QPrintPreviewWidget()", typeof(void));
        }
        public static new string Tr(string s, string c) {
            return (string) staticInterceptor.Invoke("tr$$", "tr(const char*, const char*)", typeof(string), typeof(string), s, typeof(string), c);
        }
        public static new string Tr(string s) {
            return (string) staticInterceptor.Invoke("tr$", "tr(const char*)", typeof(string), typeof(string), s);
        }
        protected new IQPrintPreviewWidgetSignals Emit {
            get { return (IQPrintPreviewWidgetSignals) Q_EMIT; }
        }
    }

    public interface IQPrintPreviewWidgetSignals : IQWidgetSignals {
        [Q_SIGNAL("void paintRequested(QPrinter*)")]
        void PaintRequested(QPrinter printer);
        [Q_SIGNAL("void previewChanged()")]
        void PreviewChanged();
    }
}
