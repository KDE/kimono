//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {
    using System;
    [SmokeClass("QVector4D")]
    public class QVector4D : Object, IDisposable {
        protected SmokeInvocation interceptor = null;
        private IntPtr smokeObject;
        protected QVector4D(Type dummy) {}
        protected void CreateProxy() {
            interceptor = new SmokeInvocation(typeof(QVector4D), this);
        }
        private static SmokeInvocation staticInterceptor = null;
        static QVector4D() {
            staticInterceptor = new SmokeInvocation(typeof(QVector4D), null);
        }
        public QVector4D() : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("QVector4D", "QVector4D()", typeof(void));
        }
        public QVector4D(double xpos, double ypos, double zpos, double wpos) : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("QVector4D$$$$", "QVector4D(qreal, qreal, qreal, qreal)", typeof(void), typeof(double), xpos, typeof(double), ypos, typeof(double), zpos, typeof(double), wpos);
        }
        public QVector4D(QPoint point) : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("QVector4D#", "QVector4D(const QPoint&)", typeof(void), typeof(QPoint), point);
        }
        public QVector4D(QPointF point) : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("QVector4D#", "QVector4D(const QPointF&)", typeof(void), typeof(QPointF), point);
        }
        public QVector4D(QVector2D vector) : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("QVector4D#", "QVector4D(const QVector2D&)", typeof(void), typeof(QVector2D), vector);
        }
        public QVector4D(QVector2D vector, double zpos, double wpos) : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("QVector4D#$$", "QVector4D(const QVector2D&, qreal, qreal)", typeof(void), typeof(QVector2D), vector, typeof(double), zpos, typeof(double), wpos);
        }
        public QVector4D(QVector3D vector) : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("QVector4D#", "QVector4D(const QVector3D&)", typeof(void), typeof(QVector3D), vector);
        }
        public QVector4D(QVector3D vector, double wpos) : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("QVector4D#$", "QVector4D(const QVector3D&, qreal)", typeof(void), typeof(QVector3D), vector, typeof(double), wpos);
        }
        public bool IsNull() {
            return (bool) interceptor.Invoke("isNull", "isNull() const", typeof(bool));
        }
        public double X() {
            return (double) interceptor.Invoke("x", "x() const", typeof(double));
        }
        public double Y() {
            return (double) interceptor.Invoke("y", "y() const", typeof(double));
        }
        public double Z() {
            return (double) interceptor.Invoke("z", "z() const", typeof(double));
        }
        public double W() {
            return (double) interceptor.Invoke("w", "w() const", typeof(double));
        }
        public void SetX(double x) {
            interceptor.Invoke("setX$", "setX(qreal)", typeof(void), typeof(double), x);
        }
        public void SetY(double y) {
            interceptor.Invoke("setY$", "setY(qreal)", typeof(void), typeof(double), y);
        }
        public void SetZ(double z) {
            interceptor.Invoke("setZ$", "setZ(qreal)", typeof(void), typeof(double), z);
        }
        public void SetW(double w) {
            interceptor.Invoke("setW$", "setW(qreal)", typeof(void), typeof(double), w);
        }
        public double Length() {
            return (double) interceptor.Invoke("length", "length() const", typeof(double));
        }
        public double LengthSquared() {
            return (double) interceptor.Invoke("lengthSquared", "lengthSquared() const", typeof(double));
        }
        public QVector4D Normalized() {
            return (QVector4D) interceptor.Invoke("normalized", "normalized() const", typeof(QVector4D));
        }
        public void Normalize() {
            interceptor.Invoke("normalize", "normalize()", typeof(void));
        }
        public QVector2D ToVector2D() {
            return (QVector2D) interceptor.Invoke("toVector2D", "toVector2D() const", typeof(QVector2D));
        }
        public QVector2D ToVector2DAffine() {
            return (QVector2D) interceptor.Invoke("toVector2DAffine", "toVector2DAffine() const", typeof(QVector2D));
        }
        public QVector3D ToVector3D() {
            return (QVector3D) interceptor.Invoke("toVector3D", "toVector3D() const", typeof(QVector3D));
        }
        public QVector3D ToVector3DAffine() {
            return (QVector3D) interceptor.Invoke("toVector3DAffine", "toVector3DAffine() const", typeof(QVector3D));
        }
        public QPoint ToPoint() {
            return (QPoint) interceptor.Invoke("toPoint", "toPoint() const", typeof(QPoint));
        }
        public QPointF ToPointF() {
            return (QPointF) interceptor.Invoke("toPointF", "toPointF() const", typeof(QPointF));
        }
        ~QVector4D() {
            interceptor.Invoke("~QVector4D", "~QVector4D()", typeof(void));
        }
        public void Dispose() {
            interceptor.Invoke("~QVector4D", "~QVector4D()", typeof(void));
        }
        public override bool Equals(object o) {
            if (!(o is QVector4D)) { return false; }
            return this == (QVector4D) o;
        }
        public override int GetHashCode() {
            return interceptor.GetHashCode();
        }
        public static QVector4D operator*(QVector4D lhs, double factor) {
            return (QVector4D) staticInterceptor.Invoke("operator*=$", "operator*=(qreal)", typeof(QVector4D), typeof(QVector4D), lhs, typeof(double), factor);
        }
        public static QVector4D operator*(QVector4D lhs, QVector4D vector) {
            return (QVector4D) staticInterceptor.Invoke("operator*=#", "operator*=(const QVector4D&)", typeof(QVector4D), typeof(QVector4D), lhs, typeof(QVector4D), vector);
        }
        public static QVector4D operator/(QVector4D lhs, double divisor) {
            return (QVector4D) staticInterceptor.Invoke("operator/=$", "operator/=(qreal)", typeof(QVector4D), typeof(QVector4D), lhs, typeof(double), divisor);
        }
        public static QVariant operatorQVariant(QVector4D lhs) {
            return (QVariant) staticInterceptor.Invoke("operator QVariant", "operator QVariant() const", typeof(QVariant), typeof(QVector4D), lhs);
        }
        public static double DotProduct(QVector4D v1, QVector4D v2) {
            return (double) staticInterceptor.Invoke("dotProduct##", "dotProduct(const QVector4D&, const QVector4D&)", typeof(double), typeof(QVector4D), v1, typeof(QVector4D), v2);
        }
        public static QVector4D operator*(QVector4D vector, QMatrix4x4 matrix) {
            return (QVector4D) staticInterceptor.Invoke("operator*##", "operator*(const QVector4D&, const QMatrix4x4&)", typeof(QVector4D), typeof(QVector4D), vector, typeof(QMatrix4x4), matrix);
        }
        public static QVector4D operator*(QMatrix4x4 matrix, QVector4D vector) {
            return (QVector4D) staticInterceptor.Invoke("operator*##", "operator*(const QMatrix4x4&, const QVector4D&)", typeof(QVector4D), typeof(QMatrix4x4), matrix, typeof(QVector4D), vector);
        }
        public static bool operator==(QVector4D v1, QVector4D v2) {
            return (bool) staticInterceptor.Invoke("operator==##", "operator==(const QVector4D&, const QVector4D&)", typeof(bool), typeof(QVector4D), v1, typeof(QVector4D), v2);
        }
        public static bool operator!=(QVector4D v1, QVector4D v2) {
            return !(bool) staticInterceptor.Invoke("operator==##", "operator==(const QVector4D&, const QVector4D&)", typeof(bool), typeof(QVector4D), v1, typeof(QVector4D), v2);
        }
        public static QVector4D operator+(QVector4D v1, QVector4D v2) {
            return (QVector4D) staticInterceptor.Invoke("operator+##", "operator+(const QVector4D&, const QVector4D&)", typeof(QVector4D), typeof(QVector4D), v1, typeof(QVector4D), v2);
        }
        public static QVector4D operator-(QVector4D v1, QVector4D v2) {
            return (QVector4D) staticInterceptor.Invoke("operator-##", "operator-(const QVector4D&, const QVector4D&)", typeof(QVector4D), typeof(QVector4D), v1, typeof(QVector4D), v2);
        }
        public static QVector4D operator*(double factor, QVector4D vector) {
            return (QVector4D) staticInterceptor.Invoke("operator*$#", "operator*(qreal, const QVector4D&)", typeof(QVector4D), typeof(double), factor, typeof(QVector4D), vector);
        }
        public static QVector4D operator-(QVector4D vector) {
            return (QVector4D) staticInterceptor.Invoke("operator-#", "operator-(const QVector4D&)", typeof(QVector4D), typeof(QVector4D), vector);
        }
    }
}
