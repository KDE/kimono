//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {
    using System;
    [SmokeClass("QSwipeGesture")]
    public class QSwipeGesture : QGesture, IDisposable {
        protected QSwipeGesture(Type dummy) : base((Type) null) {}
        protected new void CreateProxy() {
            interceptor = new SmokeInvocation(typeof(QSwipeGesture), this);
        }
        private static SmokeInvocation staticInterceptor = null;
        static QSwipeGesture() {
            staticInterceptor = new SmokeInvocation(typeof(QSwipeGesture), null);
        }
        public enum SwipeDirection {
            NoDirection = 0,
            Left = 1,
            Right = 2,
            Up = 3,
            Down = 4,
        }
        [Q_PROPERTY("QSwipeGesture::SwipeDirection", "horizontalDirection")]
        public QSwipeGesture.SwipeDirection HorizontalDirection {
            get { return (QSwipeGesture.SwipeDirection) interceptor.Invoke("horizontalDirection", "horizontalDirection()", typeof(QSwipeGesture.SwipeDirection)); }
            set { interceptor.Invoke("false$", "false(QSwipeGesture::SwipeDirection)", typeof(void), typeof(QSwipeGesture.SwipeDirection), value); }
        }
        [Q_PROPERTY("QSwipeGesture::SwipeDirection", "verticalDirection")]
        public QSwipeGesture.SwipeDirection VerticalDirection {
            get { return (QSwipeGesture.SwipeDirection) interceptor.Invoke("verticalDirection", "verticalDirection()", typeof(QSwipeGesture.SwipeDirection)); }
            set { interceptor.Invoke("false$", "false(QSwipeGesture::SwipeDirection)", typeof(void), typeof(QSwipeGesture.SwipeDirection), value); }
        }
        [Q_PROPERTY("qreal", "swipeAngle")]
        public double SwipeAngle {
            get { return (double) interceptor.Invoke("swipeAngle", "swipeAngle()", typeof(double)); }
            set { interceptor.Invoke("setSwipeAngle$", "setSwipeAngle(qreal)", typeof(void), typeof(double), value); }
        }
        public QSwipeGesture(QObject parent) : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("QSwipeGesture#", "QSwipeGesture(QObject*)", typeof(void), typeof(QObject), parent);
        }
        public QSwipeGesture() : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("QSwipeGesture", "QSwipeGesture()", typeof(void));
        }
        ~QSwipeGesture() {
            interceptor.Invoke("~QSwipeGesture", "~QSwipeGesture()", typeof(void));
        }
        public new void Dispose() {
            interceptor.Invoke("~QSwipeGesture", "~QSwipeGesture()", typeof(void));
        }
        public static new string Tr(string s, string c) {
            return (string) staticInterceptor.Invoke("tr$$", "tr(const char*, const char*)", typeof(string), typeof(string), s, typeof(string), c);
        }
        public static new string Tr(string s) {
            return (string) staticInterceptor.Invoke("tr$", "tr(const char*)", typeof(string), typeof(string), s);
        }
        protected new IQSwipeGestureSignals Emit {
            get { return (IQSwipeGestureSignals) Q_EMIT; }
        }
    }

    public interface IQSwipeGestureSignals : IQGestureSignals {
    }
}
