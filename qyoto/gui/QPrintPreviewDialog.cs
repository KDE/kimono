//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {
    using System;
    /// <remarks> See <see cref="IQPrintPreviewDialogSignals"></see> for signals emitted by QPrintPreviewDialog
    /// </remarks>
    [SmokeClass("QPrintPreviewDialog")]
    public class QPrintPreviewDialog : QDialog, IDisposable {
        protected QPrintPreviewDialog(Type dummy) : base((Type) null) {}
        protected new void CreateProxy() {
            interceptor = new SmokeInvocation(typeof(QPrintPreviewDialog), this);
        }
        private static SmokeInvocation staticInterceptor = null;
        static QPrintPreviewDialog() {
            staticInterceptor = new SmokeInvocation(typeof(QPrintPreviewDialog), null);
        }
        public QPrintPreviewDialog(QWidget parent, uint flags) : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("QPrintPreviewDialog#$", "QPrintPreviewDialog(QWidget*, Qt::WindowFlags)", typeof(void), typeof(QWidget), parent, typeof(uint), flags);
        }
        public QPrintPreviewDialog(QWidget parent) : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("QPrintPreviewDialog#", "QPrintPreviewDialog(QWidget*)", typeof(void), typeof(QWidget), parent);
        }
        public QPrintPreviewDialog() : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("QPrintPreviewDialog", "QPrintPreviewDialog()", typeof(void));
        }
        public QPrintPreviewDialog(QPrinter printer, QWidget parent, uint flags) : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("QPrintPreviewDialog##$", "QPrintPreviewDialog(QPrinter*, QWidget*, Qt::WindowFlags)", typeof(void), typeof(QPrinter), printer, typeof(QWidget), parent, typeof(uint), flags);
        }
        public QPrintPreviewDialog(QPrinter printer, QWidget parent) : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("QPrintPreviewDialog##", "QPrintPreviewDialog(QPrinter*, QWidget*)", typeof(void), typeof(QPrinter), printer, typeof(QWidget), parent);
        }
        public QPrintPreviewDialog(QPrinter printer) : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("QPrintPreviewDialog#", "QPrintPreviewDialog(QPrinter*)", typeof(void), typeof(QPrinter), printer);
        }
        public new void Open() {
            interceptor.Invoke("open", "open()", typeof(void));
        }
        public void Open(QObject receiver, string member) {
            interceptor.Invoke("open#$", "open(QObject*, const char*)", typeof(void), typeof(QObject), receiver, typeof(string), member);
        }
        public QPrinter Printer() {
            return (QPrinter) interceptor.Invoke("printer", "printer()", typeof(QPrinter));
        }
        [SmokeMethod("setVisible(bool)")]
        public override void SetVisible(bool visible) {
            interceptor.Invoke("setVisible$", "setVisible(bool)", typeof(void), typeof(bool), visible);
        }
        [SmokeMethod("done(int)")]
        public override void Done(int result) {
            interceptor.Invoke("done$", "done(int)", typeof(void), typeof(int), result);
        }
        ~QPrintPreviewDialog() {
            interceptor.Invoke("~QPrintPreviewDialog", "~QPrintPreviewDialog()", typeof(void));
        }
        public new void Dispose() {
            interceptor.Invoke("~QPrintPreviewDialog", "~QPrintPreviewDialog()", typeof(void));
        }
        public static new string Tr(string s, string c) {
            return (string) staticInterceptor.Invoke("tr$$", "tr(const char*, const char*)", typeof(string), typeof(string), s, typeof(string), c);
        }
        public static new string Tr(string s) {
            return (string) staticInterceptor.Invoke("tr$", "tr(const char*)", typeof(string), typeof(string), s);
        }
        protected new IQPrintPreviewDialogSignals Emit {
            get { return (IQPrintPreviewDialogSignals) Q_EMIT; }
        }
    }

    public interface IQPrintPreviewDialogSignals : IQDialogSignals {
        [Q_SIGNAL("void paintRequested(QPrinter*)")]
        void PaintRequested(QPrinter printer);
    }
}
