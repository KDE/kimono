//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {
    using System;
    [SmokeClass("QQuaternion")]
    public class QQuaternion : Object, IDisposable {
        protected SmokeInvocation interceptor = null;
        private IntPtr smokeObject;
        protected QQuaternion(Type dummy) {}
        protected void CreateProxy() {
            interceptor = new SmokeInvocation(typeof(QQuaternion), this);
        }
        private static SmokeInvocation staticInterceptor = null;
        static QQuaternion() {
            staticInterceptor = new SmokeInvocation(typeof(QQuaternion), null);
        }
        public QQuaternion() : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("QQuaternion", "QQuaternion()", typeof(void));
        }
        public QQuaternion(double scalar, double xpos, double ypos, double zpos) : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("QQuaternion$$$$", "QQuaternion(qreal, qreal, qreal, qreal)", typeof(void), typeof(double), scalar, typeof(double), xpos, typeof(double), ypos, typeof(double), zpos);
        }
        public QQuaternion(double scalar, QVector3D vector) : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("QQuaternion$#", "QQuaternion(qreal, const QVector3D&)", typeof(void), typeof(double), scalar, typeof(QVector3D), vector);
        }
        public QQuaternion(QVector4D vector) : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("QQuaternion#", "QQuaternion(const QVector4D&)", typeof(void), typeof(QVector4D), vector);
        }
        public bool IsNull() {
            return (bool) interceptor.Invoke("isNull", "isNull() const", typeof(bool));
        }
        public bool IsIdentity() {
            return (bool) interceptor.Invoke("isIdentity", "isIdentity() const", typeof(bool));
        }
        public QVector3D Vector() {
            return (QVector3D) interceptor.Invoke("vector", "vector() const", typeof(QVector3D));
        }
        public void SetVector(QVector3D vector) {
            interceptor.Invoke("setVector#", "setVector(const QVector3D&)", typeof(void), typeof(QVector3D), vector);
        }
        public void SetVector(double x, double y, double z) {
            interceptor.Invoke("setVector$$$", "setVector(qreal, qreal, qreal)", typeof(void), typeof(double), x, typeof(double), y, typeof(double), z);
        }
        public double X() {
            return (double) interceptor.Invoke("x", "x() const", typeof(double));
        }
        public double Y() {
            return (double) interceptor.Invoke("y", "y() const", typeof(double));
        }
        public double Z() {
            return (double) interceptor.Invoke("z", "z() const", typeof(double));
        }
        public double Scalar() {
            return (double) interceptor.Invoke("scalar", "scalar() const", typeof(double));
        }
        public void SetX(double x) {
            interceptor.Invoke("setX$", "setX(qreal)", typeof(void), typeof(double), x);
        }
        public void SetY(double y) {
            interceptor.Invoke("setY$", "setY(qreal)", typeof(void), typeof(double), y);
        }
        public void SetZ(double z) {
            interceptor.Invoke("setZ$", "setZ(qreal)", typeof(void), typeof(double), z);
        }
        public void SetScalar(double scalar) {
            interceptor.Invoke("setScalar$", "setScalar(qreal)", typeof(void), typeof(double), scalar);
        }
        public double Length() {
            return (double) interceptor.Invoke("length", "length() const", typeof(double));
        }
        public double LengthSquared() {
            return (double) interceptor.Invoke("lengthSquared", "lengthSquared() const", typeof(double));
        }
        public QQuaternion Normalized() {
            return (QQuaternion) interceptor.Invoke("normalized", "normalized() const", typeof(QQuaternion));
        }
        public void Normalize() {
            interceptor.Invoke("normalize", "normalize()", typeof(void));
        }
        public QQuaternion Conjugate() {
            return (QQuaternion) interceptor.Invoke("conjugate", "conjugate() const", typeof(QQuaternion));
        }
        public QVector3D RotatedVector(QVector3D vector) {
            return (QVector3D) interceptor.Invoke("rotatedVector#", "rotatedVector(const QVector3D&) const", typeof(QVector3D), typeof(QVector3D), vector);
        }
        public QVector4D ToVector4D() {
            return (QVector4D) interceptor.Invoke("toVector4D", "toVector4D() const", typeof(QVector4D));
        }
        ~QQuaternion() {
            interceptor.Invoke("~QQuaternion", "~QQuaternion()", typeof(void));
        }
        public void Dispose() {
            interceptor.Invoke("~QQuaternion", "~QQuaternion()", typeof(void));
        }
        public override bool Equals(object o) {
            if (!(o is QQuaternion)) { return false; }
            return this == (QQuaternion) o;
        }
        public override int GetHashCode() {
            return interceptor.GetHashCode();
        }
        public static QQuaternion operator*(QQuaternion lhs, double factor) {
            return (QQuaternion) staticInterceptor.Invoke("operator*=$", "operator*=(qreal)", typeof(QQuaternion), typeof(QQuaternion), lhs, typeof(double), factor);
        }
        public static QQuaternion operator*(QQuaternion lhs, QQuaternion quaternion) {
            return (QQuaternion) staticInterceptor.Invoke("operator*=#", "operator*=(const QQuaternion&)", typeof(QQuaternion), typeof(QQuaternion), lhs, typeof(QQuaternion), quaternion);
        }
        public static QQuaternion operator/(QQuaternion lhs, double divisor) {
            return (QQuaternion) staticInterceptor.Invoke("operator/=$", "operator/=(qreal)", typeof(QQuaternion), typeof(QQuaternion), lhs, typeof(double), divisor);
        }
        public static QVariant operatorQVariant(QQuaternion lhs) {
            return (QVariant) staticInterceptor.Invoke("operator QVariant", "operator QVariant() const", typeof(QVariant), typeof(QQuaternion), lhs);
        }
        public static QQuaternion FromAxisAndAngle(QVector3D axis, double angle) {
            return (QQuaternion) staticInterceptor.Invoke("fromAxisAndAngle#$", "fromAxisAndAngle(const QVector3D&, qreal)", typeof(QQuaternion), typeof(QVector3D), axis, typeof(double), angle);
        }
        public static QQuaternion FromAxisAndAngle(double x, double y, double z, double angle) {
            return (QQuaternion) staticInterceptor.Invoke("fromAxisAndAngle$$$$", "fromAxisAndAngle(qreal, qreal, qreal, qreal)", typeof(QQuaternion), typeof(double), x, typeof(double), y, typeof(double), z, typeof(double), angle);
        }
        public static QQuaternion Slerp(QQuaternion q1, QQuaternion q2, double t) {
            return (QQuaternion) staticInterceptor.Invoke("slerp##$", "slerp(const QQuaternion&, const QQuaternion&, qreal)", typeof(QQuaternion), typeof(QQuaternion), q1, typeof(QQuaternion), q2, typeof(double), t);
        }
        public static QQuaternion Nlerp(QQuaternion q1, QQuaternion q2, double t) {
            return (QQuaternion) staticInterceptor.Invoke("nlerp##$", "nlerp(const QQuaternion&, const QQuaternion&, qreal)", typeof(QQuaternion), typeof(QQuaternion), q1, typeof(QQuaternion), q2, typeof(double), t);
        }
        public static bool operator==(QQuaternion q1, QQuaternion q2) {
            return (bool) staticInterceptor.Invoke("operator==##", "operator==(const QQuaternion&, const QQuaternion&)", typeof(bool), typeof(QQuaternion), q1, typeof(QQuaternion), q2);
        }
        public static bool operator!=(QQuaternion q1, QQuaternion q2) {
            return !(bool) staticInterceptor.Invoke("operator==##", "operator==(const QQuaternion&, const QQuaternion&)", typeof(bool), typeof(QQuaternion), q1, typeof(QQuaternion), q2);
        }
        public static QQuaternion operator+(QQuaternion q1, QQuaternion q2) {
            return (QQuaternion) staticInterceptor.Invoke("operator+##", "operator+(const QQuaternion&, const QQuaternion&)", typeof(QQuaternion), typeof(QQuaternion), q1, typeof(QQuaternion), q2);
        }
        public static QQuaternion operator-(QQuaternion q1, QQuaternion q2) {
            return (QQuaternion) staticInterceptor.Invoke("operator-##", "operator-(const QQuaternion&, const QQuaternion&)", typeof(QQuaternion), typeof(QQuaternion), q1, typeof(QQuaternion), q2);
        }
        public static QQuaternion operator*(double factor, QQuaternion quaternion) {
            return (QQuaternion) staticInterceptor.Invoke("operator*$#", "operator*(qreal, const QQuaternion&)", typeof(QQuaternion), typeof(double), factor, typeof(QQuaternion), quaternion);
        }
        public static QQuaternion operator-(QQuaternion quaternion) {
            return (QQuaternion) staticInterceptor.Invoke("operator-#", "operator-(const QQuaternion&)", typeof(QQuaternion), typeof(QQuaternion), quaternion);
        }
    }
}
