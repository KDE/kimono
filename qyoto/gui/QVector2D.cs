//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {
    using System;
    [SmokeClass("QVector2D")]
    public class QVector2D : Object, IDisposable {
        protected SmokeInvocation interceptor = null;
        private IntPtr smokeObject;
        protected QVector2D(Type dummy) {}
        protected void CreateProxy() {
            interceptor = new SmokeInvocation(typeof(QVector2D), this);
        }
        private static SmokeInvocation staticInterceptor = null;
        static QVector2D() {
            staticInterceptor = new SmokeInvocation(typeof(QVector2D), null);
        }
        public QVector2D() : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("QVector2D", "QVector2D()", typeof(void));
        }
        public QVector2D(double xpos, double ypos) : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("QVector2D$$", "QVector2D(qreal, qreal)", typeof(void), typeof(double), xpos, typeof(double), ypos);
        }
        public QVector2D(QPoint point) : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("QVector2D#", "QVector2D(const QPoint&)", typeof(void), typeof(QPoint), point);
        }
        public QVector2D(QPointF point) : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("QVector2D#", "QVector2D(const QPointF&)", typeof(void), typeof(QPointF), point);
        }
        public QVector2D(QVector3D vector) : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("QVector2D#", "QVector2D(const QVector3D&)", typeof(void), typeof(QVector3D), vector);
        }
        public QVector2D(QVector4D vector) : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("QVector2D#", "QVector2D(const QVector4D&)", typeof(void), typeof(QVector4D), vector);
        }
        public bool IsNull() {
            return (bool) interceptor.Invoke("isNull", "isNull() const", typeof(bool));
        }
        public double X() {
            return (double) interceptor.Invoke("x", "x() const", typeof(double));
        }
        public double Y() {
            return (double) interceptor.Invoke("y", "y() const", typeof(double));
        }
        public void SetX(double x) {
            interceptor.Invoke("setX$", "setX(qreal)", typeof(void), typeof(double), x);
        }
        public void SetY(double y) {
            interceptor.Invoke("setY$", "setY(qreal)", typeof(void), typeof(double), y);
        }
        public double Length() {
            return (double) interceptor.Invoke("length", "length() const", typeof(double));
        }
        public double LengthSquared() {
            return (double) interceptor.Invoke("lengthSquared", "lengthSquared() const", typeof(double));
        }
        public QVector2D Normalized() {
            return (QVector2D) interceptor.Invoke("normalized", "normalized() const", typeof(QVector2D));
        }
        public void Normalize() {
            interceptor.Invoke("normalize", "normalize()", typeof(void));
        }
        public QVector3D ToVector3D() {
            return (QVector3D) interceptor.Invoke("toVector3D", "toVector3D() const", typeof(QVector3D));
        }
        public QVector4D ToVector4D() {
            return (QVector4D) interceptor.Invoke("toVector4D", "toVector4D() const", typeof(QVector4D));
        }
        public QPoint ToPoint() {
            return (QPoint) interceptor.Invoke("toPoint", "toPoint() const", typeof(QPoint));
        }
        public QPointF ToPointF() {
            return (QPointF) interceptor.Invoke("toPointF", "toPointF() const", typeof(QPointF));
        }
        ~QVector2D() {
            interceptor.Invoke("~QVector2D", "~QVector2D()", typeof(void));
        }
        public void Dispose() {
            interceptor.Invoke("~QVector2D", "~QVector2D()", typeof(void));
        }
        public override bool Equals(object o) {
            if (!(o is QVector2D)) { return false; }
            return this == (QVector2D) o;
        }
        public override int GetHashCode() {
            return interceptor.GetHashCode();
        }
        public static QVector2D operator*(QVector2D lhs, double factor) {
            return (QVector2D) staticInterceptor.Invoke("operator*=$", "operator*=(qreal)", typeof(QVector2D), typeof(QVector2D), lhs, typeof(double), factor);
        }
        public static QVector2D operator*(QVector2D lhs, QVector2D vector) {
            return (QVector2D) staticInterceptor.Invoke("operator*=#", "operator*=(const QVector2D&)", typeof(QVector2D), typeof(QVector2D), lhs, typeof(QVector2D), vector);
        }
        public static QVector2D operator/(QVector2D lhs, double divisor) {
            return (QVector2D) staticInterceptor.Invoke("operator/=$", "operator/=(qreal)", typeof(QVector2D), typeof(QVector2D), lhs, typeof(double), divisor);
        }
        public static QVariant operatorQVariant(QVector2D lhs) {
            return (QVariant) staticInterceptor.Invoke("operator QVariant", "operator QVariant() const", typeof(QVariant), typeof(QVector2D), lhs);
        }
        public static double DotProduct(QVector2D v1, QVector2D v2) {
            return (double) staticInterceptor.Invoke("dotProduct##", "dotProduct(const QVector2D&, const QVector2D&)", typeof(double), typeof(QVector2D), v1, typeof(QVector2D), v2);
        }
        public static bool operator==(QVector2D v1, QVector2D v2) {
            return (bool) staticInterceptor.Invoke("operator==##", "operator==(const QVector2D&, const QVector2D&)", typeof(bool), typeof(QVector2D), v1, typeof(QVector2D), v2);
        }
        public static bool operator!=(QVector2D v1, QVector2D v2) {
            return !(bool) staticInterceptor.Invoke("operator==##", "operator==(const QVector2D&, const QVector2D&)", typeof(bool), typeof(QVector2D), v1, typeof(QVector2D), v2);
        }
        public static QVector2D operator+(QVector2D v1, QVector2D v2) {
            return (QVector2D) staticInterceptor.Invoke("operator+##", "operator+(const QVector2D&, const QVector2D&)", typeof(QVector2D), typeof(QVector2D), v1, typeof(QVector2D), v2);
        }
        public static QVector2D operator-(QVector2D v1, QVector2D v2) {
            return (QVector2D) staticInterceptor.Invoke("operator-##", "operator-(const QVector2D&, const QVector2D&)", typeof(QVector2D), typeof(QVector2D), v1, typeof(QVector2D), v2);
        }
        public static QVector2D operator*(double factor, QVector2D vector) {
            return (QVector2D) staticInterceptor.Invoke("operator*$#", "operator*(qreal, const QVector2D&)", typeof(QVector2D), typeof(double), factor, typeof(QVector2D), vector);
        }
        public static QVector2D operator-(QVector2D vector) {
            return (QVector2D) staticInterceptor.Invoke("operator-#", "operator-(const QVector2D&)", typeof(QVector2D), typeof(QVector2D), vector);
        }
    }
}
