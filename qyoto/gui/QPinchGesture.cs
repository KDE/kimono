//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {
    using System;
    [SmokeClass("QPinchGesture")]
    public class QPinchGesture : QGesture, IDisposable {
        protected QPinchGesture(Type dummy) : base((Type) null) {}
        protected new void CreateProxy() {
            interceptor = new SmokeInvocation(typeof(QPinchGesture), this);
        }
        private static SmokeInvocation staticInterceptor = null;
        static QPinchGesture() {
            staticInterceptor = new SmokeInvocation(typeof(QPinchGesture), null);
        }
        public enum ChangeFlag {
            ScaleFactorChanged = 0x1,
            RotationAngleChanged = 0x2,
            CenterPointChanged = 0x4,
        }
        [Q_PROPERTY("QPinchGesture::ChangeFlags", "totalChangeFlags")]
        public uint TotalChangeFlags {
            get { return (uint) interceptor.Invoke("totalChangeFlags", "totalChangeFlags()", typeof(uint)); }
            set { interceptor.Invoke("setTotalChangeFlags$", "setTotalChangeFlags(QPinchGesture::ChangeFlags)", typeof(void), typeof(uint), value); }
        }
        [Q_PROPERTY("QPinchGesture::ChangeFlags", "changeFlags")]
        public uint ChangeFlags {
            get { return (uint) interceptor.Invoke("changeFlags", "changeFlags()", typeof(uint)); }
            set { interceptor.Invoke("setChangeFlags$", "setChangeFlags(QPinchGesture::ChangeFlags)", typeof(void), typeof(uint), value); }
        }
        [Q_PROPERTY("qreal", "totalScaleFactor")]
        public double TotalScaleFactor {
            get { return (double) interceptor.Invoke("totalScaleFactor", "totalScaleFactor()", typeof(double)); }
            set { interceptor.Invoke("setTotalScaleFactor$", "setTotalScaleFactor(qreal)", typeof(void), typeof(double), value); }
        }
        [Q_PROPERTY("qreal", "lastScaleFactor")]
        public double LastScaleFactor {
            get { return (double) interceptor.Invoke("lastScaleFactor", "lastScaleFactor()", typeof(double)); }
            set { interceptor.Invoke("setLastScaleFactor$", "setLastScaleFactor(qreal)", typeof(void), typeof(double), value); }
        }
        [Q_PROPERTY("qreal", "scaleFactor")]
        public double ScaleFactor {
            get { return (double) interceptor.Invoke("scaleFactor", "scaleFactor()", typeof(double)); }
            set { interceptor.Invoke("setScaleFactor$", "setScaleFactor(qreal)", typeof(void), typeof(double), value); }
        }
        [Q_PROPERTY("qreal", "totalRotationAngle")]
        public double TotalRotationAngle {
            get { return (double) interceptor.Invoke("totalRotationAngle", "totalRotationAngle()", typeof(double)); }
            set { interceptor.Invoke("setTotalRotationAngle$", "setTotalRotationAngle(qreal)", typeof(void), typeof(double), value); }
        }
        [Q_PROPERTY("qreal", "lastRotationAngle")]
        public double LastRotationAngle {
            get { return (double) interceptor.Invoke("lastRotationAngle", "lastRotationAngle()", typeof(double)); }
            set { interceptor.Invoke("setLastRotationAngle$", "setLastRotationAngle(qreal)", typeof(void), typeof(double), value); }
        }
        [Q_PROPERTY("qreal", "rotationAngle")]
        public double RotationAngle {
            get { return (double) interceptor.Invoke("rotationAngle", "rotationAngle()", typeof(double)); }
            set { interceptor.Invoke("setRotationAngle$", "setRotationAngle(qreal)", typeof(void), typeof(double), value); }
        }
        [Q_PROPERTY("QPointF", "startCenterPoint")]
        public QPointF StartCenterPoint {
            get { return (QPointF) interceptor.Invoke("startCenterPoint", "startCenterPoint()", typeof(QPointF)); }
            set { interceptor.Invoke("setStartCenterPoint#", "setStartCenterPoint(QPointF)", typeof(void), typeof(QPointF), value); }
        }
        [Q_PROPERTY("QPointF", "lastCenterPoint")]
        public QPointF LastCenterPoint {
            get { return (QPointF) interceptor.Invoke("lastCenterPoint", "lastCenterPoint()", typeof(QPointF)); }
            set { interceptor.Invoke("setLastCenterPoint#", "setLastCenterPoint(QPointF)", typeof(void), typeof(QPointF), value); }
        }
        [Q_PROPERTY("QPointF", "centerPoint")]
        public QPointF CenterPoint {
            get { return (QPointF) interceptor.Invoke("centerPoint", "centerPoint()", typeof(QPointF)); }
            set { interceptor.Invoke("setCenterPoint#", "setCenterPoint(QPointF)", typeof(void), typeof(QPointF), value); }
        }
        public QPinchGesture(QObject parent) : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("QPinchGesture#", "QPinchGesture(QObject*)", typeof(void), typeof(QObject), parent);
        }
        public QPinchGesture() : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("QPinchGesture", "QPinchGesture()", typeof(void));
        }
        ~QPinchGesture() {
            interceptor.Invoke("~QPinchGesture", "~QPinchGesture()", typeof(void));
        }
        public new void Dispose() {
            interceptor.Invoke("~QPinchGesture", "~QPinchGesture()", typeof(void));
        }
        public static new string Tr(string s, string c) {
            return (string) staticInterceptor.Invoke("tr$$", "tr(const char*, const char*)", typeof(string), typeof(string), s, typeof(string), c);
        }
        public static new string Tr(string s) {
            return (string) staticInterceptor.Invoke("tr$", "tr(const char*)", typeof(string), typeof(string), s);
        }
        protected new IQPinchGestureSignals Emit {
            get { return (IQPinchGestureSignals) Q_EMIT; }
        }
    }

    public interface IQPinchGestureSignals : IQGestureSignals {
    }
}
