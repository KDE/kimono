//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {
    using System;
    using System.Runtime.InteropServices;
    using System.Collections.Generic;
    [SmokeClass("QGraphicsWidget")]
    public class QGraphicsWidget : QGraphicsObject, IQGraphicsLayoutItem, IDisposable {
        protected QGraphicsWidget(Type dummy) : base((Type) null) {}
        protected new void CreateProxy() {
            interceptor = new SmokeInvocation(typeof(QGraphicsWidget), this);
        }
        private static SmokeInvocation staticInterceptor = null;
        static QGraphicsWidget() {
            staticInterceptor = new SmokeInvocation(typeof(QGraphicsWidget), null);
        }
        public new const int Type = 11;
        // QGraphicsWidget* QGraphicsWidget(QGraphicsWidgetPrivate& arg1,QGraphicsItem* arg2,QGraphicsScene* arg3,Qt::WindowFlags arg4); >>>> NOT CONVERTED
        // QGraphicsWidget* QGraphicsWidget(QGraphicsWidgetPrivate& arg1,QGraphicsItem* arg2,QGraphicsScene* arg3); >>>> NOT CONVERTED
        // QGraphicsLayoutItem* QGraphicsLayoutItem(QGraphicsLayoutItemPrivate& arg1); >>>> NOT CONVERTED
        // bool isBlockedByModalPanel(QGraphicsItem** arg1); >>>> NOT CONVERTED
        // QGraphicsItem* QGraphicsItem(QGraphicsItemPrivate& arg1,QGraphicsItem* arg2,QGraphicsScene* arg3); >>>> NOT CONVERTED
        public QGraphicsLayout Layout() {
            return (QGraphicsLayout) interceptor.Invoke("layout", "layout() const", typeof(QGraphicsLayout));
        }
        public void SetLayout(QGraphicsLayout layout) {
            interceptor.Invoke("setLayout#", "setLayout(QGraphicsLayout*)", typeof(void), typeof(QGraphicsLayout), layout);
        }
        public void AdjustSize() {
            interceptor.Invoke("adjustSize", "adjustSize()", typeof(void));
        }
        public new Qt.LayoutDirection LayoutDirection() {
            return (Qt.LayoutDirection) interceptor.Invoke("layoutDirection", "layoutDirection() const", typeof(Qt.LayoutDirection));
        }
        public void SetLayoutDirection(Qt.LayoutDirection direction) {
            interceptor.Invoke("setLayoutDirection$", "setLayoutDirection(Qt::LayoutDirection)", typeof(void), typeof(Qt.LayoutDirection), direction);
        }
        public void UnsetLayoutDirection() {
            interceptor.Invoke("unsetLayoutDirection", "unsetLayoutDirection()", typeof(void));
        }
        public QStyle Style() {
            return (QStyle) interceptor.Invoke("style", "style() const", typeof(QStyle));
        }
        public void SetStyle(QStyle style) {
            interceptor.Invoke("setStyle#", "setStyle(QStyle*)", typeof(void), typeof(QStyle), style);
        }
        public QFont Font() {
            return (QFont) interceptor.Invoke("font", "font() const", typeof(QFont));
        }
        public void SetFont(QFont font) {
            interceptor.Invoke("setFont#", "setFont(const QFont&)", typeof(void), typeof(QFont), font);
        }
        public void SetPalette(QPalette palette) {
            interceptor.Invoke("setPalette#", "setPalette(const QPalette&)", typeof(void), typeof(QPalette), palette);
        }
        public void Resize(QSizeF size) {
            interceptor.Invoke("resize#", "resize(const QSizeF&)", typeof(void), typeof(QSizeF), size);
        }
        public void Resize(double w, double h) {
            interceptor.Invoke("resize$$", "resize(qreal, qreal)", typeof(void), typeof(double), w, typeof(double), h);
        }
        public QSizeF Size() {
            return (QSizeF) interceptor.Invoke("size", "size() const", typeof(QSizeF));
        }
        [SmokeMethod("setGeometry(const QRectF&)")]
        public virtual void SetGeometry(QRectF rect) {
            interceptor.Invoke("setGeometry#", "setGeometry(const QRectF&)", typeof(void), typeof(QRectF), rect);
        }
        public void SetGeometry(double x, double y, double w, double h) {
            interceptor.Invoke("setGeometry$$$$", "setGeometry(qreal, qreal, qreal, qreal)", typeof(void), typeof(double), x, typeof(double), y, typeof(double), w, typeof(double), h);
        }
        public QRectF Rect() {
            return (QRectF) interceptor.Invoke("rect", "rect() const", typeof(QRectF));
        }
        public void SetContentsMargins(double left, double top, double right, double bottom) {
            interceptor.Invoke("setContentsMargins$$$$", "setContentsMargins(qreal, qreal, qreal, qreal)", typeof(void), typeof(double), left, typeof(double), top, typeof(double), right, typeof(double), bottom);
        }
        [SmokeMethod("getContentsMargins(qreal*, qreal*, qreal*, qreal*) const")]
        public virtual void GetContentsMargins(ref double left, ref double top, ref double right, ref double bottom) {
            StackItem[] stack = new StackItem[5];
            stack[1].s_double = left;
            stack[2].s_double = top;
            stack[3].s_double = right;
            stack[4].s_double = bottom;
            interceptor.Invoke("getContentsMargins$$$$", "getContentsMargins(qreal*, qreal*, qreal*, qreal*) const", stack);
            left = stack[1].s_double;
            top = stack[2].s_double;
            right = stack[3].s_double;
            bottom = stack[4].s_double;
            return;
        }
        public void SetWindowFrameMargins(double left, double top, double right, double bottom) {
            interceptor.Invoke("setWindowFrameMargins$$$$", "setWindowFrameMargins(qreal, qreal, qreal, qreal)", typeof(void), typeof(double), left, typeof(double), top, typeof(double), right, typeof(double), bottom);
        }
        public void GetWindowFrameMargins(ref double left, ref double top, ref double right, ref double bottom) {
            StackItem[] stack = new StackItem[5];
            stack[1].s_double = left;
            stack[2].s_double = top;
            stack[3].s_double = right;
            stack[4].s_double = bottom;
            interceptor.Invoke("getWindowFrameMargins$$$$", "getWindowFrameMargins(qreal*, qreal*, qreal*, qreal*) const", stack);
            left = stack[1].s_double;
            top = stack[2].s_double;
            right = stack[3].s_double;
            bottom = stack[4].s_double;
            return;
        }
        public void UnsetWindowFrameMargins() {
            interceptor.Invoke("unsetWindowFrameMargins", "unsetWindowFrameMargins()", typeof(void));
        }
        public QRectF WindowFrameGeometry() {
            return (QRectF) interceptor.Invoke("windowFrameGeometry", "windowFrameGeometry() const", typeof(QRectF));
        }
        public QRectF WindowFrameRect() {
            return (QRectF) interceptor.Invoke("windowFrameRect", "windowFrameRect() const", typeof(QRectF));
        }
        public uint WindowFlags() {
            return (uint) interceptor.Invoke("windowFlags", "windowFlags() const", typeof(uint));
        }
        public new Qt.WindowType WindowType() {
            return (Qt.WindowType) interceptor.Invoke("windowType", "windowType() const", typeof(Qt.WindowType));
        }
        public void SetWindowFlags(uint wFlags) {
            interceptor.Invoke("setWindowFlags$", "setWindowFlags(Qt::WindowFlags)", typeof(void), typeof(uint), wFlags);
        }
        public bool IsActiveWindow() {
            return (bool) interceptor.Invoke("isActiveWindow", "isActiveWindow() const", typeof(bool));
        }
        public void SetWindowTitle(string title) {
            interceptor.Invoke("setWindowTitle$", "setWindowTitle(const QString&)", typeof(void), typeof(string), title);
        }
        public string WindowTitle() {
            return (string) interceptor.Invoke("windowTitle", "windowTitle() const", typeof(string));
        }
        public new Qt.FocusPolicy FocusPolicy() {
            return (Qt.FocusPolicy) interceptor.Invoke("focusPolicy", "focusPolicy() const", typeof(Qt.FocusPolicy));
        }
        public void SetFocusPolicy(Qt.FocusPolicy policy) {
            interceptor.Invoke("setFocusPolicy$", "setFocusPolicy(Qt::FocusPolicy)", typeof(void), typeof(Qt.FocusPolicy), policy);
        }
        public QGraphicsWidget FocusWidget() {
            return (QGraphicsWidget) interceptor.Invoke("focusWidget", "focusWidget() const", typeof(QGraphicsWidget));
        }
        public int GrabShortcut(QKeySequence sequence, Qt.ShortcutContext context) {
            return (int) interceptor.Invoke("grabShortcut#$", "grabShortcut(const QKeySequence&, Qt::ShortcutContext)", typeof(int), typeof(QKeySequence), sequence, typeof(Qt.ShortcutContext), context);
        }
        public int GrabShortcut(QKeySequence sequence) {
            return (int) interceptor.Invoke("grabShortcut#", "grabShortcut(const QKeySequence&)", typeof(int), typeof(QKeySequence), sequence);
        }
        public void ReleaseShortcut(int id) {
            interceptor.Invoke("releaseShortcut$", "releaseShortcut(int)", typeof(void), typeof(int), id);
        }
        public void SetShortcutEnabled(int id, bool enabled) {
            interceptor.Invoke("setShortcutEnabled$$", "setShortcutEnabled(int, bool)", typeof(void), typeof(int), id, typeof(bool), enabled);
        }
        public void SetShortcutEnabled(int id) {
            interceptor.Invoke("setShortcutEnabled$", "setShortcutEnabled(int)", typeof(void), typeof(int), id);
        }
        public void SetShortcutAutoRepeat(int id, bool enabled) {
            interceptor.Invoke("setShortcutAutoRepeat$$", "setShortcutAutoRepeat(int, bool)", typeof(void), typeof(int), id, typeof(bool), enabled);
        }
        public void SetShortcutAutoRepeat(int id) {
            interceptor.Invoke("setShortcutAutoRepeat$", "setShortcutAutoRepeat(int)", typeof(void), typeof(int), id);
        }
        public void AddAction(QAction action) {
            interceptor.Invoke("addAction#", "addAction(QAction*)", typeof(void), typeof(QAction), action);
        }
        public void AddActions(List<QAction> actions) {
            interceptor.Invoke("addActions?", "addActions(QList<QAction*>)", typeof(void), typeof(List<QAction>), actions);
        }
        public void InsertAction(QAction before, QAction action) {
            interceptor.Invoke("insertAction##", "insertAction(QAction*, QAction*)", typeof(void), typeof(QAction), before, typeof(QAction), action);
        }
        public void InsertActions(QAction before, List<QAction> actions) {
            interceptor.Invoke("insertActions#?", "insertActions(QAction*, QList<QAction*>)", typeof(void), typeof(QAction), before, typeof(List<QAction>), actions);
        }
        public void RemoveAction(QAction action) {
            interceptor.Invoke("removeAction#", "removeAction(QAction*)", typeof(void), typeof(QAction), action);
        }
        public List<QAction> Actions() {
            return (List<QAction>) interceptor.Invoke("actions", "actions() const", typeof(List<QAction>));
        }
        public void SetAttribute(Qt.WidgetAttribute attribute, bool on) {
            interceptor.Invoke("setAttribute$$", "setAttribute(Qt::WidgetAttribute, bool)", typeof(void), typeof(Qt.WidgetAttribute), attribute, typeof(bool), on);
        }
        public void SetAttribute(Qt.WidgetAttribute attribute) {
            interceptor.Invoke("setAttribute$", "setAttribute(Qt::WidgetAttribute)", typeof(void), typeof(Qt.WidgetAttribute), attribute);
        }
        public bool TestAttribute(Qt.WidgetAttribute attribute) {
            return (bool) interceptor.Invoke("testAttribute$", "testAttribute(Qt::WidgetAttribute) const", typeof(bool), typeof(Qt.WidgetAttribute), attribute);
        }
        [SmokeMethod("type() const")]
        public virtual int type() {
            return (int) interceptor.Invoke("type", "type() const", typeof(int));
        }
        [SmokeMethod("paint(QPainter*, const QStyleOptionGraphicsItem*, QWidget*)")]
        public virtual void Paint(QPainter painter, QStyleOptionGraphicsItem option, QWidget widget) {
            interceptor.Invoke("paint###", "paint(QPainter*, const QStyleOptionGraphicsItem*, QWidget*)", typeof(void), typeof(QPainter), painter, typeof(QStyleOptionGraphicsItem), option, typeof(QWidget), widget);
        }
        [SmokeMethod("paint(QPainter*, const QStyleOptionGraphicsItem*)")]
        public virtual void Paint(QPainter painter, QStyleOptionGraphicsItem option) {
            interceptor.Invoke("paint##", "paint(QPainter*, const QStyleOptionGraphicsItem*)", typeof(void), typeof(QPainter), painter, typeof(QStyleOptionGraphicsItem), option);
        }
        [SmokeMethod("paintWindowFrame(QPainter*, const QStyleOptionGraphicsItem*, QWidget*)")]
        public virtual void PaintWindowFrame(QPainter painter, QStyleOptionGraphicsItem option, QWidget widget) {
            interceptor.Invoke("paintWindowFrame###", "paintWindowFrame(QPainter*, const QStyleOptionGraphicsItem*, QWidget*)", typeof(void), typeof(QPainter), painter, typeof(QStyleOptionGraphicsItem), option, typeof(QWidget), widget);
        }
        [SmokeMethod("paintWindowFrame(QPainter*, const QStyleOptionGraphicsItem*)")]
        public virtual void PaintWindowFrame(QPainter painter, QStyleOptionGraphicsItem option) {
            interceptor.Invoke("paintWindowFrame##", "paintWindowFrame(QPainter*, const QStyleOptionGraphicsItem*)", typeof(void), typeof(QPainter), painter, typeof(QStyleOptionGraphicsItem), option);
        }
        [SmokeMethod("boundingRect() const")]
        public virtual QRectF BoundingRect() {
            return (QRectF) interceptor.Invoke("boundingRect", "boundingRect() const", typeof(QRectF));
        }
        [SmokeMethod("shape() const")]
        public virtual QPainterPath Shape() {
            return (QPainterPath) interceptor.Invoke("shape", "shape() const", typeof(QPainterPath));
        }
        [Q_SLOT("bool close()")]
        public bool Close() {
            return (bool) interceptor.Invoke("close", "close()", typeof(bool));
        }
        [SmokeMethod("initStyleOption(QStyleOption*) const")]
        protected virtual void InitStyleOption(QStyleOption option) {
            interceptor.Invoke("initStyleOption#", "initStyleOption(QStyleOption*) const", typeof(void), typeof(QStyleOption), option);
        }
        [SmokeMethod("sizeHint(Qt::SizeHint, const QSizeF&) const")]
        public virtual QSizeF SizeHint(Qt.SizeHint which, QSizeF constraint) {
            return (QSizeF) interceptor.Invoke("sizeHint$#", "sizeHint(Qt::SizeHint, const QSizeF&) const", typeof(QSizeF), typeof(Qt.SizeHint), which, typeof(QSizeF), constraint);
        }
        [SmokeMethod("sizeHint(Qt::SizeHint) const")]
        protected virtual QSizeF SizeHint(Qt.SizeHint which) {
            return (QSizeF) interceptor.Invoke("sizeHint$", "sizeHint(Qt::SizeHint) const", typeof(QSizeF), typeof(Qt.SizeHint), which);
        }
        [SmokeMethod("updateGeometry()")]
        public new virtual void UpdateGeometry() {
            interceptor.Invoke("updateGeometry", "updateGeometry()", typeof(void));
        }
        [SmokeMethod("itemChange(QGraphicsItem::GraphicsItemChange, const QVariant&)")]
        protected virtual QVariant ItemChange(QGraphicsItem.GraphicsItemChange change, QVariant value) {
            return (QVariant) interceptor.Invoke("itemChange$#", "itemChange(QGraphicsItem::GraphicsItemChange, const QVariant&)", typeof(QVariant), typeof(QGraphicsItem.GraphicsItemChange), change, typeof(QVariant), value);
        }
        [SmokeMethod("propertyChange(const QString&, const QVariant&)")]
        protected virtual QVariant PropertyChange(string propertyName, QVariant value) {
            return (QVariant) interceptor.Invoke("propertyChange$#", "propertyChange(const QString&, const QVariant&)", typeof(QVariant), typeof(string), propertyName, typeof(QVariant), value);
        }
        [SmokeMethod("sceneEvent(QEvent*)")]
        protected virtual bool SceneEvent(QEvent arg1) {
            return (bool) interceptor.Invoke("sceneEvent#", "sceneEvent(QEvent*)", typeof(bool), typeof(QEvent), arg1);
        }
        [SmokeMethod("windowFrameEvent(QEvent*)")]
        protected virtual bool WindowFrameEvent(QEvent e) {
            return (bool) interceptor.Invoke("windowFrameEvent#", "windowFrameEvent(QEvent*)", typeof(bool), typeof(QEvent), e);
        }
        [SmokeMethod("windowFrameSectionAt(const QPointF&) const")]
        protected virtual Qt.WindowFrameSection WindowFrameSectionAt(QPointF pos) {
            return (Qt.WindowFrameSection) interceptor.Invoke("windowFrameSectionAt#", "windowFrameSectionAt(const QPointF&) const", typeof(Qt.WindowFrameSection), typeof(QPointF), pos);
        }
        [SmokeMethod("event(QEvent*)")]
        protected new virtual bool Event(QEvent arg1) {
            return (bool) interceptor.Invoke("event#", "event(QEvent*)", typeof(bool), typeof(QEvent), arg1);
        }
        [SmokeMethod("changeEvent(QEvent*)")]
        protected virtual void ChangeEvent(QEvent arg1) {
            interceptor.Invoke("changeEvent#", "changeEvent(QEvent*)", typeof(void), typeof(QEvent), arg1);
        }
        [SmokeMethod("closeEvent(QCloseEvent*)")]
        protected virtual void CloseEvent(QCloseEvent arg1) {
            interceptor.Invoke("closeEvent#", "closeEvent(QCloseEvent*)", typeof(void), typeof(QCloseEvent), arg1);
        }
        [SmokeMethod("focusInEvent(QFocusEvent*)")]
        protected virtual void FocusInEvent(QFocusEvent arg1) {
            interceptor.Invoke("focusInEvent#", "focusInEvent(QFocusEvent*)", typeof(void), typeof(QFocusEvent), arg1);
        }
        [SmokeMethod("focusNextPrevChild(bool)")]
        protected virtual bool FocusNextPrevChild(bool next) {
            return (bool) interceptor.Invoke("focusNextPrevChild$", "focusNextPrevChild(bool)", typeof(bool), typeof(bool), next);
        }
        [SmokeMethod("focusOutEvent(QFocusEvent*)")]
        protected virtual void FocusOutEvent(QFocusEvent arg1) {
            interceptor.Invoke("focusOutEvent#", "focusOutEvent(QFocusEvent*)", typeof(void), typeof(QFocusEvent), arg1);
        }
        [SmokeMethod("hideEvent(QHideEvent*)")]
        protected virtual void HideEvent(QHideEvent arg1) {
            interceptor.Invoke("hideEvent#", "hideEvent(QHideEvent*)", typeof(void), typeof(QHideEvent), arg1);
        }
        [SmokeMethod("moveEvent(QGraphicsSceneMoveEvent*)")]
        protected virtual void MoveEvent(QGraphicsSceneMoveEvent arg1) {
            interceptor.Invoke("moveEvent#", "moveEvent(QGraphicsSceneMoveEvent*)", typeof(void), typeof(QGraphicsSceneMoveEvent), arg1);
        }
        [SmokeMethod("polishEvent()")]
        protected virtual void PolishEvent() {
            interceptor.Invoke("polishEvent", "polishEvent()", typeof(void));
        }
        [SmokeMethod("resizeEvent(QGraphicsSceneResizeEvent*)")]
        protected virtual void ResizeEvent(QGraphicsSceneResizeEvent arg1) {
            interceptor.Invoke("resizeEvent#", "resizeEvent(QGraphicsSceneResizeEvent*)", typeof(void), typeof(QGraphicsSceneResizeEvent), arg1);
        }
        [SmokeMethod("showEvent(QShowEvent*)")]
        protected virtual void ShowEvent(QShowEvent arg1) {
            interceptor.Invoke("showEvent#", "showEvent(QShowEvent*)", typeof(void), typeof(QShowEvent), arg1);
        }
        [SmokeMethod("hoverMoveEvent(QGraphicsSceneHoverEvent*)")]
        protected virtual void HoverMoveEvent(QGraphicsSceneHoverEvent arg1) {
            interceptor.Invoke("hoverMoveEvent#", "hoverMoveEvent(QGraphicsSceneHoverEvent*)", typeof(void), typeof(QGraphicsSceneHoverEvent), arg1);
        }
        [SmokeMethod("hoverLeaveEvent(QGraphicsSceneHoverEvent*)")]
        protected virtual void HoverLeaveEvent(QGraphicsSceneHoverEvent arg1) {
            interceptor.Invoke("hoverLeaveEvent#", "hoverLeaveEvent(QGraphicsSceneHoverEvent*)", typeof(void), typeof(QGraphicsSceneHoverEvent), arg1);
        }
        [SmokeMethod("grabMouseEvent(QEvent*)")]
        protected virtual void GrabMouseEvent(QEvent arg1) {
            interceptor.Invoke("grabMouseEvent#", "grabMouseEvent(QEvent*)", typeof(void), typeof(QEvent), arg1);
        }
        [SmokeMethod("ungrabMouseEvent(QEvent*)")]
        protected virtual void UngrabMouseEvent(QEvent arg1) {
            interceptor.Invoke("ungrabMouseEvent#", "ungrabMouseEvent(QEvent*)", typeof(void), typeof(QEvent), arg1);
        }
        [SmokeMethod("grabKeyboardEvent(QEvent*)")]
        protected virtual void GrabKeyboardEvent(QEvent arg1) {
            interceptor.Invoke("grabKeyboardEvent#", "grabKeyboardEvent(QEvent*)", typeof(void), typeof(QEvent), arg1);
        }
        [SmokeMethod("ungrabKeyboardEvent(QEvent*)")]
        protected virtual void UngrabKeyboardEvent(QEvent arg1) {
            interceptor.Invoke("ungrabKeyboardEvent#", "ungrabKeyboardEvent(QEvent*)", typeof(void), typeof(QEvent), arg1);
        }
        ~QGraphicsWidget() {
            interceptor.Invoke("~QGraphicsWidget", "~QGraphicsWidget()", typeof(void));
        }
        public new void Dispose() {
            interceptor.Invoke("~QGraphicsWidget", "~QGraphicsWidget()", typeof(void));
        }
        public void SetSizePolicy(QSizePolicy policy) {
            interceptor.Invoke("setSizePolicy#", "setSizePolicy(const QSizePolicy&)", typeof(void), typeof(QSizePolicy), policy);
        }
        public void SetSizePolicy(QSizePolicy.Policy hPolicy, QSizePolicy.Policy vPolicy, QSizePolicy.ControlType controlType) {
            interceptor.Invoke("setSizePolicy$$$", "setSizePolicy(QSizePolicy::Policy, QSizePolicy::Policy, QSizePolicy::ControlType)", typeof(void), typeof(QSizePolicy.Policy), hPolicy, typeof(QSizePolicy.Policy), vPolicy, typeof(QSizePolicy.ControlType), controlType);
        }
        public void SetSizePolicy(QSizePolicy.Policy hPolicy, QSizePolicy.Policy vPolicy) {
            interceptor.Invoke("setSizePolicy$$", "setSizePolicy(QSizePolicy::Policy, QSizePolicy::Policy)", typeof(void), typeof(QSizePolicy.Policy), hPolicy, typeof(QSizePolicy.Policy), vPolicy);
        }
        public QSizePolicy SizePolicy() {
            return (QSizePolicy) interceptor.Invoke("sizePolicy", "sizePolicy() const", typeof(QSizePolicy));
        }
        public void SetMinimumSize(QSizeF size) {
            interceptor.Invoke("setMinimumSize#", "setMinimumSize(const QSizeF&)", typeof(void), typeof(QSizeF), size);
        }
        public void SetMinimumSize(double w, double h) {
            interceptor.Invoke("setMinimumSize$$", "setMinimumSize(qreal, qreal)", typeof(void), typeof(double), w, typeof(double), h);
        }
        public QSizeF MinimumSize() {
            return (QSizeF) interceptor.Invoke("minimumSize", "minimumSize() const", typeof(QSizeF));
        }
        public void SetMinimumWidth(double width) {
            interceptor.Invoke("setMinimumWidth$", "setMinimumWidth(qreal)", typeof(void), typeof(double), width);
        }
        public double MinimumWidth() {
            return (double) interceptor.Invoke("minimumWidth", "minimumWidth() const", typeof(double));
        }
        public void SetMinimumHeight(double height) {
            interceptor.Invoke("setMinimumHeight$", "setMinimumHeight(qreal)", typeof(void), typeof(double), height);
        }
        public double MinimumHeight() {
            return (double) interceptor.Invoke("minimumHeight", "minimumHeight() const", typeof(double));
        }
        public void SetPreferredSize(QSizeF size) {
            interceptor.Invoke("setPreferredSize#", "setPreferredSize(const QSizeF&)", typeof(void), typeof(QSizeF), size);
        }
        public void SetPreferredSize(double w, double h) {
            interceptor.Invoke("setPreferredSize$$", "setPreferredSize(qreal, qreal)", typeof(void), typeof(double), w, typeof(double), h);
        }
        public QSizeF PreferredSize() {
            return (QSizeF) interceptor.Invoke("preferredSize", "preferredSize() const", typeof(QSizeF));
        }
        public void SetPreferredWidth(double width) {
            interceptor.Invoke("setPreferredWidth$", "setPreferredWidth(qreal)", typeof(void), typeof(double), width);
        }
        public double PreferredWidth() {
            return (double) interceptor.Invoke("preferredWidth", "preferredWidth() const", typeof(double));
        }
        public void SetPreferredHeight(double height) {
            interceptor.Invoke("setPreferredHeight$", "setPreferredHeight(qreal)", typeof(void), typeof(double), height);
        }
        public double PreferredHeight() {
            return (double) interceptor.Invoke("preferredHeight", "preferredHeight() const", typeof(double));
        }
        public void SetMaximumSize(QSizeF size) {
            interceptor.Invoke("setMaximumSize#", "setMaximumSize(const QSizeF&)", typeof(void), typeof(QSizeF), size);
        }
        public void SetMaximumSize(double w, double h) {
            interceptor.Invoke("setMaximumSize$$", "setMaximumSize(qreal, qreal)", typeof(void), typeof(double), w, typeof(double), h);
        }
        public QSizeF MaximumSize() {
            return (QSizeF) interceptor.Invoke("maximumSize", "maximumSize() const", typeof(QSizeF));
        }
        public void SetMaximumWidth(double width) {
            interceptor.Invoke("setMaximumWidth$", "setMaximumWidth(qreal)", typeof(void), typeof(double), width);
        }
        public double MaximumWidth() {
            return (double) interceptor.Invoke("maximumWidth", "maximumWidth() const", typeof(double));
        }
        public void SetMaximumHeight(double height) {
            interceptor.Invoke("setMaximumHeight$", "setMaximumHeight(qreal)", typeof(void), typeof(double), height);
        }
        public double MaximumHeight() {
            return (double) interceptor.Invoke("maximumHeight", "maximumHeight() const", typeof(double));
        }
        public QRectF Geometry() {
            return (QRectF) interceptor.Invoke("geometry", "geometry() const", typeof(QRectF));
        }
        public QRectF ContentsRect() {
            return (QRectF) interceptor.Invoke("contentsRect", "contentsRect() const", typeof(QRectF));
        }
        public QSizeF EffectiveSizeHint(Qt.SizeHint which, QSizeF constraint) {
            return (QSizeF) interceptor.Invoke("effectiveSizeHint$#", "effectiveSizeHint(Qt::SizeHint, const QSizeF&) const", typeof(QSizeF), typeof(Qt.SizeHint), which, typeof(QSizeF), constraint);
        }
        public QSizeF EffectiveSizeHint(Qt.SizeHint which) {
            return (QSizeF) interceptor.Invoke("effectiveSizeHint$", "effectiveSizeHint(Qt::SizeHint) const", typeof(QSizeF), typeof(Qt.SizeHint), which);
        }
        public IQGraphicsLayoutItem ParentLayoutItem() {
            return (IQGraphicsLayoutItem) interceptor.Invoke("parentLayoutItem", "parentLayoutItem() const", typeof(IQGraphicsLayoutItem));
        }
        public void SetParentLayoutItem(IQGraphicsLayoutItem parent) {
            interceptor.Invoke("setParentLayoutItem#", "setParentLayoutItem(QGraphicsLayoutItem*)", typeof(void), typeof(IQGraphicsLayoutItem), parent);
        }
        public bool IsLayout() {
            return (bool) interceptor.Invoke("isLayout", "isLayout() const", typeof(bool));
        }
        public IQGraphicsItem GraphicsItem() {
            return (IQGraphicsItem) interceptor.Invoke("graphicsItem", "graphicsItem() const", typeof(IQGraphicsItem));
        }
        public bool OwnedByLayout() {
            return (bool) interceptor.Invoke("ownedByLayout", "ownedByLayout() const", typeof(bool));
        }
        protected void SetGraphicsItem(IQGraphicsItem item) {
            interceptor.Invoke("setGraphicsItem#", "setGraphicsItem(QGraphicsItem*)", typeof(void), typeof(IQGraphicsItem), item);
        }
        protected void SetOwnedByLayout(bool ownedByLayout) {
            interceptor.Invoke("setOwnedByLayout$", "setOwnedByLayout(bool)", typeof(void), typeof(bool), ownedByLayout);
        }
        public QGraphicsScene Scene() {
            return (QGraphicsScene) interceptor.Invoke("scene", "scene() const", typeof(QGraphicsScene));
        }
        public IQGraphicsItem ParentItem() {
            return (IQGraphicsItem) interceptor.Invoke("parentItem", "parentItem() const", typeof(IQGraphicsItem));
        }
        public IQGraphicsItem TopLevelItem() {
            return (IQGraphicsItem) interceptor.Invoke("topLevelItem", "topLevelItem() const", typeof(IQGraphicsItem));
        }
        public QGraphicsObject ParentObject() {
            return (QGraphicsObject) interceptor.Invoke("parentObject", "parentObject() const", typeof(QGraphicsObject));
        }
        public QGraphicsWidget ParentWidget() {
            return (QGraphicsWidget) interceptor.Invoke("parentWidget", "parentWidget() const", typeof(QGraphicsWidget));
        }
        public QGraphicsWidget TopLevelWidget() {
            return (QGraphicsWidget) interceptor.Invoke("topLevelWidget", "topLevelWidget() const", typeof(QGraphicsWidget));
        }
        public QGraphicsWidget Window() {
            return (QGraphicsWidget) interceptor.Invoke("window", "window() const", typeof(QGraphicsWidget));
        }
        public IQGraphicsItem Panel() {
            return (IQGraphicsItem) interceptor.Invoke("panel", "panel() const", typeof(IQGraphicsItem));
        }
        public void SetParentItem(IQGraphicsItem parent) {
            interceptor.Invoke("setParentItem#", "setParentItem(QGraphicsItem*)", typeof(void), typeof(IQGraphicsItem), parent);
        }
        public List<IQGraphicsItem> Children() {
            return (List<IQGraphicsItem>) interceptor.Invoke("children", "children() const", typeof(List<IQGraphicsItem>));
        }
        public List<IQGraphicsItem> ChildItems() {
            return (List<IQGraphicsItem>) interceptor.Invoke("childItems", "childItems() const", typeof(List<IQGraphicsItem>));
        }
        public bool IsWidget() {
            return (bool) interceptor.Invoke("isWidget", "isWidget() const", typeof(bool));
        }
        public bool IsWindow() {
            return (bool) interceptor.Invoke("isWindow", "isWindow() const", typeof(bool));
        }
        public bool IsPanel() {
            return (bool) interceptor.Invoke("isPanel", "isPanel() const", typeof(bool));
        }
        public QGraphicsObject ToGraphicsObject() {
            return (QGraphicsObject) interceptor.Invoke("toGraphicsObject", "toGraphicsObject()", typeof(QGraphicsObject));
        }
        public QGraphicsItemGroup Group() {
            return (QGraphicsItemGroup) interceptor.Invoke("group", "group() const", typeof(QGraphicsItemGroup));
        }
        public void SetGroup(QGraphicsItemGroup group) {
            interceptor.Invoke("setGroup#", "setGroup(QGraphicsItemGroup*)", typeof(void), typeof(QGraphicsItemGroup), group);
        }
        public uint Flags() {
            return (uint) interceptor.Invoke("flags", "flags() const", typeof(uint));
        }
        public void SetFlag(QGraphicsItem.GraphicsItemFlag flag, bool enabled) {
            interceptor.Invoke("setFlag$$", "setFlag(QGraphicsItem::GraphicsItemFlag, bool)", typeof(void), typeof(QGraphicsItem.GraphicsItemFlag), flag, typeof(bool), enabled);
        }
        public void SetFlag(QGraphicsItem.GraphicsItemFlag flag) {
            interceptor.Invoke("setFlag$", "setFlag(QGraphicsItem::GraphicsItemFlag)", typeof(void), typeof(QGraphicsItem.GraphicsItemFlag), flag);
        }
        public void SetFlags(uint flags) {
            interceptor.Invoke("setFlags$", "setFlags(QGraphicsItem::GraphicsItemFlags)", typeof(void), typeof(uint), flags);
        }
        public QGraphicsItem.CacheMode cacheMode() {
            return (QGraphicsItem.CacheMode) interceptor.Invoke("cacheMode", "cacheMode() const", typeof(QGraphicsItem.CacheMode));
        }
        public void SetCacheMode(QGraphicsItem.CacheMode mode, QSize cacheSize) {
            interceptor.Invoke("setCacheMode$#", "setCacheMode(QGraphicsItem::CacheMode, const QSize&)", typeof(void), typeof(QGraphicsItem.CacheMode), mode, typeof(QSize), cacheSize);
        }
        public void SetCacheMode(QGraphicsItem.CacheMode mode) {
            interceptor.Invoke("setCacheMode$", "setCacheMode(QGraphicsItem::CacheMode)", typeof(void), typeof(QGraphicsItem.CacheMode), mode);
        }
        public QGraphicsItem.PanelModality panelModality() {
            return (QGraphicsItem.PanelModality) interceptor.Invoke("panelModality", "panelModality() const", typeof(QGraphicsItem.PanelModality));
        }
        public void SetPanelModality(QGraphicsItem.PanelModality panelModality) {
            interceptor.Invoke("setPanelModality$", "setPanelModality(QGraphicsItem::PanelModality)", typeof(void), typeof(QGraphicsItem.PanelModality), panelModality);
        }
        public string ToolTip() {
            return (string) interceptor.Invoke("toolTip", "toolTip() const", typeof(string));
        }
        public void SetToolTip(string toolTip) {
            interceptor.Invoke("setToolTip$", "setToolTip(const QString&)", typeof(void), typeof(string), toolTip);
        }
        public QCursor Cursor() {
            return (QCursor) interceptor.Invoke("cursor", "cursor() const", typeof(QCursor));
        }
        public void SetCursor(QCursor cursor) {
            interceptor.Invoke("setCursor#", "setCursor(const QCursor&)", typeof(void), typeof(QCursor), cursor);
        }
        public bool HasCursor() {
            return (bool) interceptor.Invoke("hasCursor", "hasCursor() const", typeof(bool));
        }
        public void UnsetCursor() {
            interceptor.Invoke("unsetCursor", "unsetCursor()", typeof(void));
        }
        public bool IsVisible() {
            return (bool) interceptor.Invoke("isVisible", "isVisible() const", typeof(bool));
        }
        public bool IsVisibleTo(IQGraphicsItem parent) {
            return (bool) interceptor.Invoke("isVisibleTo#", "isVisibleTo(const QGraphicsItem*) const", typeof(bool), typeof(IQGraphicsItem), parent);
        }
        public void SetVisible(bool visible) {
            interceptor.Invoke("setVisible$", "setVisible(bool)", typeof(void), typeof(bool), visible);
        }
        public void Hide() {
            interceptor.Invoke("hide", "hide()", typeof(void));
        }
        public void Show() {
            interceptor.Invoke("show", "show()", typeof(void));
        }
        public bool IsEnabled() {
            return (bool) interceptor.Invoke("isEnabled", "isEnabled() const", typeof(bool));
        }
        public void SetEnabled(bool enabled) {
            interceptor.Invoke("setEnabled$", "setEnabled(bool)", typeof(void), typeof(bool), enabled);
        }
        public bool IsSelected() {
            return (bool) interceptor.Invoke("isSelected", "isSelected() const", typeof(bool));
        }
        public void SetSelected(bool selected) {
            interceptor.Invoke("setSelected$", "setSelected(bool)", typeof(void), typeof(bool), selected);
        }
        public bool AcceptDrops() {
            return (bool) interceptor.Invoke("acceptDrops", "acceptDrops() const", typeof(bool));
        }
        public void SetAcceptDrops(bool on) {
            interceptor.Invoke("setAcceptDrops$", "setAcceptDrops(bool)", typeof(void), typeof(bool), on);
        }
        public double Opacity() {
            return (double) interceptor.Invoke("opacity", "opacity() const", typeof(double));
        }
        public double EffectiveOpacity() {
            return (double) interceptor.Invoke("effectiveOpacity", "effectiveOpacity() const", typeof(double));
        }
        public void SetOpacity(double opacity) {
            interceptor.Invoke("setOpacity$", "setOpacity(qreal)", typeof(void), typeof(double), opacity);
        }
        public QGraphicsEffect GraphicsEffect() {
            return (QGraphicsEffect) interceptor.Invoke("graphicsEffect", "graphicsEffect() const", typeof(QGraphicsEffect));
        }
        public void SetGraphicsEffect(QGraphicsEffect effect) {
            interceptor.Invoke("setGraphicsEffect#", "setGraphicsEffect(QGraphicsEffect*)", typeof(void), typeof(QGraphicsEffect), effect);
        }
        public uint AcceptedMouseButtons() {
            return (uint) interceptor.Invoke("acceptedMouseButtons", "acceptedMouseButtons() const", typeof(uint));
        }
        public void SetAcceptedMouseButtons(uint buttons) {
            interceptor.Invoke("setAcceptedMouseButtons$", "setAcceptedMouseButtons(Qt::MouseButtons)", typeof(void), typeof(uint), buttons);
        }
        public bool AcceptsHoverEvents() {
            return (bool) interceptor.Invoke("acceptsHoverEvents", "acceptsHoverEvents() const", typeof(bool));
        }
        public void SetAcceptsHoverEvents(bool enabled) {
            interceptor.Invoke("setAcceptsHoverEvents$", "setAcceptsHoverEvents(bool)", typeof(void), typeof(bool), enabled);
        }
        public bool AcceptHoverEvents() {
            return (bool) interceptor.Invoke("acceptHoverEvents", "acceptHoverEvents() const", typeof(bool));
        }
        public void SetAcceptHoverEvents(bool enabled) {
            interceptor.Invoke("setAcceptHoverEvents$", "setAcceptHoverEvents(bool)", typeof(void), typeof(bool), enabled);
        }
        public bool AcceptTouchEvents() {
            return (bool) interceptor.Invoke("acceptTouchEvents", "acceptTouchEvents() const", typeof(bool));
        }
        public void SetAcceptTouchEvents(bool enabled) {
            interceptor.Invoke("setAcceptTouchEvents$", "setAcceptTouchEvents(bool)", typeof(void), typeof(bool), enabled);
        }
        public bool FiltersChildEvents() {
            return (bool) interceptor.Invoke("filtersChildEvents", "filtersChildEvents() const", typeof(bool));
        }
        public void SetFiltersChildEvents(bool enabled) {
            interceptor.Invoke("setFiltersChildEvents$", "setFiltersChildEvents(bool)", typeof(void), typeof(bool), enabled);
        }
        public bool HandlesChildEvents() {
            return (bool) interceptor.Invoke("handlesChildEvents", "handlesChildEvents() const", typeof(bool));
        }
        public void SetHandlesChildEvents(bool enabled) {
            interceptor.Invoke("setHandlesChildEvents$", "setHandlesChildEvents(bool)", typeof(void), typeof(bool), enabled);
        }
        public bool IsActive() {
            return (bool) interceptor.Invoke("isActive", "isActive() const", typeof(bool));
        }
        public void SetActive(bool active) {
            interceptor.Invoke("setActive$", "setActive(bool)", typeof(void), typeof(bool), active);
        }
        public bool HasFocus() {
            return (bool) interceptor.Invoke("hasFocus", "hasFocus() const", typeof(bool));
        }
        public void SetFocus(Qt.FocusReason focusReason) {
            interceptor.Invoke("setFocus$", "setFocus(Qt::FocusReason)", typeof(void), typeof(Qt.FocusReason), focusReason);
        }
        public void SetFocus() {
            interceptor.Invoke("setFocus", "setFocus()", typeof(void));
        }
        public void ClearFocus() {
            interceptor.Invoke("clearFocus", "clearFocus()", typeof(void));
        }
        public IQGraphicsItem FocusProxy() {
            return (IQGraphicsItem) interceptor.Invoke("focusProxy", "focusProxy() const", typeof(IQGraphicsItem));
        }
        public void SetFocusProxy(IQGraphicsItem item) {
            interceptor.Invoke("setFocusProxy#", "setFocusProxy(QGraphicsItem*)", typeof(void), typeof(IQGraphicsItem), item);
        }
        public IQGraphicsItem FocusItem() {
            return (IQGraphicsItem) interceptor.Invoke("focusItem", "focusItem() const", typeof(IQGraphicsItem));
        }
        public IQGraphicsItem FocusScopeItem() {
            return (IQGraphicsItem) interceptor.Invoke("focusScopeItem", "focusScopeItem() const", typeof(IQGraphicsItem));
        }
        public void GrabMouse() {
            interceptor.Invoke("grabMouse", "grabMouse()", typeof(void));
        }
        public void UngrabMouse() {
            interceptor.Invoke("ungrabMouse", "ungrabMouse()", typeof(void));
        }
        public void GrabKeyboard() {
            interceptor.Invoke("grabKeyboard", "grabKeyboard()", typeof(void));
        }
        public void UngrabKeyboard() {
            interceptor.Invoke("ungrabKeyboard", "ungrabKeyboard()", typeof(void));
        }
        public QPointF Pos() {
            return (QPointF) interceptor.Invoke("pos", "pos() const", typeof(QPointF));
        }
        public double X() {
            return (double) interceptor.Invoke("x", "x() const", typeof(double));
        }
        public void SetX(double x) {
            interceptor.Invoke("setX$", "setX(qreal)", typeof(void), typeof(double), x);
        }
        public double Y() {
            return (double) interceptor.Invoke("y", "y() const", typeof(double));
        }
        public void SetY(double y) {
            interceptor.Invoke("setY$", "setY(qreal)", typeof(void), typeof(double), y);
        }
        public QPointF ScenePos() {
            return (QPointF) interceptor.Invoke("scenePos", "scenePos() const", typeof(QPointF));
        }
        public void SetPos(QPointF pos) {
            interceptor.Invoke("setPos#", "setPos(const QPointF&)", typeof(void), typeof(QPointF), pos);
        }
        public void SetPos(double x, double y) {
            interceptor.Invoke("setPos$$", "setPos(qreal, qreal)", typeof(void), typeof(double), x, typeof(double), y);
        }
        public void MoveBy(double dx, double dy) {
            interceptor.Invoke("moveBy$$", "moveBy(qreal, qreal)", typeof(void), typeof(double), dx, typeof(double), dy);
        }
        public void EnsureVisible(QRectF rect, int xmargin, int ymargin) {
            interceptor.Invoke("ensureVisible#$$", "ensureVisible(const QRectF&, int, int)", typeof(void), typeof(QRectF), rect, typeof(int), xmargin, typeof(int), ymargin);
        }
        public void EnsureVisible(QRectF rect, int xmargin) {
            interceptor.Invoke("ensureVisible#$", "ensureVisible(const QRectF&, int)", typeof(void), typeof(QRectF), rect, typeof(int), xmargin);
        }
        public void EnsureVisible(QRectF rect) {
            interceptor.Invoke("ensureVisible#", "ensureVisible(const QRectF&)", typeof(void), typeof(QRectF), rect);
        }
        public void EnsureVisible() {
            interceptor.Invoke("ensureVisible", "ensureVisible()", typeof(void));
        }
        public void EnsureVisible(double x, double y, double w, double h, int xmargin, int ymargin) {
            interceptor.Invoke("ensureVisible$$$$$$", "ensureVisible(qreal, qreal, qreal, qreal, int, int)", typeof(void), typeof(double), x, typeof(double), y, typeof(double), w, typeof(double), h, typeof(int), xmargin, typeof(int), ymargin);
        }
        public void EnsureVisible(double x, double y, double w, double h, int xmargin) {
            interceptor.Invoke("ensureVisible$$$$$", "ensureVisible(qreal, qreal, qreal, qreal, int)", typeof(void), typeof(double), x, typeof(double), y, typeof(double), w, typeof(double), h, typeof(int), xmargin);
        }
        public void EnsureVisible(double x, double y, double w, double h) {
            interceptor.Invoke("ensureVisible$$$$", "ensureVisible(qreal, qreal, qreal, qreal)", typeof(void), typeof(double), x, typeof(double), y, typeof(double), w, typeof(double), h);
        }
        public QMatrix Matrix() {
            return (QMatrix) interceptor.Invoke("matrix", "matrix() const", typeof(QMatrix));
        }
        public QMatrix SceneMatrix() {
            return (QMatrix) interceptor.Invoke("sceneMatrix", "sceneMatrix() const", typeof(QMatrix));
        }
        public void SetMatrix(QMatrix matrix, bool combine) {
            interceptor.Invoke("setMatrix#$", "setMatrix(const QMatrix&, bool)", typeof(void), typeof(QMatrix), matrix, typeof(bool), combine);
        }
        public void SetMatrix(QMatrix matrix) {
            interceptor.Invoke("setMatrix#", "setMatrix(const QMatrix&)", typeof(void), typeof(QMatrix), matrix);
        }
        public void ResetMatrix() {
            interceptor.Invoke("resetMatrix", "resetMatrix()", typeof(void));
        }
        public QTransform Transform() {
            return (QTransform) interceptor.Invoke("transform", "transform() const", typeof(QTransform));
        }
        public QTransform SceneTransform() {
            return (QTransform) interceptor.Invoke("sceneTransform", "sceneTransform() const", typeof(QTransform));
        }
        public QTransform DeviceTransform(QTransform viewportTransform) {
            return (QTransform) interceptor.Invoke("deviceTransform#", "deviceTransform(const QTransform&) const", typeof(QTransform), typeof(QTransform), viewportTransform);
        }
        public QTransform ItemTransform(IQGraphicsItem other, ref bool ok) {
            StackItem[] stack = new StackItem[3];
#if DEBUG
            stack[1].s_class = (IntPtr) DebugGCHandle.Alloc(other);
#else
            stack[1].s_class = (IntPtr) GCHandle.Alloc(other);
#endif
            stack[2].s_bool = ok;
            interceptor.Invoke("itemTransform#$", "itemTransform(const QGraphicsItem*, bool*) const", stack);
#if DEBUG
            DebugGCHandle.Free((GCHandle) stack[1].s_class);
#else
            ((GCHandle) stack[1].s_class).Free();
#endif
            ok = stack[2].s_bool;
            object returnValue = ((GCHandle) stack[0].s_class).Target;
#if DEBUG
            DebugGCHandle.Free((GCHandle) stack[0].s_class);
#else
            ((GCHandle) stack[0].s_class).Free();
#endif
            return (QTransform) returnValue;
        }
        public QTransform ItemTransform(IQGraphicsItem other) {
            return (QTransform) interceptor.Invoke("itemTransform#", "itemTransform(const QGraphicsItem*) const", typeof(QTransform), typeof(IQGraphicsItem), other);
        }
        public void SetTransform(QTransform matrix, bool combine) {
            interceptor.Invoke("setTransform#$", "setTransform(const QTransform&, bool)", typeof(void), typeof(QTransform), matrix, typeof(bool), combine);
        }
        public void SetTransform(QTransform matrix) {
            interceptor.Invoke("setTransform#", "setTransform(const QTransform&)", typeof(void), typeof(QTransform), matrix);
        }
        public void ResetTransform() {
            interceptor.Invoke("resetTransform", "resetTransform()", typeof(void));
        }
        public void Rotate(double angle) {
            interceptor.Invoke("rotate$", "rotate(qreal)", typeof(void), typeof(double), angle);
        }
        public void Scale(double sx, double sy) {
            interceptor.Invoke("scale$$", "scale(qreal, qreal)", typeof(void), typeof(double), sx, typeof(double), sy);
        }
        public void Shear(double sh, double sv) {
            interceptor.Invoke("shear$$", "shear(qreal, qreal)", typeof(void), typeof(double), sh, typeof(double), sv);
        }
        public void Translate(double dx, double dy) {
            interceptor.Invoke("translate$$", "translate(qreal, qreal)", typeof(void), typeof(double), dx, typeof(double), dy);
        }
        public void SetRotation(double angle) {
            interceptor.Invoke("setRotation$", "setRotation(qreal)", typeof(void), typeof(double), angle);
        }
        public double Rotation() {
            return (double) interceptor.Invoke("rotation", "rotation() const", typeof(double));
        }
        public void SetScale(double scale) {
            interceptor.Invoke("setScale$", "setScale(qreal)", typeof(void), typeof(double), scale);
        }
        public double Scale() {
            return (double) interceptor.Invoke("scale", "scale() const", typeof(double));
        }
        public List<QGraphicsTransform> Transformations() {
            return (List<QGraphicsTransform>) interceptor.Invoke("transformations", "transformations() const", typeof(List<QGraphicsTransform>));
        }
        public void SetTransformations(List<QGraphicsTransform> transformations) {
            interceptor.Invoke("setTransformations?", "setTransformations(const QList<QGraphicsTransform*>&)", typeof(void), typeof(List<QGraphicsTransform>), transformations);
        }
        public QPointF TransformOriginPoint() {
            return (QPointF) interceptor.Invoke("transformOriginPoint", "transformOriginPoint() const", typeof(QPointF));
        }
        public void SetTransformOriginPoint(QPointF origin) {
            interceptor.Invoke("setTransformOriginPoint#", "setTransformOriginPoint(const QPointF&)", typeof(void), typeof(QPointF), origin);
        }
        public void SetTransformOriginPoint(double ax, double ay) {
            interceptor.Invoke("setTransformOriginPoint$$", "setTransformOriginPoint(qreal, qreal)", typeof(void), typeof(double), ax, typeof(double), ay);
        }
        [SmokeMethod("advance(int)")]
        public virtual void Advance(int phase) {
            interceptor.Invoke("advance$", "advance(int)", typeof(void), typeof(int), phase);
        }
        public double ZValue() {
            return (double) interceptor.Invoke("zValue", "zValue() const", typeof(double));
        }
        public void SetZValue(double z) {
            interceptor.Invoke("setZValue$", "setZValue(qreal)", typeof(void), typeof(double), z);
        }
        public void StackBefore(IQGraphicsItem sibling) {
            interceptor.Invoke("stackBefore#", "stackBefore(const QGraphicsItem*)", typeof(void), typeof(IQGraphicsItem), sibling);
        }
        public QRectF ChildrenBoundingRect() {
            return (QRectF) interceptor.Invoke("childrenBoundingRect", "childrenBoundingRect() const", typeof(QRectF));
        }
        public QRectF SceneBoundingRect() {
            return (QRectF) interceptor.Invoke("sceneBoundingRect", "sceneBoundingRect() const", typeof(QRectF));
        }
        public bool IsClipped() {
            return (bool) interceptor.Invoke("isClipped", "isClipped() const", typeof(bool));
        }
        public QPainterPath ClipPath() {
            return (QPainterPath) interceptor.Invoke("clipPath", "clipPath() const", typeof(QPainterPath));
        }
        [SmokeMethod("contains(const QPointF&) const")]
        public virtual bool Contains(QPointF point) {
            return (bool) interceptor.Invoke("contains#", "contains(const QPointF&) const", typeof(bool), typeof(QPointF), point);
        }
        [SmokeMethod("collidesWithItem(const QGraphicsItem*, Qt::ItemSelectionMode) const")]
        public virtual bool CollidesWithItem(IQGraphicsItem other, Qt.ItemSelectionMode mode) {
            return (bool) interceptor.Invoke("collidesWithItem#$", "collidesWithItem(const QGraphicsItem*, Qt::ItemSelectionMode) const", typeof(bool), typeof(IQGraphicsItem), other, typeof(Qt.ItemSelectionMode), mode);
        }
        [SmokeMethod("collidesWithItem(const QGraphicsItem*) const")]
        public virtual bool CollidesWithItem(IQGraphicsItem other) {
            return (bool) interceptor.Invoke("collidesWithItem#", "collidesWithItem(const QGraphicsItem*) const", typeof(bool), typeof(IQGraphicsItem), other);
        }
        [SmokeMethod("collidesWithPath(const QPainterPath&, Qt::ItemSelectionMode) const")]
        public virtual bool CollidesWithPath(QPainterPath path, Qt.ItemSelectionMode mode) {
            return (bool) interceptor.Invoke("collidesWithPath#$", "collidesWithPath(const QPainterPath&, Qt::ItemSelectionMode) const", typeof(bool), typeof(QPainterPath), path, typeof(Qt.ItemSelectionMode), mode);
        }
        [SmokeMethod("collidesWithPath(const QPainterPath&) const")]
        public virtual bool CollidesWithPath(QPainterPath path) {
            return (bool) interceptor.Invoke("collidesWithPath#", "collidesWithPath(const QPainterPath&) const", typeof(bool), typeof(QPainterPath), path);
        }
        public List<IQGraphicsItem> CollidingItems(Qt.ItemSelectionMode mode) {
            return (List<IQGraphicsItem>) interceptor.Invoke("collidingItems$", "collidingItems(Qt::ItemSelectionMode) const", typeof(List<IQGraphicsItem>), typeof(Qt.ItemSelectionMode), mode);
        }
        public List<IQGraphicsItem> CollidingItems() {
            return (List<IQGraphicsItem>) interceptor.Invoke("collidingItems", "collidingItems() const", typeof(List<IQGraphicsItem>));
        }
        public bool IsObscured() {
            return (bool) interceptor.Invoke("isObscured", "isObscured() const", typeof(bool));
        }
        public bool IsObscured(QRectF rect) {
            return (bool) interceptor.Invoke("isObscured#", "isObscured(const QRectF&) const", typeof(bool), typeof(QRectF), rect);
        }
        public bool IsObscured(double x, double y, double w, double h) {
            return (bool) interceptor.Invoke("isObscured$$$$", "isObscured(qreal, qreal, qreal, qreal) const", typeof(bool), typeof(double), x, typeof(double), y, typeof(double), w, typeof(double), h);
        }
        [SmokeMethod("isObscuredBy(const QGraphicsItem*) const")]
        public virtual bool IsObscuredBy(IQGraphicsItem item) {
            return (bool) interceptor.Invoke("isObscuredBy#", "isObscuredBy(const QGraphicsItem*) const", typeof(bool), typeof(IQGraphicsItem), item);
        }
        [SmokeMethod("opaqueArea() const")]
        public virtual QPainterPath OpaqueArea() {
            return (QPainterPath) interceptor.Invoke("opaqueArea", "opaqueArea() const", typeof(QPainterPath));
        }
        public QRegion BoundingRegion(QTransform itemToDeviceTransform) {
            return (QRegion) interceptor.Invoke("boundingRegion#", "boundingRegion(const QTransform&) const", typeof(QRegion), typeof(QTransform), itemToDeviceTransform);
        }
        public double BoundingRegionGranularity() {
            return (double) interceptor.Invoke("boundingRegionGranularity", "boundingRegionGranularity() const", typeof(double));
        }
        public void SetBoundingRegionGranularity(double granularity) {
            interceptor.Invoke("setBoundingRegionGranularity$", "setBoundingRegionGranularity(qreal)", typeof(void), typeof(double), granularity);
        }
        public void Update(QRectF rect) {
            interceptor.Invoke("update#", "update(const QRectF&)", typeof(void), typeof(QRectF), rect);
        }
        public void Update() {
            interceptor.Invoke("update", "update()", typeof(void));
        }
        public void Update(double x, double y, double width, double height) {
            interceptor.Invoke("update$$$$", "update(qreal, qreal, qreal, qreal)", typeof(void), typeof(double), x, typeof(double), y, typeof(double), width, typeof(double), height);
        }
        public void Scroll(double dx, double dy, QRectF rect) {
            interceptor.Invoke("scroll$$#", "scroll(qreal, qreal, const QRectF&)", typeof(void), typeof(double), dx, typeof(double), dy, typeof(QRectF), rect);
        }
        public void Scroll(double dx, double dy) {
            interceptor.Invoke("scroll$$", "scroll(qreal, qreal)", typeof(void), typeof(double), dx, typeof(double), dy);
        }
        public QPointF MapToItem(IQGraphicsItem item, QPointF point) {
            return (QPointF) interceptor.Invoke("mapToItem##", "mapToItem(const QGraphicsItem*, const QPointF&) const", typeof(QPointF), typeof(IQGraphicsItem), item, typeof(QPointF), point);
        }
        public QPointF MapToParent(QPointF point) {
            return (QPointF) interceptor.Invoke("mapToParent#", "mapToParent(const QPointF&) const", typeof(QPointF), typeof(QPointF), point);
        }
        public QPointF MapToScene(QPointF point) {
            return (QPointF) interceptor.Invoke("mapToScene#", "mapToScene(const QPointF&) const", typeof(QPointF), typeof(QPointF), point);
        }
        public QPolygonF MapToItem(IQGraphicsItem item, QRectF rect) {
            return (QPolygonF) interceptor.Invoke("mapToItem##", "mapToItem(const QGraphicsItem*, const QRectF&) const", typeof(QPolygonF), typeof(IQGraphicsItem), item, typeof(QRectF), rect);
        }
        public QPolygonF MapToParent(QRectF rect) {
            return (QPolygonF) interceptor.Invoke("mapToParent#", "mapToParent(const QRectF&) const", typeof(QPolygonF), typeof(QRectF), rect);
        }
        public QPolygonF MapToScene(QRectF rect) {
            return (QPolygonF) interceptor.Invoke("mapToScene#", "mapToScene(const QRectF&) const", typeof(QPolygonF), typeof(QRectF), rect);
        }
        public QRectF MapRectToItem(IQGraphicsItem item, QRectF rect) {
            return (QRectF) interceptor.Invoke("mapRectToItem##", "mapRectToItem(const QGraphicsItem*, const QRectF&) const", typeof(QRectF), typeof(IQGraphicsItem), item, typeof(QRectF), rect);
        }
        public QRectF MapRectToParent(QRectF rect) {
            return (QRectF) interceptor.Invoke("mapRectToParent#", "mapRectToParent(const QRectF&) const", typeof(QRectF), typeof(QRectF), rect);
        }
        public QRectF MapRectToScene(QRectF rect) {
            return (QRectF) interceptor.Invoke("mapRectToScene#", "mapRectToScene(const QRectF&) const", typeof(QRectF), typeof(QRectF), rect);
        }
        public QPolygonF MapToItem(IQGraphicsItem item, QPolygonF polygon) {
            return (QPolygonF) interceptor.Invoke("mapToItem##", "mapToItem(const QGraphicsItem*, const QPolygonF&) const", typeof(QPolygonF), typeof(IQGraphicsItem), item, typeof(QPolygonF), polygon);
        }
        public QPolygonF MapToParent(QPolygonF polygon) {
            return (QPolygonF) interceptor.Invoke("mapToParent#", "mapToParent(const QPolygonF&) const", typeof(QPolygonF), typeof(QPolygonF), polygon);
        }
        public QPolygonF MapToScene(QPolygonF polygon) {
            return (QPolygonF) interceptor.Invoke("mapToScene#", "mapToScene(const QPolygonF&) const", typeof(QPolygonF), typeof(QPolygonF), polygon);
        }
        public QPainterPath MapToItem(IQGraphicsItem item, QPainterPath path) {
            return (QPainterPath) interceptor.Invoke("mapToItem##", "mapToItem(const QGraphicsItem*, const QPainterPath&) const", typeof(QPainterPath), typeof(IQGraphicsItem), item, typeof(QPainterPath), path);
        }
        public QPainterPath MapToParent(QPainterPath path) {
            return (QPainterPath) interceptor.Invoke("mapToParent#", "mapToParent(const QPainterPath&) const", typeof(QPainterPath), typeof(QPainterPath), path);
        }
        public QPainterPath MapToScene(QPainterPath path) {
            return (QPainterPath) interceptor.Invoke("mapToScene#", "mapToScene(const QPainterPath&) const", typeof(QPainterPath), typeof(QPainterPath), path);
        }
        public QPointF MapFromItem(IQGraphicsItem item, QPointF point) {
            return (QPointF) interceptor.Invoke("mapFromItem##", "mapFromItem(const QGraphicsItem*, const QPointF&) const", typeof(QPointF), typeof(IQGraphicsItem), item, typeof(QPointF), point);
        }
        public QPointF MapFromParent(QPointF point) {
            return (QPointF) interceptor.Invoke("mapFromParent#", "mapFromParent(const QPointF&) const", typeof(QPointF), typeof(QPointF), point);
        }
        public QPointF MapFromScene(QPointF point) {
            return (QPointF) interceptor.Invoke("mapFromScene#", "mapFromScene(const QPointF&) const", typeof(QPointF), typeof(QPointF), point);
        }
        public QPolygonF MapFromItem(IQGraphicsItem item, QRectF rect) {
            return (QPolygonF) interceptor.Invoke("mapFromItem##", "mapFromItem(const QGraphicsItem*, const QRectF&) const", typeof(QPolygonF), typeof(IQGraphicsItem), item, typeof(QRectF), rect);
        }
        public QPolygonF MapFromParent(QRectF rect) {
            return (QPolygonF) interceptor.Invoke("mapFromParent#", "mapFromParent(const QRectF&) const", typeof(QPolygonF), typeof(QRectF), rect);
        }
        public QPolygonF MapFromScene(QRectF rect) {
            return (QPolygonF) interceptor.Invoke("mapFromScene#", "mapFromScene(const QRectF&) const", typeof(QPolygonF), typeof(QRectF), rect);
        }
        public QRectF MapRectFromItem(IQGraphicsItem item, QRectF rect) {
            return (QRectF) interceptor.Invoke("mapRectFromItem##", "mapRectFromItem(const QGraphicsItem*, const QRectF&) const", typeof(QRectF), typeof(IQGraphicsItem), item, typeof(QRectF), rect);
        }
        public QRectF MapRectFromParent(QRectF rect) {
            return (QRectF) interceptor.Invoke("mapRectFromParent#", "mapRectFromParent(const QRectF&) const", typeof(QRectF), typeof(QRectF), rect);
        }
        public QRectF MapRectFromScene(QRectF rect) {
            return (QRectF) interceptor.Invoke("mapRectFromScene#", "mapRectFromScene(const QRectF&) const", typeof(QRectF), typeof(QRectF), rect);
        }
        public QPolygonF MapFromItem(IQGraphicsItem item, QPolygonF polygon) {
            return (QPolygonF) interceptor.Invoke("mapFromItem##", "mapFromItem(const QGraphicsItem*, const QPolygonF&) const", typeof(QPolygonF), typeof(IQGraphicsItem), item, typeof(QPolygonF), polygon);
        }
        public QPolygonF MapFromParent(QPolygonF polygon) {
            return (QPolygonF) interceptor.Invoke("mapFromParent#", "mapFromParent(const QPolygonF&) const", typeof(QPolygonF), typeof(QPolygonF), polygon);
        }
        public QPolygonF MapFromScene(QPolygonF polygon) {
            return (QPolygonF) interceptor.Invoke("mapFromScene#", "mapFromScene(const QPolygonF&) const", typeof(QPolygonF), typeof(QPolygonF), polygon);
        }
        public QPainterPath MapFromItem(IQGraphicsItem item, QPainterPath path) {
            return (QPainterPath) interceptor.Invoke("mapFromItem##", "mapFromItem(const QGraphicsItem*, const QPainterPath&) const", typeof(QPainterPath), typeof(IQGraphicsItem), item, typeof(QPainterPath), path);
        }
        public QPainterPath MapFromParent(QPainterPath path) {
            return (QPainterPath) interceptor.Invoke("mapFromParent#", "mapFromParent(const QPainterPath&) const", typeof(QPainterPath), typeof(QPainterPath), path);
        }
        public QPainterPath MapFromScene(QPainterPath path) {
            return (QPainterPath) interceptor.Invoke("mapFromScene#", "mapFromScene(const QPainterPath&) const", typeof(QPainterPath), typeof(QPainterPath), path);
        }
        public QPointF MapToItem(IQGraphicsItem item, double x, double y) {
            return (QPointF) interceptor.Invoke("mapToItem#$$", "mapToItem(const QGraphicsItem*, qreal, qreal) const", typeof(QPointF), typeof(IQGraphicsItem), item, typeof(double), x, typeof(double), y);
        }
        public QPointF MapToParent(double x, double y) {
            return (QPointF) interceptor.Invoke("mapToParent$$", "mapToParent(qreal, qreal) const", typeof(QPointF), typeof(double), x, typeof(double), y);
        }
        public QPointF MapToScene(double x, double y) {
            return (QPointF) interceptor.Invoke("mapToScene$$", "mapToScene(qreal, qreal) const", typeof(QPointF), typeof(double), x, typeof(double), y);
        }
        public QPolygonF MapToItem(IQGraphicsItem item, double x, double y, double w, double h) {
            return (QPolygonF) interceptor.Invoke("mapToItem#$$$$", "mapToItem(const QGraphicsItem*, qreal, qreal, qreal, qreal) const", typeof(QPolygonF), typeof(IQGraphicsItem), item, typeof(double), x, typeof(double), y, typeof(double), w, typeof(double), h);
        }
        public QPolygonF MapToParent(double x, double y, double w, double h) {
            return (QPolygonF) interceptor.Invoke("mapToParent$$$$", "mapToParent(qreal, qreal, qreal, qreal) const", typeof(QPolygonF), typeof(double), x, typeof(double), y, typeof(double), w, typeof(double), h);
        }
        public QPolygonF MapToScene(double x, double y, double w, double h) {
            return (QPolygonF) interceptor.Invoke("mapToScene$$$$", "mapToScene(qreal, qreal, qreal, qreal) const", typeof(QPolygonF), typeof(double), x, typeof(double), y, typeof(double), w, typeof(double), h);
        }
        public QRectF MapRectToItem(IQGraphicsItem item, double x, double y, double w, double h) {
            return (QRectF) interceptor.Invoke("mapRectToItem#$$$$", "mapRectToItem(const QGraphicsItem*, qreal, qreal, qreal, qreal) const", typeof(QRectF), typeof(IQGraphicsItem), item, typeof(double), x, typeof(double), y, typeof(double), w, typeof(double), h);
        }
        public QRectF MapRectToParent(double x, double y, double w, double h) {
            return (QRectF) interceptor.Invoke("mapRectToParent$$$$", "mapRectToParent(qreal, qreal, qreal, qreal) const", typeof(QRectF), typeof(double), x, typeof(double), y, typeof(double), w, typeof(double), h);
        }
        public QRectF MapRectToScene(double x, double y, double w, double h) {
            return (QRectF) interceptor.Invoke("mapRectToScene$$$$", "mapRectToScene(qreal, qreal, qreal, qreal) const", typeof(QRectF), typeof(double), x, typeof(double), y, typeof(double), w, typeof(double), h);
        }
        public QPointF MapFromItem(IQGraphicsItem item, double x, double y) {
            return (QPointF) interceptor.Invoke("mapFromItem#$$", "mapFromItem(const QGraphicsItem*, qreal, qreal) const", typeof(QPointF), typeof(IQGraphicsItem), item, typeof(double), x, typeof(double), y);
        }
        public QPointF MapFromParent(double x, double y) {
            return (QPointF) interceptor.Invoke("mapFromParent$$", "mapFromParent(qreal, qreal) const", typeof(QPointF), typeof(double), x, typeof(double), y);
        }
        public QPointF MapFromScene(double x, double y) {
            return (QPointF) interceptor.Invoke("mapFromScene$$", "mapFromScene(qreal, qreal) const", typeof(QPointF), typeof(double), x, typeof(double), y);
        }
        public QPolygonF MapFromItem(IQGraphicsItem item, double x, double y, double w, double h) {
            return (QPolygonF) interceptor.Invoke("mapFromItem#$$$$", "mapFromItem(const QGraphicsItem*, qreal, qreal, qreal, qreal) const", typeof(QPolygonF), typeof(IQGraphicsItem), item, typeof(double), x, typeof(double), y, typeof(double), w, typeof(double), h);
        }
        public QPolygonF MapFromParent(double x, double y, double w, double h) {
            return (QPolygonF) interceptor.Invoke("mapFromParent$$$$", "mapFromParent(qreal, qreal, qreal, qreal) const", typeof(QPolygonF), typeof(double), x, typeof(double), y, typeof(double), w, typeof(double), h);
        }
        public QPolygonF MapFromScene(double x, double y, double w, double h) {
            return (QPolygonF) interceptor.Invoke("mapFromScene$$$$", "mapFromScene(qreal, qreal, qreal, qreal) const", typeof(QPolygonF), typeof(double), x, typeof(double), y, typeof(double), w, typeof(double), h);
        }
        public QRectF MapRectFromItem(IQGraphicsItem item, double x, double y, double w, double h) {
            return (QRectF) interceptor.Invoke("mapRectFromItem#$$$$", "mapRectFromItem(const QGraphicsItem*, qreal, qreal, qreal, qreal) const", typeof(QRectF), typeof(IQGraphicsItem), item, typeof(double), x, typeof(double), y, typeof(double), w, typeof(double), h);
        }
        public QRectF MapRectFromParent(double x, double y, double w, double h) {
            return (QRectF) interceptor.Invoke("mapRectFromParent$$$$", "mapRectFromParent(qreal, qreal, qreal, qreal) const", typeof(QRectF), typeof(double), x, typeof(double), y, typeof(double), w, typeof(double), h);
        }
        public QRectF MapRectFromScene(double x, double y, double w, double h) {
            return (QRectF) interceptor.Invoke("mapRectFromScene$$$$", "mapRectFromScene(qreal, qreal, qreal, qreal) const", typeof(QRectF), typeof(double), x, typeof(double), y, typeof(double), w, typeof(double), h);
        }
        public bool IsAncestorOf(IQGraphicsItem child) {
            return (bool) interceptor.Invoke("isAncestorOf#", "isAncestorOf(const QGraphicsItem*) const", typeof(bool), typeof(IQGraphicsItem), child);
        }
        public IQGraphicsItem CommonAncestorItem(IQGraphicsItem other) {
            return (IQGraphicsItem) interceptor.Invoke("commonAncestorItem#", "commonAncestorItem(const QGraphicsItem*) const", typeof(IQGraphicsItem), typeof(IQGraphicsItem), other);
        }
        public bool IsUnderMouse() {
            return (bool) interceptor.Invoke("isUnderMouse", "isUnderMouse() const", typeof(bool));
        }
        public QVariant Data(int key) {
            return (QVariant) interceptor.Invoke("data$", "data(int) const", typeof(QVariant), typeof(int), key);
        }
        public void SetData(int key, QVariant value) {
            interceptor.Invoke("setData$#", "setData(int, const QVariant&)", typeof(void), typeof(int), key, typeof(QVariant), value);
        }
        public uint InputMethodHints() {
            return (uint) interceptor.Invoke("inputMethodHints", "inputMethodHints() const", typeof(uint));
        }
        public void SetInputMethodHints(uint hints) {
            interceptor.Invoke("setInputMethodHints$", "setInputMethodHints(Qt::InputMethodHints)", typeof(void), typeof(uint), hints);
        }
        public void InstallSceneEventFilter(IQGraphicsItem filterItem) {
            interceptor.Invoke("installSceneEventFilter#", "installSceneEventFilter(QGraphicsItem*)", typeof(void), typeof(IQGraphicsItem), filterItem);
        }
        public void RemoveSceneEventFilter(IQGraphicsItem filterItem) {
            interceptor.Invoke("removeSceneEventFilter#", "removeSceneEventFilter(QGraphicsItem*)", typeof(void), typeof(IQGraphicsItem), filterItem);
        }
        [SmokeMethod("sceneEventFilter(QGraphicsItem*, QEvent*)")]
        protected virtual bool SceneEventFilter(IQGraphicsItem watched, QEvent arg2) {
            return (bool) interceptor.Invoke("sceneEventFilter##", "sceneEventFilter(QGraphicsItem*, QEvent*)", typeof(bool), typeof(IQGraphicsItem), watched, typeof(QEvent), arg2);
        }
        [SmokeMethod("contextMenuEvent(QGraphicsSceneContextMenuEvent*)")]
        protected virtual void ContextMenuEvent(QGraphicsSceneContextMenuEvent arg1) {
            interceptor.Invoke("contextMenuEvent#", "contextMenuEvent(QGraphicsSceneContextMenuEvent*)", typeof(void), typeof(QGraphicsSceneContextMenuEvent), arg1);
        }
        [SmokeMethod("dragEnterEvent(QGraphicsSceneDragDropEvent*)")]
        protected virtual void DragEnterEvent(QGraphicsSceneDragDropEvent arg1) {
            interceptor.Invoke("dragEnterEvent#", "dragEnterEvent(QGraphicsSceneDragDropEvent*)", typeof(void), typeof(QGraphicsSceneDragDropEvent), arg1);
        }
        [SmokeMethod("dragLeaveEvent(QGraphicsSceneDragDropEvent*)")]
        protected virtual void DragLeaveEvent(QGraphicsSceneDragDropEvent arg1) {
            interceptor.Invoke("dragLeaveEvent#", "dragLeaveEvent(QGraphicsSceneDragDropEvent*)", typeof(void), typeof(QGraphicsSceneDragDropEvent), arg1);
        }
        [SmokeMethod("dragMoveEvent(QGraphicsSceneDragDropEvent*)")]
        protected virtual void DragMoveEvent(QGraphicsSceneDragDropEvent arg1) {
            interceptor.Invoke("dragMoveEvent#", "dragMoveEvent(QGraphicsSceneDragDropEvent*)", typeof(void), typeof(QGraphicsSceneDragDropEvent), arg1);
        }
        [SmokeMethod("dropEvent(QGraphicsSceneDragDropEvent*)")]
        protected virtual void DropEvent(QGraphicsSceneDragDropEvent arg1) {
            interceptor.Invoke("dropEvent#", "dropEvent(QGraphicsSceneDragDropEvent*)", typeof(void), typeof(QGraphicsSceneDragDropEvent), arg1);
        }
        [SmokeMethod("hoverEnterEvent(QGraphicsSceneHoverEvent*)")]
        protected virtual void HoverEnterEvent(QGraphicsSceneHoverEvent arg1) {
            interceptor.Invoke("hoverEnterEvent#", "hoverEnterEvent(QGraphicsSceneHoverEvent*)", typeof(void), typeof(QGraphicsSceneHoverEvent), arg1);
        }
        [SmokeMethod("keyPressEvent(QKeyEvent*)")]
        protected virtual void KeyPressEvent(QKeyEvent arg1) {
            interceptor.Invoke("keyPressEvent#", "keyPressEvent(QKeyEvent*)", typeof(void), typeof(QKeyEvent), arg1);
        }
        [SmokeMethod("keyReleaseEvent(QKeyEvent*)")]
        protected virtual void KeyReleaseEvent(QKeyEvent arg1) {
            interceptor.Invoke("keyReleaseEvent#", "keyReleaseEvent(QKeyEvent*)", typeof(void), typeof(QKeyEvent), arg1);
        }
        [SmokeMethod("mousePressEvent(QGraphicsSceneMouseEvent*)")]
        protected virtual void MousePressEvent(QGraphicsSceneMouseEvent arg1) {
            interceptor.Invoke("mousePressEvent#", "mousePressEvent(QGraphicsSceneMouseEvent*)", typeof(void), typeof(QGraphicsSceneMouseEvent), arg1);
        }
        [SmokeMethod("mouseMoveEvent(QGraphicsSceneMouseEvent*)")]
        protected virtual void MouseMoveEvent(QGraphicsSceneMouseEvent arg1) {
            interceptor.Invoke("mouseMoveEvent#", "mouseMoveEvent(QGraphicsSceneMouseEvent*)", typeof(void), typeof(QGraphicsSceneMouseEvent), arg1);
        }
        [SmokeMethod("mouseReleaseEvent(QGraphicsSceneMouseEvent*)")]
        protected virtual void MouseReleaseEvent(QGraphicsSceneMouseEvent arg1) {
            interceptor.Invoke("mouseReleaseEvent#", "mouseReleaseEvent(QGraphicsSceneMouseEvent*)", typeof(void), typeof(QGraphicsSceneMouseEvent), arg1);
        }
        [SmokeMethod("mouseDoubleClickEvent(QGraphicsSceneMouseEvent*)")]
        protected virtual void MouseDoubleClickEvent(QGraphicsSceneMouseEvent arg1) {
            interceptor.Invoke("mouseDoubleClickEvent#", "mouseDoubleClickEvent(QGraphicsSceneMouseEvent*)", typeof(void), typeof(QGraphicsSceneMouseEvent), arg1);
        }
        [SmokeMethod("wheelEvent(QGraphicsSceneWheelEvent*)")]
        protected virtual void WheelEvent(QGraphicsSceneWheelEvent arg1) {
            interceptor.Invoke("wheelEvent#", "wheelEvent(QGraphicsSceneWheelEvent*)", typeof(void), typeof(QGraphicsSceneWheelEvent), arg1);
        }
        [SmokeMethod("inputMethodEvent(QInputMethodEvent*)")]
        protected virtual void InputMethodEvent(QInputMethodEvent arg1) {
            interceptor.Invoke("inputMethodEvent#", "inputMethodEvent(QInputMethodEvent*)", typeof(void), typeof(QInputMethodEvent), arg1);
        }
        [SmokeMethod("inputMethodQuery(Qt::InputMethodQuery) const")]
        protected virtual QVariant InputMethodQuery(Qt.InputMethodQuery query) {
            return (QVariant) interceptor.Invoke("inputMethodQuery$", "inputMethodQuery(Qt::InputMethodQuery) const", typeof(QVariant), typeof(Qt.InputMethodQuery), query);
        }
        [SmokeMethod("supportsExtension(QGraphicsItem::Extension) const")]
        protected virtual bool SupportsExtension(QGraphicsItem.Extension extension) {
            return (bool) interceptor.Invoke("supportsExtension$", "supportsExtension(QGraphicsItem::Extension) const", typeof(bool), typeof(QGraphicsItem.Extension), extension);
        }
        [SmokeMethod("setExtension(QGraphicsItem::Extension, const QVariant&)")]
        protected virtual void SetExtension(QGraphicsItem.Extension extension, QVariant variant) {
            interceptor.Invoke("setExtension$#", "setExtension(QGraphicsItem::Extension, const QVariant&)", typeof(void), typeof(QGraphicsItem.Extension), extension, typeof(QVariant), variant);
        }
        [SmokeMethod("extension(const QVariant&) const")]
        protected virtual QVariant extension(QVariant variant) {
            return (QVariant) interceptor.Invoke("extension#", "extension(const QVariant&) const", typeof(QVariant), typeof(QVariant), variant);
        }
        protected void AddToIndex() {
            interceptor.Invoke("addToIndex", "addToIndex()", typeof(void));
        }
        protected void RemoveFromIndex() {
            interceptor.Invoke("removeFromIndex", "removeFromIndex()", typeof(void));
        }
        protected void PrepareGeometryChange() {
            interceptor.Invoke("prepareGeometryChange", "prepareGeometryChange()", typeof(void));
        }
        public static new string Tr(string s, string c) {
            return (string) staticInterceptor.Invoke("tr$$", "tr(const char*, const char*)", typeof(string), typeof(string), s, typeof(string), c);
        }
        public static new string Tr(string s) {
            return (string) staticInterceptor.Invoke("tr$", "tr(const char*)", typeof(string), typeof(string), s);
        }
        public static void SetTabOrder(QGraphicsWidget first, QGraphicsWidget second) {
            staticInterceptor.Invoke("setTabOrder##", "setTabOrder(QGraphicsWidget*, QGraphicsWidget*)", typeof(void), typeof(QGraphicsWidget), first, typeof(QGraphicsWidget), second);
        }
        protected new IQGraphicsWidgetSignals Emit {
            get { return (IQGraphicsWidgetSignals) Q_EMIT; }
        }
    }

    public interface IQGraphicsWidgetSignals : IQGraphicsObjectSignals {
    }
}
