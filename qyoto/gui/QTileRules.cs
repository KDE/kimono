//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {
    using System;
    [SmokeClass("QTileRules")]
    public class QTileRules : Object, IDisposable {
        protected SmokeInvocation interceptor = null;
        private IntPtr smokeObject;
        protected QTileRules(Type dummy) {}
        protected void CreateProxy() {
            interceptor = new SmokeInvocation(typeof(QTileRules), this);
        }
        public Qt.TileRule Horizontal {
            get { return (Qt.TileRule) interceptor.Invoke("horizontal", "horizontal()", typeof(Qt.TileRule)); }
            set { interceptor.Invoke("setHorizontal$", "setHorizontal(Qt::TileRule)", typeof(void), typeof(Qt.TileRule), value); }
        }
        public Qt.TileRule Vertical {
            get { return (Qt.TileRule) interceptor.Invoke("vertical", "vertical()", typeof(Qt.TileRule)); }
            set { interceptor.Invoke("setVertical$", "setVertical(Qt::TileRule)", typeof(void), typeof(Qt.TileRule), value); }
        }
        public QTileRules(Qt.TileRule horizontalRule, Qt.TileRule verticalRule) : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("QTileRules$$", "QTileRules(Qt::TileRule, Qt::TileRule)", typeof(void), typeof(Qt.TileRule), horizontalRule, typeof(Qt.TileRule), verticalRule);
        }
        public QTileRules(Qt.TileRule rule) : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("QTileRules$", "QTileRules(Qt::TileRule)", typeof(void), typeof(Qt.TileRule), rule);
        }
        public QTileRules() : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("QTileRules", "QTileRules()", typeof(void));
        }
        ~QTileRules() {
            interceptor.Invoke("~QTileRules", "~QTileRules()", typeof(void));
        }
        public void Dispose() {
            interceptor.Invoke("~QTileRules", "~QTileRules()", typeof(void));
        }
    }
}
