//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {
    using System;
    /// <remarks> See <see cref="IQMenuBarSignals"></see> for signals emitted by QMenuBar
    /// </remarks>
    [SmokeClass("QMenuBar")]
    public class QMenuBar : QWidget, IDisposable {
        protected QMenuBar(Type dummy) : base((Type) null) {}
        protected new void CreateProxy() {
            interceptor = new SmokeInvocation(typeof(QMenuBar), this);
        }
        private static SmokeInvocation staticInterceptor = null;
        static QMenuBar() {
            staticInterceptor = new SmokeInvocation(typeof(QMenuBar), null);
        }
        [Q_PROPERTY("bool", "defaultUp")]
        public bool DefaultUp {
            get { return (bool) interceptor.Invoke("isDefaultUp", "isDefaultUp()", typeof(bool)); }
            set { interceptor.Invoke("setDefaultUp$", "setDefaultUp(bool)", typeof(void), typeof(bool), value); }
        }
        [Q_PROPERTY("bool", "nativeMenuBar")]
        public bool NativeMenuBar {
            get { return (bool) interceptor.Invoke("isNativeMenuBar", "isNativeMenuBar()", typeof(bool)); }
            set { interceptor.Invoke("setNativeMenuBar$", "setNativeMenuBar(bool)", typeof(void), typeof(bool), value); }
        }
        public QMenuBar(QWidget parent) : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("QMenuBar#", "QMenuBar(QWidget*)", typeof(void), typeof(QWidget), parent);
        }
        public QMenuBar() : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("QMenuBar", "QMenuBar()", typeof(void));
        }
        public new void AddAction(QAction action) {
            interceptor.Invoke("addAction#", "addAction(QAction*)", typeof(void), typeof(QAction), action);
        }
        public QAction AddAction(string text) {
            return (QAction) interceptor.Invoke("addAction$", "addAction(const QString&)", typeof(QAction), typeof(string), text);
        }
        public QAction AddAction(string text, QObject receiver, string member) {
            return (QAction) interceptor.Invoke("addAction$#$", "addAction(const QString&, const QObject*, const char*)", typeof(QAction), typeof(string), text, typeof(QObject), receiver, typeof(string), member);
        }
        public QAction AddMenu(QMenu menu) {
            return (QAction) interceptor.Invoke("addMenu#", "addMenu(QMenu*)", typeof(QAction), typeof(QMenu), menu);
        }
        public QMenu AddMenu(string title) {
            return (QMenu) interceptor.Invoke("addMenu$", "addMenu(const QString&)", typeof(QMenu), typeof(string), title);
        }
        public QMenu AddMenu(QIcon icon, string title) {
            return (QMenu) interceptor.Invoke("addMenu#$", "addMenu(const QIcon&, const QString&)", typeof(QMenu), typeof(QIcon), icon, typeof(string), title);
        }
        public QAction AddSeparator() {
            return (QAction) interceptor.Invoke("addSeparator", "addSeparator()", typeof(QAction));
        }
        public QAction InsertSeparator(QAction before) {
            return (QAction) interceptor.Invoke("insertSeparator#", "insertSeparator(QAction*)", typeof(QAction), typeof(QAction), before);
        }
        public QAction InsertMenu(QAction before, QMenu menu) {
            return (QAction) interceptor.Invoke("insertMenu##", "insertMenu(QAction*, QMenu*)", typeof(QAction), typeof(QAction), before, typeof(QMenu), menu);
        }
        public void Clear() {
            interceptor.Invoke("clear", "clear()", typeof(void));
        }
        public QAction ActiveAction() {
            return (QAction) interceptor.Invoke("activeAction", "activeAction() const", typeof(QAction));
        }
        public void SetActiveAction(QAction action) {
            interceptor.Invoke("setActiveAction#", "setActiveAction(QAction*)", typeof(void), typeof(QAction), action);
        }
        [SmokeMethod("sizeHint() const")]
        public override QSize SizeHint() {
            return (QSize) interceptor.Invoke("sizeHint", "sizeHint() const", typeof(QSize));
        }
        [SmokeMethod("minimumSizeHint() const")]
        public override QSize MinimumSizeHint() {
            return (QSize) interceptor.Invoke("minimumSizeHint", "minimumSizeHint() const", typeof(QSize));
        }
        [SmokeMethod("heightForWidth(int) const")]
        public override int HeightForWidth(int arg1) {
            return (int) interceptor.Invoke("heightForWidth$", "heightForWidth(int) const", typeof(int), typeof(int), arg1);
        }
        public QRect ActionGeometry(QAction arg1) {
            return (QRect) interceptor.Invoke("actionGeometry#", "actionGeometry(QAction*) const", typeof(QRect), typeof(QAction), arg1);
        }
        public QAction ActionAt(QPoint arg1) {
            return (QAction) interceptor.Invoke("actionAt#", "actionAt(const QPoint&) const", typeof(QAction), typeof(QPoint), arg1);
        }
        public void SetCornerWidget(QWidget w, Qt.Corner corner) {
            interceptor.Invoke("setCornerWidget#$", "setCornerWidget(QWidget*, Qt::Corner)", typeof(void), typeof(QWidget), w, typeof(Qt.Corner), corner);
        }
        public void SetCornerWidget(QWidget w) {
            interceptor.Invoke("setCornerWidget#", "setCornerWidget(QWidget*)", typeof(void), typeof(QWidget), w);
        }
        public QWidget CornerWidget(Qt.Corner corner) {
            return (QWidget) interceptor.Invoke("cornerWidget$", "cornerWidget(Qt::Corner) const", typeof(QWidget), typeof(Qt.Corner), corner);
        }
        public QWidget CornerWidget() {
            return (QWidget) interceptor.Invoke("cornerWidget", "cornerWidget() const", typeof(QWidget));
        }
        [Q_SLOT("void setVisible(bool)")]
        [SmokeMethod("setVisible(bool)")]
        public override void SetVisible(bool visible) {
            interceptor.Invoke("setVisible$", "setVisible(bool)", typeof(void), typeof(bool), visible);
        }
        [SmokeMethod("changeEvent(QEvent*)")]
        protected override void ChangeEvent(QEvent arg1) {
            interceptor.Invoke("changeEvent#", "changeEvent(QEvent*)", typeof(void), typeof(QEvent), arg1);
        }
        [SmokeMethod("keyPressEvent(QKeyEvent*)")]
        protected override void KeyPressEvent(QKeyEvent arg1) {
            interceptor.Invoke("keyPressEvent#", "keyPressEvent(QKeyEvent*)", typeof(void), typeof(QKeyEvent), arg1);
        }
        [SmokeMethod("mouseReleaseEvent(QMouseEvent*)")]
        protected override void MouseReleaseEvent(QMouseEvent arg1) {
            interceptor.Invoke("mouseReleaseEvent#", "mouseReleaseEvent(QMouseEvent*)", typeof(void), typeof(QMouseEvent), arg1);
        }
        [SmokeMethod("mousePressEvent(QMouseEvent*)")]
        protected override void MousePressEvent(QMouseEvent arg1) {
            interceptor.Invoke("mousePressEvent#", "mousePressEvent(QMouseEvent*)", typeof(void), typeof(QMouseEvent), arg1);
        }
        [SmokeMethod("mouseMoveEvent(QMouseEvent*)")]
        protected override void MouseMoveEvent(QMouseEvent arg1) {
            interceptor.Invoke("mouseMoveEvent#", "mouseMoveEvent(QMouseEvent*)", typeof(void), typeof(QMouseEvent), arg1);
        }
        [SmokeMethod("leaveEvent(QEvent*)")]
        protected override void LeaveEvent(QEvent arg1) {
            interceptor.Invoke("leaveEvent#", "leaveEvent(QEvent*)", typeof(void), typeof(QEvent), arg1);
        }
        [SmokeMethod("paintEvent(QPaintEvent*)")]
        protected override void PaintEvent(QPaintEvent arg1) {
            interceptor.Invoke("paintEvent#", "paintEvent(QPaintEvent*)", typeof(void), typeof(QPaintEvent), arg1);
        }
        [SmokeMethod("resizeEvent(QResizeEvent*)")]
        protected override void ResizeEvent(QResizeEvent arg1) {
            interceptor.Invoke("resizeEvent#", "resizeEvent(QResizeEvent*)", typeof(void), typeof(QResizeEvent), arg1);
        }
        [SmokeMethod("actionEvent(QActionEvent*)")]
        protected override void ActionEvent(QActionEvent arg1) {
            interceptor.Invoke("actionEvent#", "actionEvent(QActionEvent*)", typeof(void), typeof(QActionEvent), arg1);
        }
        [SmokeMethod("focusOutEvent(QFocusEvent*)")]
        protected override void FocusOutEvent(QFocusEvent arg1) {
            interceptor.Invoke("focusOutEvent#", "focusOutEvent(QFocusEvent*)", typeof(void), typeof(QFocusEvent), arg1);
        }
        [SmokeMethod("focusInEvent(QFocusEvent*)")]
        protected override void FocusInEvent(QFocusEvent arg1) {
            interceptor.Invoke("focusInEvent#", "focusInEvent(QFocusEvent*)", typeof(void), typeof(QFocusEvent), arg1);
        }
        [SmokeMethod("timerEvent(QTimerEvent*)")]
        protected override void TimerEvent(QTimerEvent arg1) {
            interceptor.Invoke("timerEvent#", "timerEvent(QTimerEvent*)", typeof(void), typeof(QTimerEvent), arg1);
        }
        [SmokeMethod("eventFilter(QObject*, QEvent*)")]
        protected new virtual bool EventFilter(QObject arg1, QEvent arg2) {
            return (bool) interceptor.Invoke("eventFilter##", "eventFilter(QObject*, QEvent*)", typeof(bool), typeof(QObject), arg1, typeof(QEvent), arg2);
        }
        [SmokeMethod("event(QEvent*)")]
        protected override bool Event(QEvent arg1) {
            return (bool) interceptor.Invoke("event#", "event(QEvent*)", typeof(bool), typeof(QEvent), arg1);
        }
        protected void InitStyleOption(QStyleOptionMenuItem option, QAction action) {
            interceptor.Invoke("initStyleOption##", "initStyleOption(QStyleOptionMenuItem*, const QAction*) const", typeof(void), typeof(QStyleOptionMenuItem), option, typeof(QAction), action);
        }
        ~QMenuBar() {
            interceptor.Invoke("~QMenuBar", "~QMenuBar()", typeof(void));
        }
        public new void Dispose() {
            interceptor.Invoke("~QMenuBar", "~QMenuBar()", typeof(void));
        }
        public static new string Tr(string s, string c) {
            return (string) staticInterceptor.Invoke("tr$$", "tr(const char*, const char*)", typeof(string), typeof(string), s, typeof(string), c);
        }
        public static new string Tr(string s) {
            return (string) staticInterceptor.Invoke("tr$", "tr(const char*)", typeof(string), typeof(string), s);
        }
        protected new IQMenuBarSignals Emit {
            get { return (IQMenuBarSignals) Q_EMIT; }
        }
    }

    public interface IQMenuBarSignals : IQWidgetSignals {
        [Q_SIGNAL("void triggered(QAction*)")]
        void Triggered(QAction action);
        [Q_SIGNAL("void hovered(QAction*)")]
        void Hovered(QAction action);
    }
}
