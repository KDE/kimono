//Auto-generated by kalyptus. DO NOT EDIT.
namespace Plasma {
    using Plasma;
    using System;
    using Kimono;
    using Qyoto;
    /// <remarks>
    /// </remarks>        <short>   </short>
    [SmokeClass("Plasma::Separator")]
    public class Separator : QGraphicsWidget, IDisposable {
        protected Separator(Type dummy) : base((Type) null) {}
        protected new void CreateProxy() {
            interceptor = new SmokeInvocation(typeof(Separator), this);
        }
        [Q_PROPERTY("Qt::Orientation", "orientation")]
        public new Qt.Orientation Orientation {
            get { return (Qt.Orientation) interceptor.Invoke("orientation", "orientation()", typeof(Qt.Orientation)); }
            set { interceptor.Invoke("setOrientation$", "setOrientation(Qt::Orientation)", typeof(void), typeof(Qt.Orientation), value); }
        }
        public Separator(IQGraphicsItem parent, uint wFlags) : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("Separator#$", "Separator(QGraphicsItem*, Qt::WindowFlags)", typeof(void), typeof(IQGraphicsItem), parent, typeof(uint), wFlags);
        }
        public Separator(IQGraphicsItem parent) : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("Separator#", "Separator(QGraphicsItem*)", typeof(void), typeof(IQGraphicsItem), parent);
        }
        public Separator() : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("Separator", "Separator()", typeof(void));
        }
        [SmokeMethod("paint(QPainter*, const QStyleOptionGraphicsItem*, QWidget*)")]
        protected new virtual void Paint(QPainter painter, QStyleOptionGraphicsItem option, QWidget widget) {
            interceptor.Invoke("paint###", "paint(QPainter*, const QStyleOptionGraphicsItem*, QWidget*)", typeof(void), typeof(QPainter), painter, typeof(QStyleOptionGraphicsItem), option, typeof(QWidget), widget);
        }
        [SmokeMethod("sizeHint(Qt::SizeHint, const QSizeF&) const")]
        public override QSizeF SizeHint(Qt.SizeHint which, QSizeF constraint) {
            return (QSizeF) interceptor.Invoke("sizeHint$#", "sizeHint(Qt::SizeHint, const QSizeF&) const", typeof(QSizeF), typeof(Qt.SizeHint), which, typeof(QSizeF), constraint);
        }
        ~Separator() {
            interceptor.Invoke("~Separator", "~Separator()", typeof(void));
        }
        public new void Dispose() {
            interceptor.Invoke("~Separator", "~Separator()", typeof(void));
        }
        protected new ISeparatorSignals Emit {
            get { return (ISeparatorSignals) Q_EMIT; }
        }
    }

    public interface ISeparatorSignals : IQGraphicsWidgetSignals {
    }
}
