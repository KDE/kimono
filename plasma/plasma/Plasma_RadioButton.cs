//Auto-generated by kalyptus. DO NOT EDIT.
namespace Plasma {
    using Plasma;
    using System;
    using Kimono;
    using Qyoto;
    /// <remarks>
    ///  @class RadioButton plasma/widgets/radiobutton.h <Plasma/Widgets/RadioButton>
    ///  See <see cref="IRadioButtonSignals"></see> for signals emitted by RadioButton
    /// </remarks>        <short> Provides a plasma-themed QRadioButton.  </short>
    [SmokeClass("Plasma::RadioButton")]
    public class RadioButton : QGraphicsProxyWidget, IDisposable {
        protected RadioButton(Type dummy) : base((Type) null) {}
        protected new void CreateProxy() {
            interceptor = new SmokeInvocation(typeof(RadioButton), this);
        }
        [Q_PROPERTY("QGraphicsWidget*", "parentWidget")]
        public QGraphicsWidget ParentWidget {
            get { return (QGraphicsWidget) interceptor.Invoke("parentWidget", "parentWidget()", typeof(QGraphicsWidget)); }
        }
        [Q_PROPERTY("QString", "text")]
        public string Text {
            get { return (string) interceptor.Invoke("text", "text()", typeof(string)); }
            set { interceptor.Invoke("setText$", "setText(QString)", typeof(void), typeof(string), value); }
        }
        [Q_PROPERTY("QString", "image")]
        public string Image {
            get { return (string) interceptor.Invoke("image", "image()", typeof(string)); }
            set { interceptor.Invoke("setImage$", "setImage(QString)", typeof(void), typeof(string), value); }
        }
        [Q_PROPERTY("QString", "styleSheet")]
        public string StyleSheet {
            get { return (string) interceptor.Invoke("styleSheet", "styleSheet()", typeof(string)); }
            set { interceptor.Invoke("setStyleSheet$", "setStyleSheet(QString)", typeof(void), typeof(string), value); }
        }
        [Q_PROPERTY("QRadioButton*", "nativeWidget")]
        public QRadioButton NativeWidget {
            get { return (QRadioButton) interceptor.Invoke("nativeWidget", "nativeWidget()", typeof(QRadioButton)); }
        }
        [Q_PROPERTY("bool", "isChecked")]
        public bool IsChecked {
            get { return (bool) interceptor.Invoke("isChecked", "isChecked()", typeof(bool)); }
            set { interceptor.Invoke("setChecked$", "setChecked(bool)", typeof(void), typeof(bool), value); }
        }
        public RadioButton(QGraphicsWidget parent) : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("RadioButton#", "RadioButton(QGraphicsWidget*)", typeof(void), typeof(QGraphicsWidget), parent);
        }
        public RadioButton() : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("RadioButton", "RadioButton()", typeof(void));
        }
        [SmokeMethod("resizeEvent(QGraphicsSceneResizeEvent*)")]
        protected override void ResizeEvent(QGraphicsSceneResizeEvent arg1) {
            interceptor.Invoke("resizeEvent#", "resizeEvent(QGraphicsSceneResizeEvent*)", typeof(void), typeof(QGraphicsSceneResizeEvent), arg1);
        }
        ~RadioButton() {
            interceptor.Invoke("~RadioButton", "~RadioButton()", typeof(void));
        }
        public new void Dispose() {
            interceptor.Invoke("~RadioButton", "~RadioButton()", typeof(void));
        }
        protected new IRadioButtonSignals Emit {
            get { return (IRadioButtonSignals) Q_EMIT; }
        }
    }

    public interface IRadioButtonSignals : IQGraphicsProxyWidgetSignals {
        [Q_SIGNAL("void toggled(bool)")]
        void Toggled(bool arg1);
    }
}
