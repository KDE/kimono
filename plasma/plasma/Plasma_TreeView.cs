//Auto-generated by kalyptus. DO NOT EDIT.
namespace Plasma {
    using Plasma;
    using System;
    using Kimono;
    using Qyoto;
    /// <remarks>
    ///  @class TreeView plasma/widgets/treeview.h <Plasma/Widgets/TreeView>
    /// </remarks>        <short> Provides a plasma-themed QTreeView.  </short>
    [SmokeClass("Plasma::TreeView")]
    public class TreeView : QGraphicsProxyWidget, IDisposable {
        protected TreeView(Type dummy) : base((Type) null) {}
        protected new void CreateProxy() {
            interceptor = new SmokeInvocation(typeof(TreeView), this);
        }
        [Q_PROPERTY("QAbstractItemModel*", "model")]
        public QAbstractItemModel Model {
            get { return (QAbstractItemModel) interceptor.Invoke("model", "model()", typeof(QAbstractItemModel)); }
            set { interceptor.Invoke("setModel#", "setModel(QAbstractItemModel*)", typeof(void), typeof(QAbstractItemModel), value); }
        }
        [Q_PROPERTY("QGraphicsWidget*", "parentWidget")]
        public QGraphicsWidget ParentWidget {
            get { return (QGraphicsWidget) interceptor.Invoke("parentWidget", "parentWidget()", typeof(QGraphicsWidget)); }
        }
        [Q_PROPERTY("QString", "styleSheet")]
        public string StyleSheet {
            get { return (string) interceptor.Invoke("styleSheet", "styleSheet()", typeof(string)); }
            set { interceptor.Invoke("setStyleSheet$", "setStyleSheet(QString)", typeof(void), typeof(string), value); }
        }
        [Q_PROPERTY("QTreeView*", "nativeWidget")]
        public QTreeView NativeWidget {
            get { return (QTreeView) interceptor.Invoke("nativeWidget", "nativeWidget()", typeof(QTreeView)); }
        }
        public TreeView(QGraphicsWidget parent) : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("TreeView#", "TreeView(QGraphicsWidget*)", typeof(void), typeof(QGraphicsWidget), parent);
        }
        public TreeView() : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("TreeView", "TreeView()", typeof(void));
        }
        ~TreeView() {
            interceptor.Invoke("~TreeView", "~TreeView()", typeof(void));
        }
        public new void Dispose() {
            interceptor.Invoke("~TreeView", "~TreeView()", typeof(void));
        }
        protected new ITreeViewSignals Emit {
            get { return (ITreeViewSignals) Q_EMIT; }
        }
    }

    public interface ITreeViewSignals : IQGraphicsProxyWidgetSignals {
    }
}
