//Auto-generated by kalyptus. DO NOT EDIT.
namespace Plasma {
    using Plasma;
    using System;
    using Kimono;
    using Qyoto;
    [SmokeClass("Plasma::AnimationDriver")]
    public class AnimationDriver : QObject, IDisposable {
        protected AnimationDriver(Type dummy) : base((Type) null) {}
        protected new void CreateProxy() {
            interceptor = new SmokeInvocation(typeof(AnimationDriver), this);
        }
        public AnimationDriver(QObject parent) : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("AnimationDriver#", "AnimationDriver(QObject*)", typeof(void), typeof(QObject), parent);
        }
        public AnimationDriver() : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("AnimationDriver", "AnimationDriver()", typeof(void));
        }
        [SmokeMethod("animationFps(Plasma::Animator::Animation) const")]
        public virtual int AnimationFps(Plasma.Animator.Animation arg1) {
            return (int) interceptor.Invoke("animationFps$", "animationFps(Plasma::Animator::Animation) const", typeof(int), typeof(Plasma.Animator.Animation), arg1);
        }
        [SmokeMethod("movementAnimationFps(Plasma::Animator::Movement) const")]
        public virtual int MovementAnimationFps(Plasma.Animator.Movement arg1) {
            return (int) interceptor.Invoke("movementAnimationFps$", "movementAnimationFps(Plasma::Animator::Movement) const", typeof(int), typeof(Plasma.Animator.Movement), arg1);
        }
        [SmokeMethod("elementAnimationFps(Plasma::Animator::Animation) const")]
        public virtual int ElementAnimationFps(Plasma.Animator.Animation arg1) {
            return (int) interceptor.Invoke("elementAnimationFps$", "elementAnimationFps(Plasma::Animator::Animation) const", typeof(int), typeof(Plasma.Animator.Animation), arg1);
        }
        [SmokeMethod("animationDuration(Plasma::Animator::Animation) const")]
        public virtual int AnimationDuration(Plasma.Animator.Animation arg1) {
            return (int) interceptor.Invoke("animationDuration$", "animationDuration(Plasma::Animator::Animation) const", typeof(int), typeof(Plasma.Animator.Animation), arg1);
        }
        [SmokeMethod("movementAnimationDuration(Plasma::Animator::Movement) const")]
        public virtual int MovementAnimationDuration(Plasma.Animator.Movement arg1) {
            return (int) interceptor.Invoke("movementAnimationDuration$", "movementAnimationDuration(Plasma::Animator::Movement) const", typeof(int), typeof(Plasma.Animator.Movement), arg1);
        }
        [SmokeMethod("elementAnimationDuration(Plasma::Animator::Animation) const")]
        public virtual int ElementAnimationDuration(Plasma.Animator.Animation arg1) {
            return (int) interceptor.Invoke("elementAnimationDuration$", "elementAnimationDuration(Plasma::Animator::Animation) const", typeof(int), typeof(Plasma.Animator.Animation), arg1);
        }
        [SmokeMethod("animationCurve(Plasma::Animator::Animation) const")]
        public virtual Plasma.Animator.CurveShape AnimationCurve(Plasma.Animator.Animation arg1) {
            return (Plasma.Animator.CurveShape) interceptor.Invoke("animationCurve$", "animationCurve(Plasma::Animator::Animation) const", typeof(Plasma.Animator.CurveShape), typeof(Plasma.Animator.Animation), arg1);
        }
        [SmokeMethod("movementAnimationCurve(Plasma::Animator::Movement) const")]
        public virtual Plasma.Animator.CurveShape MovementAnimationCurve(Plasma.Animator.Movement arg1) {
            return (Plasma.Animator.CurveShape) interceptor.Invoke("movementAnimationCurve$", "movementAnimationCurve(Plasma::Animator::Movement) const", typeof(Plasma.Animator.CurveShape), typeof(Plasma.Animator.Movement), arg1);
        }
        [SmokeMethod("elementAnimationCurve(Plasma::Animator::Animation) const")]
        public virtual Plasma.Animator.CurveShape ElementAnimationCurve(Plasma.Animator.Animation arg1) {
            return (Plasma.Animator.CurveShape) interceptor.Invoke("elementAnimationCurve$", "elementAnimationCurve(Plasma::Animator::Animation) const", typeof(Plasma.Animator.CurveShape), typeof(Plasma.Animator.Animation), arg1);
        }
        [SmokeMethod("elementAppear(qreal, const QPixmap&)")]
        public virtual QPixmap ElementAppear(double progress, QPixmap pixmap) {
            return (QPixmap) interceptor.Invoke("elementAppear$#", "elementAppear(qreal, const QPixmap&)", typeof(QPixmap), typeof(double), progress, typeof(QPixmap), pixmap);
        }
        [SmokeMethod("elementDisappear(qreal, const QPixmap&)")]
        public virtual QPixmap ElementDisappear(double progress, QPixmap pixmap) {
            return (QPixmap) interceptor.Invoke("elementDisappear$#", "elementDisappear(qreal, const QPixmap&)", typeof(QPixmap), typeof(double), progress, typeof(QPixmap), pixmap);
        }
        [SmokeMethod("itemAppear(qreal, QGraphicsItem*)")]
        public virtual void ItemAppear(double progress, IQGraphicsItem item) {
            interceptor.Invoke("itemAppear$#", "itemAppear(qreal, QGraphicsItem*)", typeof(void), typeof(double), progress, typeof(IQGraphicsItem), item);
        }
        [SmokeMethod("itemDisappear(qreal, QGraphicsItem*)")]
        public virtual void ItemDisappear(double progress, IQGraphicsItem item) {
            interceptor.Invoke("itemDisappear$#", "itemDisappear(qreal, QGraphicsItem*)", typeof(void), typeof(double), progress, typeof(IQGraphicsItem), item);
        }
        [SmokeMethod("itemActivated(qreal, QGraphicsItem*)")]
        public virtual void ItemActivated(double progress, IQGraphicsItem item) {
            interceptor.Invoke("itemActivated$#", "itemActivated(qreal, QGraphicsItem*)", typeof(void), typeof(double), progress, typeof(IQGraphicsItem), item);
        }
        [SmokeMethod("itemSlideIn(qreal, QGraphicsItem*, const QPoint&, const QPoint&)")]
        public virtual void ItemSlideIn(double progress, IQGraphicsItem item, QPoint start, QPoint destination) {
            interceptor.Invoke("itemSlideIn$###", "itemSlideIn(qreal, QGraphicsItem*, const QPoint&, const QPoint&)", typeof(void), typeof(double), progress, typeof(IQGraphicsItem), item, typeof(QPoint), start, typeof(QPoint), destination);
        }
        [SmokeMethod("itemSlideOut(qreal, QGraphicsItem*, const QPoint&, const QPoint&)")]
        public virtual void ItemSlideOut(double progress, IQGraphicsItem item, QPoint start, QPoint destination) {
            interceptor.Invoke("itemSlideOut$###", "itemSlideOut(qreal, QGraphicsItem*, const QPoint&, const QPoint&)", typeof(void), typeof(double), progress, typeof(IQGraphicsItem), item, typeof(QPoint), start, typeof(QPoint), destination);
        }
        ~AnimationDriver() {
            interceptor.Invoke("~AnimationDriver", "~AnimationDriver()", typeof(void));
        }
        public new void Dispose() {
            interceptor.Invoke("~AnimationDriver", "~AnimationDriver()", typeof(void));
        }
        protected new IAnimationDriverSignals Emit {
            get { return (IAnimationDriverSignals) Q_EMIT; }
        }
    }

    public interface IAnimationDriverSignals : IQObjectSignals {
    }
}
