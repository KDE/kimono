//Auto-generated by kalyptus. DO NOT EDIT.
namespace Plasma {
    using Plasma;
    using System;
    using Kimono;
    using Qyoto;
    /// <remarks>
    ///  @class ContainmentActionsPluginsConfig plasma/containmentactionspluginsconfig.h <Plasma/ContainmentActionsPluginsConfig>
    /// </remarks>        <short> A class that holds a map of triggers to plugin names.</short>
    [SmokeClass("Plasma::ContainmentActionsPluginsConfig")]
    public class ContainmentActionsPluginsConfig : Object, IDisposable {
        protected SmokeInvocation interceptor = null;
        private IntPtr smokeObject;
        protected ContainmentActionsPluginsConfig(Type dummy) {}
        protected void CreateProxy() {
            interceptor = new SmokeInvocation(typeof(ContainmentActionsPluginsConfig), this);
        }
        public ContainmentActionsPluginsConfig() : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("ContainmentActionsPluginsConfig", "ContainmentActionsPluginsConfig()", typeof(void));
        }
        public ContainmentActionsPluginsConfig(Plasma.ContainmentActionsPluginsConfig other) : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("ContainmentActionsPluginsConfig#", "ContainmentActionsPluginsConfig(const Plasma::ContainmentActionsPluginsConfig&)", typeof(void), typeof(Plasma.ContainmentActionsPluginsConfig), other);
        }
        /// <remarks>
        ///  clears everything
        ///      </remarks>        <short>    clears everything      </short>
        public void Clear() {
            interceptor.Invoke("clear", "clear()", typeof(void));
        }
        /// <remarks>
        ///  removes <code>trigger</code>
        /// </remarks>        <short>    removes <code>trigger</code> </short>
        ///         <see> addPlugin</see>
        ///         <see> for</see>
        ///         <see> an</see>
        ///         <see> explanation</see>
        ///         <see> of</see>
        ///         <see> the</see>
        ///         <see> @p</see>
        ///         <see> trigger</see>
        public void Remove(QEvent trigger) {
            interceptor.Invoke("remove#", "remove(QEvent*)", typeof(void), typeof(QEvent), trigger);
        }
        /// <remarks>
        ///  Sets <code>trigger</code> to plugin <code>name</code>
        ///  if you're passing the trigger as an event, the following events are currently understood:
        ///  -mouse press and release events: button and modifiers
        ///  -mouse wheel events: direction and modifiers
        ///  both traditional and graphicsscene events are supported.
        ///      </remarks>        <short>    Sets <code>trigger</code> to plugin <code>name</code>  if you're passing the trigger as an event, the following events are currently understood:  -mouse press and release events: button and modifiers  -mouse wheel events: direction and modifiers  both traditional and graphicsscene events are supported.</short>
        public void AddPlugin(QEvent trigger, string name) {
            interceptor.Invoke("addPlugin#$", "addPlugin(QEvent*, const QString&)", typeof(void), typeof(QEvent), trigger, typeof(string), name);
        }
        /// <remarks>
        ///  Sets trigger described by <code>modifiers</code> and <code>button</code> to plugin <code>name</code>
        ///      </remarks>        <short>    Sets trigger described by <code>modifiers</code> and <code>button</code> to plugin <code>name</code>      </short>
        public void AddPlugin(uint modifiers, Qt.MouseButton button, string name) {
            interceptor.Invoke("addPlugin$$$", "addPlugin(Qt::KeyboardModifiers, Qt::MouseButton, const QString&)", typeof(void), typeof(uint), modifiers, typeof(Qt.MouseButton), button, typeof(string), name);
        }
        /// <remarks>
        ///  Sets trigger described by <code>modifiers</code> and <code>wheelDirection</code> to plugin <code>name</code>
        ///      </remarks>        <short>    Sets trigger described by <code>modifiers</code> and <code>wheelDirection</code> to plugin <code>name</code>      </short>
        public void AddPlugin(uint modifiers, Qt.Orientation wheelDirection, string name) {
            interceptor.Invoke("addPlugin$$$", "addPlugin(Qt::KeyboardModifiers, Qt::Orientation, const QString&)", typeof(void), typeof(uint), modifiers, typeof(Qt.Orientation), wheelDirection, typeof(string), name);
        }
        ~ContainmentActionsPluginsConfig() {
            interceptor.Invoke("~ContainmentActionsPluginsConfig", "~ContainmentActionsPluginsConfig()", typeof(void));
        }
        public void Dispose() {
            interceptor.Invoke("~ContainmentActionsPluginsConfig", "~ContainmentActionsPluginsConfig()", typeof(void));
        }
    }
}
