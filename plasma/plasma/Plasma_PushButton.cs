//Auto-generated by kalyptus. DO NOT EDIT.
namespace Plasma {
    using Plasma;
    using System;
    using Kimono;
    using Qyoto;
    /// <remarks>
    ///  @class PushButton plasma/widgets/pushbutton.h <Plasma/Widgets/PushButton>
    ///  See <see cref="IPushButtonSignals"></see> for signals emitted by PushButton
    /// </remarks>        <short> Provides a plasma-themed KPushButton.  </short>
    [SmokeClass("Plasma::PushButton")]
    public class PushButton : QGraphicsProxyWidget, IDisposable {
        protected PushButton(Type dummy) : base((Type) null) {}
        protected new void CreateProxy() {
            interceptor = new SmokeInvocation(typeof(PushButton), this);
        }
        [Q_PROPERTY("QGraphicsWidget*", "parentWidget")]
        public QGraphicsWidget ParentWidget {
            get { return (QGraphicsWidget) interceptor.Invoke("parentWidget", "parentWidget()", typeof(QGraphicsWidget)); }
        }
        [Q_PROPERTY("QString", "text")]
        public string Text {
            get { return (string) interceptor.Invoke("text", "text()", typeof(string)); }
            set { interceptor.Invoke("setText$", "setText(QString)", typeof(void), typeof(string), value); }
        }
        [Q_PROPERTY("QString", "image")]
        public string Image {
            get { return (string) interceptor.Invoke("image", "image()", typeof(string)); }
            set { interceptor.Invoke("setImage$", "setImage(QString)", typeof(void), typeof(string), value); }
        }
        [Q_PROPERTY("QString", "stylesheet")]
        public string Stylesheet {
            get { return (string) interceptor.Invoke("styleSheet", "styleSheet()", typeof(string)); }
            set { interceptor.Invoke("setStyleSheet$", "setStyleSheet(QString)", typeof(void), typeof(string), value); }
        }
        [Q_PROPERTY("KPushButton*", "nativeWidget")]
        public KPushButton NativeWidget {
            get { return (KPushButton) interceptor.Invoke("nativeWidget", "nativeWidget()", typeof(KPushButton)); }
        }
        [Q_PROPERTY("QAction*", "action")]
        public QAction Action {
            get { return (QAction) interceptor.Invoke("action", "action()", typeof(QAction)); }
            set { interceptor.Invoke("setAction#", "setAction(QAction*)", typeof(void), typeof(QAction), value); }
        }
        [Q_PROPERTY("QIcon", "icon")]
        public QIcon icon {
            get { return (QIcon) interceptor.Invoke("icon", "icon()", typeof(QIcon)); }
            set { interceptor.Invoke("setIcon#", "setIcon(QIcon)", typeof(void), typeof(QIcon), value); }
        }
        [Q_PROPERTY("bool", "checkable")]
        public bool Checkable {
            get { return (bool) interceptor.Invoke("isCheckable", "isCheckable()", typeof(bool)); }
            set { interceptor.Invoke("setCheckable$", "setCheckable(bool)", typeof(void), typeof(bool), value); }
        }
        [Q_PROPERTY("bool", "checked")]
        public bool Checked {
            get { return (bool) interceptor.Invoke("isChecked", "isChecked()", typeof(bool)); }
            set { interceptor.Invoke("setChecked$", "setChecked(bool)", typeof(void), typeof(bool), value); }
        }
        [Q_PROPERTY("bool", "down")]
        public bool Down {
            get { return (bool) interceptor.Invoke("isDown", "isDown()", typeof(bool)); }
        }
        public PushButton(QGraphicsWidget parent) : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("PushButton#", "PushButton(QGraphicsWidget*)", typeof(void), typeof(QGraphicsWidget), parent);
        }
        public PushButton() : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("PushButton", "PushButton()", typeof(void));
        }
        /// <remarks>
        ///  Sets the path to an svg image to display and the id of the used svg element, if necessary.
        ///  @arg path the path to the image; if a relative path, then a themed image will be loaded.
        ///  @arg elementid the id of a svg element.
        /// </remarks>        <short>    Sets the path to an svg image to display and the id of the used svg element, if necessary.</short>
        public void SetImage(string path, string elementid) {
            interceptor.Invoke("setImage$$", "setImage(const QString&, const QString&)", typeof(void), typeof(string), path, typeof(string), elementid);
        }
        [SmokeMethod("paint(QPainter*, const QStyleOptionGraphicsItem*, QWidget*)")]
        protected new virtual void Paint(QPainter painter, QStyleOptionGraphicsItem option, QWidget widget) {
            interceptor.Invoke("paint###", "paint(QPainter*, const QStyleOptionGraphicsItem*, QWidget*)", typeof(void), typeof(QPainter), painter, typeof(QStyleOptionGraphicsItem), option, typeof(QWidget), widget);
        }
        [SmokeMethod("paint(QPainter*, const QStyleOptionGraphicsItem*)")]
        protected new virtual void Paint(QPainter painter, QStyleOptionGraphicsItem option) {
            interceptor.Invoke("paint##", "paint(QPainter*, const QStyleOptionGraphicsItem*)", typeof(void), typeof(QPainter), painter, typeof(QStyleOptionGraphicsItem), option);
        }
        [SmokeMethod("resizeEvent(QGraphicsSceneResizeEvent*)")]
        protected override void ResizeEvent(QGraphicsSceneResizeEvent arg1) {
            interceptor.Invoke("resizeEvent#", "resizeEvent(QGraphicsSceneResizeEvent*)", typeof(void), typeof(QGraphicsSceneResizeEvent), arg1);
        }
        [SmokeMethod("hoverEnterEvent(QGraphicsSceneHoverEvent*)")]
        protected override void HoverEnterEvent(QGraphicsSceneHoverEvent arg1) {
            interceptor.Invoke("hoverEnterEvent#", "hoverEnterEvent(QGraphicsSceneHoverEvent*)", typeof(void), typeof(QGraphicsSceneHoverEvent), arg1);
        }
        [SmokeMethod("hoverLeaveEvent(QGraphicsSceneHoverEvent*)")]
        protected override void HoverLeaveEvent(QGraphicsSceneHoverEvent arg1) {
            interceptor.Invoke("hoverLeaveEvent#", "hoverLeaveEvent(QGraphicsSceneHoverEvent*)", typeof(void), typeof(QGraphicsSceneHoverEvent), arg1);
        }
        [SmokeMethod("changeEvent(QEvent*)")]
        protected override void ChangeEvent(QEvent arg1) {
            interceptor.Invoke("changeEvent#", "changeEvent(QEvent*)", typeof(void), typeof(QEvent), arg1);
        }
        [SmokeMethod("sizeHint(Qt::SizeHint, const QSizeF&) const")]
        public override QSizeF SizeHint(Qt.SizeHint which, QSizeF constraint) {
            return (QSizeF) interceptor.Invoke("sizeHint$#", "sizeHint(Qt::SizeHint, const QSizeF&) const", typeof(QSizeF), typeof(Qt.SizeHint), which, typeof(QSizeF), constraint);
        }
        ~PushButton() {
            interceptor.Invoke("~PushButton", "~PushButton()", typeof(void));
        }
        public new void Dispose() {
            interceptor.Invoke("~PushButton", "~PushButton()", typeof(void));
        }
        protected new IPushButtonSignals Emit {
            get { return (IPushButtonSignals) Q_EMIT; }
        }
    }

    public interface IPushButtonSignals : IQGraphicsProxyWidgetSignals {
        /// <remarks>
        ///  Emitted when the button is pressed down; usually the clicked() signal
        ///  will suffice, however.
        /// </remarks>        <short>    Emitted when the button is pressed down; usually the clicked() signal  will suffice, however.</short>
        [Q_SIGNAL("void pressed()")]
        void Pressed();
        /// <remarks>
        ///  Emitted when the button is released; usually the clicked() signal
        ///  will suffice, however.
        /// </remarks>        <short>    Emitted when the button is released; usually the clicked() signal  will suffice, however.</short>
        [Q_SIGNAL("void released()")]
        void Released();
        /// <remarks>
        ///  Emitted when the button is pressed then released, completing a click
        ///      </remarks>        <short>    Emitted when the button is pressed then released, completing a click      </short>
        [Q_SIGNAL("void clicked()")]
        void Clicked();
        /// <remarks>
        ///  Emitted when the button changes state from up to down
        ///      </remarks>        <short>    Emitted when the button changes state from up to down      </short>
        [Q_SIGNAL("void toggled(bool)")]
        void Toggled(bool arg1);
    }
}
