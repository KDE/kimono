//Auto-generated by kalyptus. DO NOT EDIT.
namespace Plasma {
    using Plasma;
    using System;
    using Kimono;
    using Qyoto;
    /// <remarks>
    ///  @class GroupBox plasma/widgets/groupbox.h <Plasma/Widgets/GroupBox>
    /// </remarks>        <short> Provides a plasma-themed QGroupBox.  </short>
    [SmokeClass("Plasma::GroupBox")]
    public class GroupBox : QGraphicsProxyWidget, IDisposable {
        protected GroupBox(Type dummy) : base((Type) null) {}
        protected new void CreateProxy() {
            interceptor = new SmokeInvocation(typeof(GroupBox), this);
        }
        [Q_PROPERTY("QGraphicsWidget*", "parentWidget")]
        public QGraphicsWidget ParentWidget {
            get { return (QGraphicsWidget) interceptor.Invoke("parentWidget", "parentWidget()", typeof(QGraphicsWidget)); }
        }
        [Q_PROPERTY("QString", "text")]
        public string Text {
            get { return (string) interceptor.Invoke("text", "text()", typeof(string)); }
            set { interceptor.Invoke("setText$", "setText(QString)", typeof(void), typeof(string), value); }
        }
        [Q_PROPERTY("QString", "styleSheet")]
        public string StyleSheet {
            get { return (string) interceptor.Invoke("styleSheet", "styleSheet()", typeof(string)); }
            set { interceptor.Invoke("setStyleSheet$", "setStyleSheet(QString)", typeof(void), typeof(string), value); }
        }
        [Q_PROPERTY("QGroupBox*", "nativeWidget")]
        public QGroupBox NativeWidget {
            get { return (QGroupBox) interceptor.Invoke("nativeWidget", "nativeWidget()", typeof(QGroupBox)); }
        }
        public GroupBox(QGraphicsWidget parent) : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("GroupBox#", "GroupBox(QGraphicsWidget*)", typeof(void), typeof(QGraphicsWidget), parent);
        }
        public GroupBox() : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("GroupBox", "GroupBox()", typeof(void));
        }
        [SmokeMethod("resizeEvent(QGraphicsSceneResizeEvent*)")]
        protected override void ResizeEvent(QGraphicsSceneResizeEvent arg1) {
            interceptor.Invoke("resizeEvent#", "resizeEvent(QGraphicsSceneResizeEvent*)", typeof(void), typeof(QGraphicsSceneResizeEvent), arg1);
        }
        [SmokeMethod("changeEvent(QEvent*)")]
        protected override void ChangeEvent(QEvent arg1) {
            interceptor.Invoke("changeEvent#", "changeEvent(QEvent*)", typeof(void), typeof(QEvent), arg1);
        }
        ~GroupBox() {
            interceptor.Invoke("~GroupBox", "~GroupBox()", typeof(void));
        }
        public new void Dispose() {
            interceptor.Invoke("~GroupBox", "~GroupBox()", typeof(void));
        }
        protected new IGroupBoxSignals Emit {
            get { return (IGroupBoxSignals) Q_EMIT; }
        }
    }

    public interface IGroupBoxSignals : IQGraphicsProxyWidgetSignals {
    }
}
