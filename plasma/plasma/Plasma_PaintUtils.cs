//Auto-generated by kalyptus. DO NOT EDIT.
namespace Plasma.PaintUtils {
    using Plasma;
    using System;
    using Kimono;
    using Qyoto;
    /// <remarks>
    ///   Namespace for all Image Effects specific to Plasma
    /// </remarks>        <short>     Namespace for all Image Effects specific to Plasma </short>
    [SmokeClass("Plasma::PaintUtils")]
    public class Global {
        private static SmokeInvocation staticInterceptor = null;
        static Global() {
            staticInterceptor = new SmokeInvocation(typeof(Global), null);
        }
        /// <remarks>
        ///  Creates a blurred shadow of the supplied image.
        ///  </remarks>        <short>    Creates a blurred shadow of the supplied image.</short>
        public static void ShadowBlur(QImage image, int radius, QColor color) {
            staticInterceptor.Invoke("shadowBlur#$#", "shadowBlur(QImage&, int, const QColor&)", typeof(void), typeof(QImage), image, typeof(int), radius, typeof(QColor), color);
        }
        /// <remarks>
        ///  Returns a nicely rounded rectanglular path for painting.
        ///  </remarks>        <short>    Returns a nicely rounded rectanglular path for painting.</short>
        public static QPainterPath RoundedRectangle(QRectF rect, double radius) {
            return (QPainterPath) staticInterceptor.Invoke("roundedRectangle#$", "roundedRectangle(const QRectF&, qreal)", typeof(QPainterPath), typeof(QRectF), rect, typeof(double), radius);
        }
        /// <remarks>
        ///  Blends a pixmap into another
        ///  </remarks>        <short>    Blends a pixmap into another  </short>
        public static QPixmap transition(QPixmap from, QPixmap to, double amount) {
            return (QPixmap) staticInterceptor.Invoke("transition##$", "transition(const QPixmap&, const QPixmap&, qreal)", typeof(QPixmap), typeof(QPixmap), from, typeof(QPixmap), to, typeof(double), amount);
        }
    }
}
