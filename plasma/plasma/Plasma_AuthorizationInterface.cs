//Auto-generated by kalyptus. DO NOT EDIT.
namespace Plasma {
    using Plasma;
    using System;
    using Kimono;
    using Qyoto;
    /// <remarks>
    ///  @class AuthorizationInterface plasma/authorizationinterface.h <Plasma/AuthorizationInterface>
    ///  This class is only needed when you create a plasma shell. When you implement it and register it
    ///  with the AuthorizationManager class, it allows you to respond to incoming service access
    ///  attempts. Whenever a message is received that does not match any of the AuthorizationRules,
    ///  AuthorizationManager creates a new rule matching it, and passes it to the authorize function.
    ///  Change the rule from Unspecified to something else like Allow or Deny to continue processing the
    ///  message.
    ///  It also allows you to outgoing access attempts that require pin pairing, to allow your shell to
    ///  show a dialog to ask the user for a password.
    /// </remarks>        <short> Allows authorization of access to plasma services. </short>
    [SmokeClass("Plasma::AuthorizationInterface")]
    public abstract class AuthorizationInterface : Object {
        protected SmokeInvocation interceptor = null;
        private IntPtr smokeObject;
        protected AuthorizationInterface(Type dummy) {}
        protected void CreateProxy() {
            interceptor = new SmokeInvocation(typeof(AuthorizationInterface), this);
        }
        /// <remarks>
        ///  implement this function to respond to an incoming request that doesn't match any rule.
        /// <param> name="rule" a new AuthorizationRule matching an incoming operation. Call setRules on this
        ///  rule to allow/deny the operation.
        ///          </param></remarks>        <short>    implement this function to respond to an incoming request that doesn't match any rule.</short>
        [SmokeMethod("authorizationRequest(Plasma::AuthorizationRule&)")]
        public abstract void AuthorizationRequest(Plasma.AuthorizationRule rule);
        /// <remarks>
        ///  Implement this function to respond to an outgoing connection that needs a password to
        ///  connect successfully. As a response to this you'll probably want to show a dialog.
        /// <param> name="request" a ClientPinRequest where you can call setPin on to set the pin for the
        ///  outgoing connection.
        ///          </param></remarks>        <short>    Implement this function to respond to an outgoing connection that needs a password to  connect successfully.</short>
        [SmokeMethod("clientPinRequest(Plasma::ClientPinRequest&)")]
        public abstract void ClientPinRequest(Plasma.ClientPinRequest request);
        public AuthorizationInterface() : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("AuthorizationInterface", "AuthorizationInterface()", typeof(void));
        }
    }
}
