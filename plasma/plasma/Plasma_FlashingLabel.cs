//Auto-generated by kalyptus. DO NOT EDIT.
namespace Plasma {
    using Plasma;
    using System;
    using Kimono;
    using Qyoto;
    /// <remarks>
    ///  @class FlashingLabel plasma/widgets/flashinglabel.h <Plasma/Widgets/FlashingLabel>
    /// </remarks>        <short> Provides flashing text or icons inside Plasma.</short>
    [SmokeClass("Plasma::FlashingLabel")]
    public class FlashingLabel : QGraphicsWidget, IDisposable {
        protected FlashingLabel(Type dummy) : base((Type) null) {}
        protected new void CreateProxy() {
            interceptor = new SmokeInvocation(typeof(FlashingLabel), this);
        }
        [Q_PROPERTY("bool", "autohide")]
        public bool Autohide {
            get { return (bool) interceptor.Invoke("autohide", "autohide()", typeof(bool)); }
            set { interceptor.Invoke("setAutohide$", "setAutohide(bool)", typeof(void), typeof(bool), value); }
        }
        [Q_PROPERTY("QFont", "font")]
        public QFont Font {
            get { return (QFont) interceptor.Invoke("font", "font()", typeof(QFont)); }
            set { interceptor.Invoke("setFont#", "setFont(QFont)", typeof(void), typeof(QFont), value); }
        }
        [Q_PROPERTY("QColor", "color")]
        public QColor Color {
            get { return (QColor) interceptor.Invoke("color", "color()", typeof(QColor)); }
            set { interceptor.Invoke("setColor#", "setColor(QColor)", typeof(void), typeof(QColor), value); }
        }
        [Q_PROPERTY("int", "duration")]
        public int Duration {
            get { return (int) interceptor.Invoke("duration", "duration()", typeof(int)); }
            set { interceptor.Invoke("setDuration$", "setDuration(int)", typeof(void), typeof(int), value); }
        }
        public FlashingLabel(IQGraphicsItem parent) : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("FlashingLabel#", "FlashingLabel(QGraphicsItem*)", typeof(void), typeof(IQGraphicsItem), parent);
        }
        public FlashingLabel() : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("FlashingLabel", "FlashingLabel()", typeof(void));
        }
        [SmokeMethod("paint(QPainter*, const QStyleOptionGraphicsItem*, QWidget*)")]
        public override void Paint(QPainter painter, QStyleOptionGraphicsItem option, QWidget widget) {
            interceptor.Invoke("paint###", "paint(QPainter*, const QStyleOptionGraphicsItem*, QWidget*)", typeof(void), typeof(QPainter), painter, typeof(QStyleOptionGraphicsItem), option, typeof(QWidget), widget);
        }
        [SmokeMethod("paint(QPainter*, const QStyleOptionGraphicsItem*)")]
        public override void Paint(QPainter painter, QStyleOptionGraphicsItem option) {
            interceptor.Invoke("paint##", "paint(QPainter*, const QStyleOptionGraphicsItem*)", typeof(void), typeof(QPainter), painter, typeof(QStyleOptionGraphicsItem), option);
        }
        public void Flash(string text, int duration, QTextOption option) {
            interceptor.Invoke("flash$$#", "flash(const QString&, int, const QTextOption&)", typeof(void), typeof(string), text, typeof(int), duration, typeof(QTextOption), option);
        }
        public void Flash(string text, int duration) {
            interceptor.Invoke("flash$$", "flash(const QString&, int)", typeof(void), typeof(string), text, typeof(int), duration);
        }
        public void Flash(string text) {
            interceptor.Invoke("flash$", "flash(const QString&)", typeof(void), typeof(string), text);
        }
        public void Flash(QPixmap pixmap, int duration, uint align) {
            interceptor.Invoke("flash#$$", "flash(const QPixmap&, int, Qt::Alignment)", typeof(void), typeof(QPixmap), pixmap, typeof(int), duration, typeof(uint), align);
        }
        public void Flash(QPixmap pixmap, int duration) {
            interceptor.Invoke("flash#$", "flash(const QPixmap&, int)", typeof(void), typeof(QPixmap), pixmap, typeof(int), duration);
        }
        public void Flash(QPixmap pixmap) {
            interceptor.Invoke("flash#", "flash(const QPixmap&)", typeof(void), typeof(QPixmap), pixmap);
        }
        [Q_SLOT("void kill()")]
        public void Kill() {
            interceptor.Invoke("kill", "kill()", typeof(void));
        }
        [SmokeMethod("sizeHint(Qt::SizeHint, const QSizeF&) const")]
        public override QSizeF SizeHint(Qt.SizeHint which, QSizeF constraint) {
            return (QSizeF) interceptor.Invoke("sizeHint$#", "sizeHint(Qt::SizeHint, const QSizeF&) const", typeof(QSizeF), typeof(Qt.SizeHint), which, typeof(QSizeF), constraint);
        }
        [Q_SLOT("void fadeIn()")]
        protected void FadeIn() {
            interceptor.Invoke("fadeIn", "fadeIn()", typeof(void));
        }
        [Q_SLOT("void fadeOut()")]
        protected void FadeOut() {
            interceptor.Invoke("fadeOut", "fadeOut()", typeof(void));
        }
        ~FlashingLabel() {
            interceptor.Invoke("~FlashingLabel", "~FlashingLabel()", typeof(void));
        }
        public new void Dispose() {
            interceptor.Invoke("~FlashingLabel", "~FlashingLabel()", typeof(void));
        }
        protected new IFlashingLabelSignals Emit {
            get { return (IFlashingLabelSignals) Q_EMIT; }
        }
    }

    public interface IFlashingLabelSignals : IQGraphicsWidgetSignals {
    }
}
