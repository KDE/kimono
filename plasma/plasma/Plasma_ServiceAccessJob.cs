//Auto-generated by kalyptus. DO NOT EDIT.
namespace Plasma {
    using Plasma;
    using System;
    using Kimono;
    using Qyoto;
    /// <remarks>
    ///  @class ServiceAccessJob plasma/serviceaccessjob.h <Plasma/ServiceAccessJob>
    /// </remarks>        <short> This class is used for asynchronously accessing a job published on a remote system. After  calling AccessManager.AccessService, monitor this job to track when the remote service is ready  to be used, and to obtain the service when finished.  </short>
    [SmokeClass("Plasma::ServiceAccessJob")]
    public class ServiceAccessJob : KJob, IDisposable {
        protected ServiceAccessJob(Type dummy) : base((Type) null) {}
        protected new void CreateProxy() {
            interceptor = new SmokeInvocation(typeof(ServiceAccessJob), this);
        }
        public Plasma.Service Service() {
            return (Plasma.Service) interceptor.Invoke("service", "service() const", typeof(Plasma.Service));
        }
        /// <remarks>
        ///  Default constructor
        ///  @arg location the location of the service
        ///  @arg parent the parent object for this service
        ///      </remarks>        <short>    Default constructor </short>
        public ServiceAccessJob(KUrl location, QObject parent) : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("ServiceAccessJob##", "ServiceAccessJob(KUrl, QObject*)", typeof(void), typeof(KUrl), location, typeof(QObject), parent);
        }
        public ServiceAccessJob(KUrl location) : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("ServiceAccessJob#", "ServiceAccessJob(KUrl)", typeof(void), typeof(KUrl), location);
        }
        [SmokeMethod("start()")]
        public override void Start() {
            interceptor.Invoke("start", "start()", typeof(void));
        }
        ~ServiceAccessJob() {
            interceptor.Invoke("~ServiceAccessJob", "~ServiceAccessJob()", typeof(void));
        }
        public new void Dispose() {
            interceptor.Invoke("~ServiceAccessJob", "~ServiceAccessJob()", typeof(void));
        }
        protected new IServiceAccessJobSignals Emit {
            get { return (IServiceAccessJobSignals) Q_EMIT; }
        }
    }

    public interface IServiceAccessJobSignals : IKJobSignals {
    }
}
