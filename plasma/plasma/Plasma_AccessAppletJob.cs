//Auto-generated by kalyptus. DO NOT EDIT.
namespace Plasma {
    using Plasma;
    using System;
    using Kimono;
    using Qyoto;
    /// <remarks>
    ///  @class AccessAppletJob plasma/accessappletjob.h <Plasma/AccessAppletJob>
    /// </remarks>        <short> This class is used for asynchronously accessing an applet published on a remote system.  After calling AccessManager.AccessApplet, monitor this job to track when the remote applet  is ready to be used, and to obtain the service when finished.  </short>
    [SmokeClass("Plasma::AccessAppletJob")]
    public class AccessAppletJob : KJob, IDisposable {
        protected AccessAppletJob(Type dummy) : base((Type) null) {}
        protected new void CreateProxy() {
            interceptor = new SmokeInvocation(typeof(AccessAppletJob), this);
        }
        public Plasma.Applet Applet() {
            return (Plasma.Applet) interceptor.Invoke("applet", "applet() const", typeof(Plasma.Applet));
        }
        /// <remarks>
        ///  Default constructor
        ///  @arg location the location of the service
        ///  @arg parent the parent object for this service
        ///      </remarks>        <short>    Default constructor </short>
        public AccessAppletJob(KUrl location, QObject parent) : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("AccessAppletJob##", "AccessAppletJob(const KUrl&, QObject*)", typeof(void), typeof(KUrl), location, typeof(QObject), parent);
        }
        public AccessAppletJob(KUrl location) : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("AccessAppletJob#", "AccessAppletJob(const KUrl&)", typeof(void), typeof(KUrl), location);
        }
        [SmokeMethod("start()")]
        public override void Start() {
            interceptor.Invoke("start", "start()", typeof(void));
        }
        ~AccessAppletJob() {
            interceptor.Invoke("~AccessAppletJob", "~AccessAppletJob()", typeof(void));
        }
        public new void Dispose() {
            interceptor.Invoke("~AccessAppletJob", "~AccessAppletJob()", typeof(void));
        }
        protected new IAccessAppletJobSignals Emit {
            get { return (IAccessAppletJobSignals) Q_EMIT; }
        }
    }

    public interface IAccessAppletJobSignals : IKJobSignals {
    }
}
