//Auto-generated by kalyptus. DO NOT EDIT.
namespace Plasma {
    using Plasma;
    using System;
    using Kimono;
    using Qyoto;
    /// <remarks>
    ///  @class Animator plasma/animator.h <Plasma/Animator>
    /// </remarks>        <short> A system for applying effects to Plasma elements.</short>
    [SmokeClass("Plasma::Animator")]
    public class Animator : QObject {
        protected Animator(Type dummy) : base((Type) null) {}
        protected new void CreateProxy() {
            interceptor = new SmokeInvocation(typeof(Animator), this);
        }
        private static SmokeInvocation staticInterceptor = null;
        static Animator() {
            staticInterceptor = new SmokeInvocation(typeof(Animator), null);
        }
        public enum Animation {
            AppearAnimation = 0,
            DisappearAnimation = 1,
            ActivateAnimation = 2,
            FadeAnimation = 3,
            GrowAnimation = 4,
            PulseAnimation = 5,
            RotationAnimation = 6,
            RotationStackedAnimation = 7,
            SlideAnimation = 8,
            GeometryAnimation = 9,
            ZoomAnimation = 10,
        }
        public enum CurveShape {
            EaseInCurve = 0,
            EaseOutCurve = 1,
            EaseInOutCurve = 2,
            LinearCurve = 3,
        }
        public enum Movement {
            SlideInMovement = 0,
            SlideOutMovement = 1,
            FastSlideInMovement = 2,
            FastSlideOutMovement = 3,
        }
        /// <remarks>
        ///  Register a widget as a scrolling widget.
        ///  The widget will get animate scrolling with mouse dragging and mouse wheel.
        ///  It must provide
        ///  scrollValue, viewportGeometry and pageSize properties
        /// <param> name="widget" the widget that offers a scrolling behaviour
        /// </param></remarks>        <short>    Register a widget as a scrolling widget.</short>
        public void RegisterScrollingManager(QGraphicsWidget widget) {
            interceptor.Invoke("registerScrollingManager#", "registerScrollingManager(QGraphicsWidget*)", typeof(void), typeof(QGraphicsWidget), widget);
        }
        /// <remarks>
        ///  unregister the scrolling manager of a certain widget
        /// <param> name="widget" the widget we don't want no longer animated
        /// </param></remarks>        <short>    unregister the scrolling manager of a certain widget </short>
        public void UnregisterScrollingManager(QGraphicsWidget widget) {
            interceptor.Invoke("unregisterScrollingManager#", "unregisterScrollingManager(QGraphicsWidget*)", typeof(void), typeof(QGraphicsWidget), widget);
        }
        /// <remarks>
        ///  Factory to build new animation objects. To control their behavior,
        ///  check \ref AbstractAnimation properties.
        /// </remarks>        <short>    Factory to build new animation objects.</short>
        public static Plasma.Animation Create(Plasma.Animator.Animation type, QObject parent) {
            return (Plasma.Animation) staticInterceptor.Invoke("create$#", "create(Plasma::Animator::Animation, QObject*)", typeof(Plasma.Animation), typeof(Plasma.Animator.Animation), type, typeof(QObject), parent);
        }
        public static Plasma.Animation Create(Plasma.Animator.Animation type) {
            return (Plasma.Animation) staticInterceptor.Invoke("create$", "create(Plasma::Animator::Animation)", typeof(Plasma.Animation), typeof(Plasma.Animator.Animation), type);
        }
        protected new IAnimatorSignals Emit {
            get { return (IAnimatorSignals) Q_EMIT; }
        }
    }

    public interface IAnimatorSignals : IQObjectSignals {
    }
}
