//Auto-generated by kalyptus. DO NOT EDIT.
namespace Kimono {
    using System;
    using Qyoto;
    /// <remarks>
    ///  All the information needed by the dialog box
    ///  (program name, version, bug-report address, etc.)
    ///  comes from the KAboutData class.
    ///  Make sure you create an instance of KAboutData and pass it
    ///  to KCmdLineArgs.
    /// </remarks>        <author> David Faure <faure@kde.org>
    ///  </author>
    ///         <short> A dialog box for sending bug reports. </short>
    [SmokeClass("KBugReport")]
    public class KBugReport : KDialog, IDisposable {
        protected KBugReport(Type dummy) : base((Type) null) {}
        protected new void CreateProxy() {
            interceptor = new SmokeInvocation(typeof(KBugReport), this);
        }
        /// <remarks>
        ///  Creates a bug-report dialog.
        ///  Note that you shouldn't have to do this manually,
        ///  since KHelpMenu takes care of the menu item
        ///  for "Report Bug..." and of creating a KBugReport dialog.
        ///    </remarks>        <short>    Creates a bug-report dialog.</short>
        public KBugReport(QWidget parent, bool modal, KAboutData aboutData) : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("KBugReport#$#", "KBugReport(QWidget*, bool, const KAboutData*)", typeof(void), typeof(QWidget), parent, typeof(bool), modal, typeof(KAboutData), aboutData);
        }
        public KBugReport(QWidget parent, bool modal) : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("KBugReport#$", "KBugReport(QWidget*, bool)", typeof(void), typeof(QWidget), parent, typeof(bool), modal);
        }
        public KBugReport(QWidget parent) : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("KBugReport#", "KBugReport(QWidget*)", typeof(void), typeof(QWidget), parent);
        }
        public KBugReport() : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("KBugReport", "KBugReport()", typeof(void));
        }
        /// <remarks>
        ///  The message body of the bug report
        /// </remarks>        <return> The message body of the bug report.
        ///    </return>
        ///         <short>    The message body of the bug report </short>
        public string MessageBody() {
            return (string) interceptor.Invoke("messageBody", "messageBody() const", typeof(string));
        }
        /// <remarks>
        ///  Sets the message body of the bug report.
        ///    </remarks>        <short>    Sets the message body of the bug report.</short>
        public void SetMessageBody(string messageBody) {
            interceptor.Invoke("setMessageBody$", "setMessageBody(const QString&)", typeof(void), typeof(string), messageBody);
        }
        /// <remarks>
        ///  OK has been clicked
        ///    </remarks>        <short>    OK has been clicked    </short>
        [SmokeMethod("accept()")]
        public override void Accept() {
            interceptor.Invoke("accept", "accept()", typeof(void));
        }
        /// <remarks>
        ///  A complete copy of the bug report
        /// </remarks>        <return> string copy of the bug report.
        ///    </return>
        ///         <short>    A complete copy of the bug report </short>
        protected string Text() {
            return (string) interceptor.Invoke("text", "text() const", typeof(string));
        }
        /// <remarks>
        ///  Attempt to e-mail the bug report.
        /// </remarks>        <return> true on success
        ///    </return>
        ///         <short>    Attempt to e-mail the bug report.</short>
        protected bool SendBugReport() {
            return (bool) interceptor.Invoke("sendBugReport", "sendBugReport()", typeof(bool));
        }
        [SmokeMethod("closeEvent(QCloseEvent*)")]
        protected override void CloseEvent(QCloseEvent e) {
            interceptor.Invoke("closeEvent#", "closeEvent(QCloseEvent*)", typeof(void), typeof(QCloseEvent), e);
        }
        ~KBugReport() {
            interceptor.Invoke("~KBugReport", "~KBugReport()", typeof(void));
        }
        public new void Dispose() {
            interceptor.Invoke("~KBugReport", "~KBugReport()", typeof(void));
        }
        protected new IKBugReportSignals Emit {
            get { return (IKBugReportSignals) Q_EMIT; }
        }
    }

    public interface IKBugReportSignals : IKDialogSignals {
    }
}
