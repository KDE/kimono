//Auto-generated by kalyptus. DO NOT EDIT.
namespace Kimono {
    using System;
    using Qyoto;
    [SmokeClass("KBookmarkContextMenu")]
    public class KBookmarkContextMenu : KMenu, IDisposable {
        protected KBookmarkContextMenu(Type dummy) : base((Type) null) {}
        protected new void CreateProxy() {
            interceptor = new SmokeInvocation(typeof(KBookmarkContextMenu), this);
        }
        public KBookmarkContextMenu(KBookmark bm, KBookmarkManager manager, KBookmarkOwner owner, QWidget parent) : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("KBookmarkContextMenu####", "KBookmarkContextMenu(const KBookmark&, KBookmarkManager*, KBookmarkOwner*, QWidget*)", typeof(void), typeof(KBookmark), bm, typeof(KBookmarkManager), manager, typeof(KBookmarkOwner), owner, typeof(QWidget), parent);
        }
        public KBookmarkContextMenu(KBookmark bm, KBookmarkManager manager, KBookmarkOwner owner) : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("KBookmarkContextMenu###", "KBookmarkContextMenu(const KBookmark&, KBookmarkManager*, KBookmarkOwner*)", typeof(void), typeof(KBookmark), bm, typeof(KBookmarkManager), manager, typeof(KBookmarkOwner), owner);
        }
        [SmokeMethod("addActions()")]
        public virtual void AddActions() {
            interceptor.Invoke("addActions", "addActions()", typeof(void));
        }
        [Q_SLOT("void slotEditAt()")]
        public void SlotEditAt() {
            interceptor.Invoke("slotEditAt", "slotEditAt()", typeof(void));
        }
        [Q_SLOT("void slotProperties()")]
        public void SlotProperties() {
            interceptor.Invoke("slotProperties", "slotProperties()", typeof(void));
        }
        [Q_SLOT("void slotInsert()")]
        public void SlotInsert() {
            interceptor.Invoke("slotInsert", "slotInsert()", typeof(void));
        }
        [Q_SLOT("void slotRemove()")]
        public void SlotRemove() {
            interceptor.Invoke("slotRemove", "slotRemove()", typeof(void));
        }
        [Q_SLOT("void slotCopyLocation()")]
        public void SlotCopyLocation() {
            interceptor.Invoke("slotCopyLocation", "slotCopyLocation()", typeof(void));
        }
        [Q_SLOT("void slotOpenFolderInTabs()")]
        public void SlotOpenFolderInTabs() {
            interceptor.Invoke("slotOpenFolderInTabs", "slotOpenFolderInTabs()", typeof(void));
        }
        protected void AddBookmark() {
            interceptor.Invoke("addBookmark", "addBookmark()", typeof(void));
        }
        protected void AddFolderActions() {
            interceptor.Invoke("addFolderActions", "addFolderActions()", typeof(void));
        }
        protected void AddProperties() {
            interceptor.Invoke("addProperties", "addProperties()", typeof(void));
        }
        protected void AddBookmarkActions() {
            interceptor.Invoke("addBookmarkActions", "addBookmarkActions()", typeof(void));
        }
        protected void AddOpenFolderInTabs() {
            interceptor.Invoke("addOpenFolderInTabs", "addOpenFolderInTabs()", typeof(void));
        }
        protected KBookmarkManager Manager() {
            return (KBookmarkManager) interceptor.Invoke("manager", "manager() const", typeof(KBookmarkManager));
        }
        protected KBookmarkOwner Owner() {
            return (KBookmarkOwner) interceptor.Invoke("owner", "owner() const", typeof(KBookmarkOwner));
        }
        protected KBookmark Bookmark() {
            return (KBookmark) interceptor.Invoke("bookmark", "bookmark() const", typeof(KBookmark));
        }
        ~KBookmarkContextMenu() {
            interceptor.Invoke("~KBookmarkContextMenu", "~KBookmarkContextMenu()", typeof(void));
        }
        public new void Dispose() {
            interceptor.Invoke("~KBookmarkContextMenu", "~KBookmarkContextMenu()", typeof(void));
        }
        protected new IKBookmarkContextMenuSignals Emit {
            get { return (IKBookmarkContextMenuSignals) Q_EMIT; }
        }
    }

    public interface IKBookmarkContextMenuSignals : IKMenuSignals {
    }
}
