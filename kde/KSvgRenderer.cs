//Auto-generated by kalyptus. DO NOT EDIT.
namespace Kimono {
    using System;
    using Qyoto;
    /// <remarks>
    ///  Thin wrapper around QSvgRenderer with SVGZ support.
    ///  Please refer to the QSvgRenderer documentation for details.
    ///  </remarks>        <short>    Thin wrapper around QSvgRenderer with SVGZ support.</short>
    [SmokeClass("KSvgRenderer")]
    public class KSvgRenderer : QSvgRenderer, IDisposable {
        protected KSvgRenderer(Type dummy) : base((Type) null) {}
        protected new void CreateProxy() {
            interceptor = new SmokeInvocation(typeof(KSvgRenderer), this);
        }
        public KSvgRenderer(QObject parent) : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("KSvgRenderer#", "KSvgRenderer(QObject*)", typeof(void), typeof(QObject), parent);
        }
        public KSvgRenderer() : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("KSvgRenderer", "KSvgRenderer()", typeof(void));
        }
        public KSvgRenderer(string filename, QObject parent) : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("KSvgRenderer$#", "KSvgRenderer(const QString&, QObject*)", typeof(void), typeof(string), filename, typeof(QObject), parent);
        }
        public KSvgRenderer(string filename) : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("KSvgRenderer$", "KSvgRenderer(const QString&)", typeof(void), typeof(string), filename);
        }
        public KSvgRenderer(QByteArray contents, QObject parent) : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("KSvgRenderer##", "KSvgRenderer(const QByteArray&, QObject*)", typeof(void), typeof(QByteArray), contents, typeof(QObject), parent);
        }
        public KSvgRenderer(QByteArray contents) : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("KSvgRenderer#", "KSvgRenderer(const QByteArray&)", typeof(void), typeof(QByteArray), contents);
        }
        [Q_SLOT("bool load(QString)")]
        public new bool Load(string filename) {
            return (bool) interceptor.Invoke("load$", "load(const QString&)", typeof(bool), typeof(string), filename);
        }
        [Q_SLOT("bool load(QByteArray)")]
        public new bool Load(QByteArray contents) {
            return (bool) interceptor.Invoke("load#", "load(const QByteArray&)", typeof(bool), typeof(QByteArray), contents);
        }
        ~KSvgRenderer() {
            interceptor.Invoke("~KSvgRenderer", "~KSvgRenderer()", typeof(void));
        }
        public new void Dispose() {
            interceptor.Invoke("~KSvgRenderer", "~KSvgRenderer()", typeof(void));
        }
        protected new IKSvgRendererSignals Emit {
            get { return (IKSvgRendererSignals) Q_EMIT; }
        }
    }

    public interface IKSvgRendererSignals : IQSvgRendererSignals {
    }
}
