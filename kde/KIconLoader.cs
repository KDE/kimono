//Auto-generated by kalyptus. DO NOT EDIT.
namespace Kimono {
    using System;
    using Qyoto;
    using System.Text;
    using System.Collections.Generic;
    /// <remarks>
    ///  Iconloader for KDE.
    ///  KIconLoader will load the current icon theme and all its base themes.
    ///  Icons will be searched in any of these themes. Additionally, it caches
    ///  icons and applies effects according to the user's preferences.
    ///  In KDE, it is encouraged to load icons by "Group". An icon group is a
    ///  location on the screen where icons are being used. Standard groups are:
    ///  Desktop, Toolbar, MainToolbar, Small and Panel. Each group has some
    ///  centrally configured properties bound to it, including the icon size
    ///  and effects. This makes it possible to offer a consistent icon look in
    ///  all KDE applications.
    ///  The standard groups are defined below.
    /// 
    /// <li>
    /// KIconLoader.Desktop: Icons in the iconview of konqueror, kdesktop and similar apps.
    /// </li>
    /// 
    /// <li>
    /// KIconLoader.Toolbar: Icons in toolbars.
    /// </li>
    /// 
    /// <li>
    /// KIconLoader.MainToolbar: Icons in the main toolbars.
    /// </li>
    /// 
    /// <li>
    /// KIconLoader.Small: Various small (typical 16x16) places: titlebars, listviews
    ///  and menu entries.
    /// </li>
    /// 
    /// <li>
    /// KIconLoader.Panel: Icons in kicker's panel
    /// </li>
    ///  The icons are stored on disk in an icon theme or in a standalone
    ///  directory. The icon theme directories contain multiple sizes and/or
    ///  depths for the same icon. The iconloader will load the correct one based
    ///  on the icon group and the current theme. Icon themes are stored globally
    ///  in share/icons, or, application specific in share/apps/$appdir/icons.
    ///  The standalone directories contain just one version of an icon. The
    ///  directories that are searched are: $appdir/pics and $appdir/toolbar.
    ///  Icons in these directories can be loaded by using the special group
    ///  "User".
    ///  </remarks>        <short>    Iconloader for KDE.</short>
    [SmokeClass("KIconLoader")]
    public class KIconLoader : QObject, IDisposable {
        protected KIconLoader(Type dummy) : base((Type) null) {}
        protected new void CreateProxy() {
            interceptor = new SmokeInvocation(typeof(KIconLoader), this);
        }
        private static SmokeInvocation staticInterceptor = null;
        static KIconLoader() {
            staticInterceptor = new SmokeInvocation(typeof(KIconLoader), null);
        }
        /// <remarks>
        ///  Defines the context of the icon.
        ///      </remarks>        <short>    Defines the context of the icon.</short>
        public enum Context {
            Any = 0,
            Action = 1,
            Application = 2,
            Device = 3,
            FileSystem = 4,
            MimeType = 5,
            Animation = 6,
            Category = 7,
            Emblem = 8,
            Emote = 9,
            International = 10,
            Place = 11,
            StatusIcon = 12,
        }
        /// <remarks>
        ///  The type of the icon.
        ///      </remarks>        <short>    The type of the icon.</short>
        public enum TypeOf {
            Fixed = 0,
            Scalable = 1,
            Threshold = 2,
        }
        /// <remarks>
        ///  The type of a match.
        ///      </remarks>        <short>    The type of a match.</short>
        public enum MatchType {
            MatchExact = 0,
            MatchBest = 1,
        }
        /// <remarks>
        ///  The group of the icon.
        ///      </remarks>        <short>    The group of the icon.</short>
        public enum Group {
            NoGroup = -1,
            Desktop = 0,
            FirstGroup = 0,
            Toolbar = 1,
            MainToolbar = 2,
            Small = 3,
            Panel = 4,
            Dialog = 5,
            LastGroup = 6,
            User = 7,
        }
        /// <remarks>
        ///  These are the standard sizes for icons.
        ///      </remarks>        <short>    These are the standard sizes for icons.</short>
        public enum StdSizes {
            SizeSmall = 16,
            SizeSmallMedium = 22,
            SizeMedium = 32,
            SizeLarge = 48,
            SizeHuge = 64,
            SizeEnormous = 128,
        }
        /// <remarks>
        ///  Defines the possible states of an icon.
        ///      </remarks>        <short>    Defines the possible states of an icon.</short>
        public enum States {
            DefaultState = 0,
            ActiveState = 1,
            DisabledState = 2,
            LastState = 3,
        }
        // KIconTheme* theme(); >>>> NOT CONVERTED
        /// <remarks>
        ///  Constructs an iconloader.
        /// <param> name="appname" Add the data directories of this application to the
        ///  icon search path for the "User" group. The default argument adds the
        ///  directories of the current application.
        /// </param><param> name="dirs" the KStandardDirs object to use. If null the global one is used
        /// </param> Usually, you use the default iconloader, which can be accessed via
        ///  KIconLoader.Global(), so you hardly ever have to create an
        ///  iconloader object yourself. That one is the current KComponentData's
        ///  (typically KApplication's) iconloader.
        ///      </remarks>        <short>    Constructs an iconloader.</short>
        public KIconLoader(string appname, KStandardDirs dirs, QObject parent) : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("KIconLoader$##", "KIconLoader(const QString&, KStandardDirs*, QObject*)", typeof(void), typeof(string), appname, typeof(KStandardDirs), dirs, typeof(QObject), parent);
        }
        public KIconLoader(string appname, KStandardDirs dirs) : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("KIconLoader$#", "KIconLoader(const QString&, KStandardDirs*)", typeof(void), typeof(string), appname, typeof(KStandardDirs), dirs);
        }
        public KIconLoader(string appname) : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("KIconLoader$", "KIconLoader(const QString&)", typeof(void), typeof(string), appname);
        }
        public KIconLoader() : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("KIconLoader", "KIconLoader()", typeof(void));
        }
        /// <remarks>
        ///  Constructs an iconloader.
        /// <param> name="componentData" the KComponentData to use to create this icon loader.
        /// </param> Usually, you use the default iconloader, which can be accessed via
        ///  KIconLoader.Global(), so you hardly ever have to create an
        ///  iconloader object yourself. That one is the current KComponentData's
        ///  (typically KApplication's) iconloader.
        ///      </remarks>        <short>    Constructs an iconloader.</short>
        public KIconLoader(KComponentData componentData, QObject parent) : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("KIconLoader##", "KIconLoader(const KComponentData&, QObject*)", typeof(void), typeof(KComponentData), componentData, typeof(QObject), parent);
        }
        public KIconLoader(KComponentData componentData) : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("KIconLoader#", "KIconLoader(const KComponentData&)", typeof(void), typeof(KComponentData), componentData);
        }
        /// <remarks>
        ///  Adds <code>appname</code> to the list of application specific directories.
        /// <param> name="appname" The application name.
        ///      </param></remarks>        <short>    Adds <code>appname</code> to the list of application specific directories.</short>
        public void AddAppDir(string appname) {
            interceptor.Invoke("addAppDir$", "addAppDir(const QString&)", typeof(void), typeof(string), appname);
        }
        /// <remarks>
        ///  Loads an icon. It will try very hard to find an icon which is
        ///  suitable. If no exact match is found, a close match is searched.
        ///  If neither an exact nor a close match is found, a null pixmap or
        ///  the "unknown" pixmap is returned, depending on the value of the
        ///  <code>canReturnNull</code> parameter.
        /// <param> name="name" The name of the icon, without extension.
        /// </param><param> name="group" The icon group. This will specify the size of and effects to
        ///  be applied to the icon.
        /// </param><param> name="size" If nonzero, this overrides the size specified by <code>group.</code>
        ///              See KIconLoader.StdSizes.
        /// </param><param> name="state" The icon state: <code>DefaultState</code>, <code>ActiveState</code> or
        ///  <code>DisabledState.</code> Depending on the user's preferences, the iconloader
        ///  may apply a visual effect to hint about its state.
        /// </param><param> name="overlays" a list of emblem icons to overlay, by name. the emblem
        ///                  prefix is applied automatically to each name, e.g.
        ///                  "zip" becomes "emblem-zip"
        /// </param><param> name="path_store" If not null, the path of the icon is stored here.
        /// </param><param> name="canReturnNull" Can return a null pixmap? If false, the
        ///  "unknown" pixmap is returned when no appropriate icon has been found.
        /// </param></remarks>        <return> the QPixmap. Can be null when not found, depending on
        ///          <code>canReturnNull.</code>
        ///      </return>
        ///         <short>    Loads an icon.</short>
        public QPixmap LoadIcon(string name, KIconLoader.Group group, int size, int state, List<string> overlays, StringBuilder path_store, bool canReturnNull) {
            return (QPixmap) interceptor.Invoke("loadIcon$$$$?$$", "loadIcon(const QString&, KIconLoader::Group, int, int, const QStringList&, QString*, bool) const", typeof(QPixmap), typeof(string), name, typeof(KIconLoader.Group), group, typeof(int), size, typeof(int), state, typeof(List<string>), overlays, typeof(StringBuilder), path_store, typeof(bool), canReturnNull);
        }
        public QPixmap LoadIcon(string name, KIconLoader.Group group, int size, int state, List<string> overlays, StringBuilder path_store) {
            return (QPixmap) interceptor.Invoke("loadIcon$$$$?$", "loadIcon(const QString&, KIconLoader::Group, int, int, const QStringList&, QString*) const", typeof(QPixmap), typeof(string), name, typeof(KIconLoader.Group), group, typeof(int), size, typeof(int), state, typeof(List<string>), overlays, typeof(StringBuilder), path_store);
        }
        public QPixmap LoadIcon(string name, KIconLoader.Group group, int size, int state, List<string> overlays) {
            return (QPixmap) interceptor.Invoke("loadIcon$$$$?", "loadIcon(const QString&, KIconLoader::Group, int, int, const QStringList&) const", typeof(QPixmap), typeof(string), name, typeof(KIconLoader.Group), group, typeof(int), size, typeof(int), state, typeof(List<string>), overlays);
        }
        public QPixmap LoadIcon(string name, KIconLoader.Group group, int size, int state) {
            return (QPixmap) interceptor.Invoke("loadIcon$$$$", "loadIcon(const QString&, KIconLoader::Group, int, int) const", typeof(QPixmap), typeof(string), name, typeof(KIconLoader.Group), group, typeof(int), size, typeof(int), state);
        }
        public QPixmap LoadIcon(string name, KIconLoader.Group group, int size) {
            return (QPixmap) interceptor.Invoke("loadIcon$$$", "loadIcon(const QString&, KIconLoader::Group, int) const", typeof(QPixmap), typeof(string), name, typeof(KIconLoader.Group), group, typeof(int), size);
        }
        public QPixmap LoadIcon(string name, KIconLoader.Group group) {
            return (QPixmap) interceptor.Invoke("loadIcon$$", "loadIcon(const QString&, KIconLoader::Group) const", typeof(QPixmap), typeof(string), name, typeof(KIconLoader.Group), group);
        }
        /// <remarks>
        ///  Loads an icon for a mimetype.
        ///  This is basically like loadIcon except that extra desktop themes are loaded if necessary.
        /// <param> name="iconName" The name of the icon, without extension, usually from KMimeType.
        /// </param><param> name="group" The icon group. This will specify the size of and effects to
        ///  be applied to the icon.
        /// </param><param> name="size" If nonzero, this overrides the size specified by <code>group.</code>
        ///              See KIconLoader.StdSizes.
        /// </param><param> name="state" The icon state: <code>DefaultState</code>, <code>ActiveState</code> or
        ///  <code>DisabledState.</code> Depending on the user's preferences, the iconloader
        ///  may apply a visual effect to hint about its state.
        /// </param><param> name="path_store" If not null, the path of the icon is stored here.
        /// </param><param> name="overlays" a list of emblem icons to overlay, by name. the emblem
        ///                  prefix is applied automatically to each name, e.g.
        ///                  "zip" becomes "emblem-zip"
        /// </param></remarks>        <return> the QPixmap. Can not be null, the
        ///  "unknown" pixmap is returned when no appropriate icon has been found.
        ///      </return>
        ///         <short>    Loads an icon for a mimetype.</short>
        public QPixmap LoadMimeTypeIcon(string iconName, KIconLoader.Group group, int size, int state, List<string> overlays, StringBuilder path_store) {
            return (QPixmap) interceptor.Invoke("loadMimeTypeIcon$$$$?$", "loadMimeTypeIcon(const QString&, KIconLoader::Group, int, int, const QStringList&, QString*) const", typeof(QPixmap), typeof(string), iconName, typeof(KIconLoader.Group), group, typeof(int), size, typeof(int), state, typeof(List<string>), overlays, typeof(StringBuilder), path_store);
        }
        public QPixmap LoadMimeTypeIcon(string iconName, KIconLoader.Group group, int size, int state, List<string> overlays) {
            return (QPixmap) interceptor.Invoke("loadMimeTypeIcon$$$$?", "loadMimeTypeIcon(const QString&, KIconLoader::Group, int, int, const QStringList&) const", typeof(QPixmap), typeof(string), iconName, typeof(KIconLoader.Group), group, typeof(int), size, typeof(int), state, typeof(List<string>), overlays);
        }
        public QPixmap LoadMimeTypeIcon(string iconName, KIconLoader.Group group, int size, int state) {
            return (QPixmap) interceptor.Invoke("loadMimeTypeIcon$$$$", "loadMimeTypeIcon(const QString&, KIconLoader::Group, int, int) const", typeof(QPixmap), typeof(string), iconName, typeof(KIconLoader.Group), group, typeof(int), size, typeof(int), state);
        }
        public QPixmap LoadMimeTypeIcon(string iconName, KIconLoader.Group group, int size) {
            return (QPixmap) interceptor.Invoke("loadMimeTypeIcon$$$", "loadMimeTypeIcon(const QString&, KIconLoader::Group, int) const", typeof(QPixmap), typeof(string), iconName, typeof(KIconLoader.Group), group, typeof(int), size);
        }
        public QPixmap LoadMimeTypeIcon(string iconName, KIconLoader.Group group) {
            return (QPixmap) interceptor.Invoke("loadMimeTypeIcon$$", "loadMimeTypeIcon(const QString&, KIconLoader::Group) const", typeof(QPixmap), typeof(string), iconName, typeof(KIconLoader.Group), group);
        }
        /// <remarks>
        ///  Returns the path of an icon.
        /// <param> name="name" The name of the icon, without extension. If an absolute
        ///  path is supplied for this parameter, iconPath will return it
        ///  directly.
        /// </param><param> name="group_or_size" If positive, search icons whose size is
        ///  specified by the icon group <code>group_or_size.</code> If negative, search
        ///  icons whose size is - <code>group_or_size.</code>
        ///              See KIconLoader.Group and KIconLoader.StdSizes
        /// </param><param> name="canReturnNull" Can return a null string? If not, a path to the
        ///                       "unknown" icon will be returned.
        /// </param></remarks>        <return> the path of an icon, can be null or the "unknown" icon when
        ///          not found, depending on <code>canReturnNull.</code>
        ///      </return>
        ///         <short>    Returns the path of an icon.</short>
        public string IconPath(string name, int group_or_size, bool canReturnNull) {
            return (string) interceptor.Invoke("iconPath$$$", "iconPath(const QString&, int, bool) const", typeof(string), typeof(string), name, typeof(int), group_or_size, typeof(bool), canReturnNull);
        }
        public string IconPath(string name, int group_or_size) {
            return (string) interceptor.Invoke("iconPath$$", "iconPath(const QString&, int) const", typeof(string), typeof(string), name, typeof(int), group_or_size);
        }
        /// <remarks>
        ///  Loads an animated icon.
        /// <param> name="name" The name of the icon.
        /// </param><param> name="group" The icon group. See loadIcon().
        /// </param><param> name="size" Override the default size for <code>group.</code>
        ///              See KIconLoader.StdSizes.
        /// </param><param> name="parent" The parent object of the returned QMovie.
        /// </param></remarks>        <return> A QMovie object. Can be null if not found or not valid.
        ///          Ownership is passed to the caller.
        ///      </return>
        ///         <short>    Loads an animated icon.</short>
        public QMovie LoadMovie(string name, KIconLoader.Group group, int size, QObject parent) {
            return (QMovie) interceptor.Invoke("loadMovie$$$#", "loadMovie(const QString&, KIconLoader::Group, int, QObject*) const", typeof(QMovie), typeof(string), name, typeof(KIconLoader.Group), group, typeof(int), size, typeof(QObject), parent);
        }
        public QMovie LoadMovie(string name, KIconLoader.Group group, int size) {
            return (QMovie) interceptor.Invoke("loadMovie$$$", "loadMovie(const QString&, KIconLoader::Group, int) const", typeof(QMovie), typeof(string), name, typeof(KIconLoader.Group), group, typeof(int), size);
        }
        public QMovie LoadMovie(string name, KIconLoader.Group group) {
            return (QMovie) interceptor.Invoke("loadMovie$$", "loadMovie(const QString&, KIconLoader::Group) const", typeof(QMovie), typeof(string), name, typeof(KIconLoader.Group), group);
        }
        /// <remarks>
        ///  Returns the path to an animated icon.
        /// <param> name="name" The name of the icon.
        /// </param><param> name="group" The icon group. See loadIcon().
        /// </param><param> name="size" Override the default size for <code>group.</code>
        ///              See KIconLoader.StdSizes.
        /// </param></remarks>        <return> the full path to the movie, ready to be passed to QMovie's constructor.
        ///  Empty string if not found.
        ///      </return>
        ///         <short>    Returns the path to an animated icon.</short>
        public string MoviePath(string name, KIconLoader.Group group, int size) {
            return (string) interceptor.Invoke("moviePath$$$", "moviePath(const QString&, KIconLoader::Group, int) const", typeof(string), typeof(string), name, typeof(KIconLoader.Group), group, typeof(int), size);
        }
        public string MoviePath(string name, KIconLoader.Group group) {
            return (string) interceptor.Invoke("moviePath$$", "moviePath(const QString&, KIconLoader::Group) const", typeof(string), typeof(string), name, typeof(KIconLoader.Group), group);
        }
        /// <remarks>
        ///  Loads an animated icon as a series of still frames. If you want to load
        ///  a .mng animation as QMovie instead, please use loadMovie() instead.
        /// <param> name="name" The name of the icon.
        /// </param><param> name="group" The icon group. See loadIcon().
        /// </param><param> name="size" Override the default size for <code>group.</code>
        ///              See KIconLoader.StdSizes.
        /// </param></remarks>        <return> A List<string> containing the absolute path of all the frames
        ///  making up the animation.
        ///      </return>
        ///         <short>    Loads an animated icon as a series of still frames.</short>
        public List<string> LoadAnimated(string name, KIconLoader.Group group, int size) {
            return (List<string>) interceptor.Invoke("loadAnimated$$$", "loadAnimated(const QString&, KIconLoader::Group, int) const", typeof(List<string>), typeof(string), name, typeof(KIconLoader.Group), group, typeof(int), size);
        }
        public List<string> LoadAnimated(string name, KIconLoader.Group group) {
            return (List<string>) interceptor.Invoke("loadAnimated$$", "loadAnimated(const QString&, KIconLoader::Group) const", typeof(List<string>), typeof(string), name, typeof(KIconLoader.Group), group);
        }
        /// <remarks>
        ///  Queries all available icons for a specific group, having a specific
        ///  context.
        /// <param> name="group_or_size" If positive, search icons whose size is
        ///  specified by the icon group <code>group_or_size.</code> If negative, search
        ///  icons whose size is - <code>group_or_size.</code>
        ///              See KIconLoader.Group and KIconLoader.StdSizes
        /// </param><param> name="context" The icon context.
        /// </param></remarks>        <return> a list of all icons
        ///      </return>
        ///         <short>    Queries all available icons for a specific group, having a specific  context.</short>
        public List<string> QueryIcons(int group_or_size, KIconLoader.Context context) {
            return (List<string>) interceptor.Invoke("queryIcons$$", "queryIcons(int, KIconLoader::Context) const", typeof(List<string>), typeof(int), group_or_size, typeof(KIconLoader.Context), context);
        }
        public List<string> QueryIcons(int group_or_size) {
            return (List<string>) interceptor.Invoke("queryIcons$", "queryIcons(int) const", typeof(List<string>), typeof(int), group_or_size);
        }
        /// <remarks>
        ///  Queries all available icons for a specific context.
        /// <param> name="group_or_size" The icon preferred group or size. If available
        ///  at this group or size, those icons will be returned, in other case,
        ///  icons of undefined size will be returned. Positive numbers are groups,
        ///  negative numbers are negated sizes. See KIconLoader.Group and
        ///  KIconLoader.StdSizes
        /// </param><param> name="context" The icon context.
        /// </param></remarks>        <return> A List<string> containing the icon names
        ///  available for that context
        ///      </return>
        ///         <short>    Queries all available icons for a specific context.</short>
        public List<string> QueryIconsByContext(int group_or_size, KIconLoader.Context context) {
            return (List<string>) interceptor.Invoke("queryIconsByContext$$", "queryIconsByContext(int, KIconLoader::Context) const", typeof(List<string>), typeof(int), group_or_size, typeof(KIconLoader.Context), context);
        }
        public List<string> QueryIconsByContext(int group_or_size) {
            return (List<string>) interceptor.Invoke("queryIconsByContext$", "queryIconsByContext(int) const", typeof(List<string>), typeof(int), group_or_size);
        }
        /// <remarks>
        ///      </remarks>        <short>   </short>
        public bool HasContext(KIconLoader.Context context) {
            return (bool) interceptor.Invoke("hasContext$", "hasContext(KIconLoader::Context) const", typeof(bool), typeof(KIconLoader.Context), context);
        }
        /// <remarks>
        ///  Returns a list of all icons (.png or .xpm extension) in the
        ///  given directory.
        /// <param> name="iconsDir" the directory to search in
        /// </param></remarks>        <return> A List<string> containing the icon paths
        ///      </return>
        ///         <short>    Returns a list of all icons ( .</short>
        public List<string> QueryIconsByDir(string iconsDir) {
            return (List<string>) interceptor.Invoke("queryIconsByDir$", "queryIconsByDir(const QString&) const", typeof(List<string>), typeof(string), iconsDir);
        }
        /// <remarks>
        ///  Returns the current size of the group.
        /// <param> name="group" the group to check.
        /// </param></remarks>        <return> the current size for an icon group.
        ///      </return>
        ///         <short>    Returns the current size of the group.</short>
        public int CurrentSize(KIconLoader.Group group) {
            return (int) interceptor.Invoke("currentSize$", "currentSize(KIconLoader::Group) const", typeof(int), typeof(KIconLoader.Group), group);
        }
        /// <remarks>
        ///  Returns a pointer to the current theme. Can be used to query
        ///  available and default sizes for groups.
        ///  @note The KIconTheme will change if reconfigure() is called and
        ///  therefore it's not recommed to store the pointer somewhere.
        /// </remarks>        <return> a pointer to the current theme. 0 if no theme set.
        ///      </return>
        ///         <short>    Returns a pointer to the current theme.</short>
        /// <remarks>
        ///  Returns a pointer to the KIconEffect object used by the icon loader.
        /// </remarks>        <return> the KIconEffect.
        ///      </return>
        ///         <short>    Returns a pointer to the KIconEffect object used by the icon loader.</short>
        public KIconEffect IconEffect() {
            return (KIconEffect) interceptor.Invoke("iconEffect", "iconEffect() const", typeof(KIconEffect));
        }
        /// <remarks>
        ///  Called by KComponentData.NewIconLoader to reconfigure the icon loader.
        /// <param> name="_appname" the new application name
        /// </param><param> name="_dirs" the new standard directories. If 0, the directories
        ///               from KGlobal will be taken.
        ///      </param></remarks>        <short>    Called by KComponentData.NewIconLoader to reconfigure the icon loader.</short>
        public void Reconfigure(string _appname, KStandardDirs _dirs) {
            interceptor.Invoke("reconfigure$#", "reconfigure(const QString&, KStandardDirs*)", typeof(void), typeof(string), _appname, typeof(KStandardDirs), _dirs);
        }
        /// <remarks>
        ///  Adds all the default themes from other desktops at the end of
        ///  the list of icon themes.
        ///      </remarks>        <short>    Adds all the default themes from other desktops at the end of  the list of icon themes.</short>
        public void AddExtraDesktopThemes() {
            interceptor.Invoke("addExtraDesktopThemes", "addExtraDesktopThemes()", typeof(void));
        }
        /// <remarks>
        ///  Returns if the default icon themes of other desktops have been added
        ///  to the list of icon themes where icons are searched.
        ///      </remarks>        <short>    Returns if the default icon themes of other desktops have been added  to the list of icon themes where icons are searched.</short>
        public bool ExtraDesktopThemesAdded() {
            return (bool) interceptor.Invoke("extraDesktopThemesAdded", "extraDesktopThemesAdded() const", typeof(bool));
        }
        /// <remarks>
        ///  Re-initialize the global icon loader
        ///     </remarks>        <short>    Re-initialize the global icon loader     </short>
        [Q_SLOT("void newIconLoader()")]
        public void NewIconLoader() {
            interceptor.Invoke("newIconLoader", "newIconLoader()", typeof(void));
        }
        ~KIconLoader() {
            interceptor.Invoke("~KIconLoader", "~KIconLoader()", typeof(void));
        }
        public new void Dispose() {
            interceptor.Invoke("~KIconLoader", "~KIconLoader()", typeof(void));
        }
        /// <remarks>
        ///  Returns the global icon loader initialized with the global KComponentData.
        ///  Therefore you must have a KComponentData instantiated before calling this.
        /// </remarks>        <return> global icon loader
        ///      </return>
        ///         <short>    Returns the global icon loader initialized with the global KComponentData.</short>
        public static KIconLoader Global() {
            return (KIconLoader) staticInterceptor.Invoke("global", "global()", typeof(KIconLoader));
        }
        /// <remarks>
        ///  Returns the unknown icon. An icon that is used when no other icon
        ///  can be found.
        /// </remarks>        <return> the unknown pixmap
        ///      </return>
        ///         <short>    Returns the unknown icon.</short>
        public static QPixmap Unknown() {
            return (QPixmap) staticInterceptor.Invoke("unknown", "unknown()", typeof(QPixmap));
        }
        protected new IKIconLoaderSignals Emit {
            get { return (IKIconLoaderSignals) Q_EMIT; }
        }
    }

    public interface IKIconLoaderSignals : IQObjectSignals {
    }
}
