//Auto-generated by kalyptus. DO NOT EDIT.
namespace Kimono {
    using System;
    using Qyoto;
    /// <remarks>
    ///  Dialog in which a user can enter a filename or url. It is a dialog
    ///  encapsulating KUrlRequester. The API is derived from
    ///  KFileDialog.
    /// </remarks>        <author> Wilco Greven <greven@kde.org>
    ///  </author>
    ///         <short> Simple dialog to enter a filename/url. </short>
    [SmokeClass("KUrlRequesterDialog")]
    public class KUrlRequesterDialog : KDialog, IDisposable {
        protected KUrlRequesterDialog(Type dummy) : base((Type) null) {}
        protected new void CreateProxy() {
            interceptor = new SmokeInvocation(typeof(KUrlRequesterDialog), this);
        }
        private static SmokeInvocation staticInterceptor = null;
        static KUrlRequesterDialog() {
            staticInterceptor = new SmokeInvocation(typeof(KUrlRequesterDialog), null);
        }
        /// <remarks>
        ///  Constructs a KUrlRequesterDialog.
        /// <param> name="url" The url of the directory to start in. Use string()
        ///                to start in the current working directory, or the last
        ///                directory where a file has been selected.
        /// </param><param> name="parent" The parent object of this widget.
        ///      </param></remarks>        <short>    Constructs a KUrlRequesterDialog.</short>
        public KUrlRequesterDialog(string url, QWidget parent) : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("KUrlRequesterDialog$#", "KUrlRequesterDialog(const QString&, QWidget*)", typeof(void), typeof(string), url, typeof(QWidget), parent);
        }
        public KUrlRequesterDialog(string url) : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("KUrlRequesterDialog$", "KUrlRequesterDialog(const QString&)", typeof(void), typeof(string), url);
        }
        /// <remarks>
        ///  Constructs a KUrlRequesterDialog.
        /// <param> name="url" The url of the directory to start in. Use string()
        ///                to start in the current working directory, or the last
        ///                directory where a file has been selected.
        /// </param><param> name="text" Text of the label
        /// </param><param> name="parent" The parent object of this widget.
        ///      </param></remarks>        <short>    Constructs a KUrlRequesterDialog.</short>
        public KUrlRequesterDialog(string url, string text, QWidget parent) : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("KUrlRequesterDialog$$#", "KUrlRequesterDialog(const QString&, const QString&, QWidget*)", typeof(void), typeof(string), url, typeof(string), text, typeof(QWidget), parent);
        }
        /// <remarks>
        ///  Returns the fully qualified filename.
        ///      </remarks>        <short>    Returns the fully qualified filename.</short>
        public KUrl SelectedUrl() {
            return (KUrl) interceptor.Invoke("selectedUrl", "selectedUrl() const", typeof(KUrl));
        }
        /// <remarks>
        ///  Returns a pointer to the file dialog used by the KUrlRequester.
        ///      </remarks>        <short>    Returns a pointer to the file dialog used by the KUrlRequester.</short>
        public KFileDialog FileDialog() {
            return (KFileDialog) interceptor.Invoke("fileDialog", "fileDialog()", typeof(KFileDialog));
        }
        /// <remarks>
        ///  Returns a pointer to the KUrlRequester.
        ///      </remarks>        <short>    Returns a pointer to the KUrlRequester.</short>
        public KUrlRequester UrlRequester() {
            return (KUrlRequester) interceptor.Invoke("urlRequester", "urlRequester()", typeof(KUrlRequester));
        }
        ~KUrlRequesterDialog() {
            interceptor.Invoke("~KUrlRequesterDialog", "~KUrlRequesterDialog()", typeof(void));
        }
        public new void Dispose() {
            interceptor.Invoke("~KUrlRequesterDialog", "~KUrlRequesterDialog()", typeof(void));
        }
        /// <remarks>
        ///  Creates a modal dialog, executes it and returns the selected URL.
        /// <param> name="url" This specifies the initial path of the input line.
        /// </param><param> name="parent" The widget the dialog will be centered on initially.
        /// </param><param> name="caption" The caption to use for the dialog.
        ///      </param></remarks>        <short>    Creates a modal dialog, executes it and returns the selected URL.</short>
        public static KUrl GetUrl(string url, QWidget parent, string caption) {
            return (KUrl) staticInterceptor.Invoke("getUrl$#$", "getUrl(const QString&, QWidget*, const QString&)", typeof(KUrl), typeof(string), url, typeof(QWidget), parent, typeof(string), caption);
        }
        public static KUrl GetUrl(string url, QWidget parent) {
            return (KUrl) staticInterceptor.Invoke("getUrl$#", "getUrl(const QString&, QWidget*)", typeof(KUrl), typeof(string), url, typeof(QWidget), parent);
        }
        public static KUrl GetUrl(string url) {
            return (KUrl) staticInterceptor.Invoke("getUrl$", "getUrl(const QString&)", typeof(KUrl), typeof(string), url);
        }
        public static KUrl GetUrl() {
            return (KUrl) staticInterceptor.Invoke("getUrl", "getUrl()", typeof(KUrl));
        }
        protected new IKUrlRequesterDialogSignals Emit {
            get { return (IKUrlRequesterDialogSignals) Q_EMIT; }
        }
    }

    public interface IKUrlRequesterDialogSignals : IKDialogSignals {
    }
}
