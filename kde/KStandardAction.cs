//Auto-generated by kalyptus. DO NOT EDIT.
namespace Kimono {
    using System;
    using Qyoto;
    using System.Collections.Generic;
    /// <remarks>
    ///  Convenience methods to access all standard KDE actions.
    ///  These actions should be used instead of hardcoding menubar and
    ///  toolbar items.  Using these actions helps your application easily
    ///  conform to the KDE UI Style Guide
    ///  All of the documentation for KAction holds for KStandardAction
    ///  also.  When in doubt on how things work, check the KAction
    ///  documention first.
    ///  Please note that calling any of these methods automatically adds the action
    ///  to the actionCollection() of the QObject given by the 'parent' parameter.
    ///  <li><b>Simple Example:</b></li>
    ///  In general, using standard actions should be a drop in replacement
    ///  for regular actions.  For example, if you previously had:
    ///  <pre>
    ///  KAction newAct = new KAction(i18n("&New"), KIcon("document-new"),
    ///                                KStandardShortcut.Shortcut(KStandardShortcut.New), this,
    ///                                SLOT("fileNew()"), actionCollection());
    ///  </pre>
    ///  You could drop that and replace it with:
    ///  <pre>
    ///  KAction newAct = KStandardAction.OpenNew(this, SLOT("fileNew()"),
    ///                                        actionCollection());
    ///  </pre>
    ///  <li><b>Non-standard Usages</b></li>
    ///  It is possible to use the standard actions in various
    ///  non-recommended ways.  Say, for instance, you wanted to have a
    ///  standard action (with the associated correct text and icon and
    ///  accelerator, etc) but you didn't want it to go in the standard
    ///  place (this is not recommended, by the way).  One way to do this is
    ///  to simply not use the XML UI framework and plug it into wherever
    ///  you want.  If you do want to use the XML UI framework (good!), then
    ///  it is still possible.
    ///  Basically, the XML building code matches names in the XML code with
    ///  the internal names of the actions.  You can find out the internal
    ///  names of each of the standard actions by using the name
    ///  method like so: KStandardAction.Name(KStandardAction.Cut) would return
    ///  'edit_cut'.  The XML building code will match 'edit_cut' to the
    ///  attribute in the global XML file and place your action there.
    ///  However, you can change the internal name.  In this example, just
    ///  do something like:
    ///  <pre>
    ///  KStandardAction.Cut(this, SLOT("editCut()"), actionCollection(), "my_cut");
    ///  </pre>
    ///  Now, in your local XML resource file (e.g., yourappui.rc), simply
    ///  put 'my_cut' where you want it to go.
    ///  Another non-standard usage concerns getting a pointer to an
    ///  existing action if, say, you want to enable or disable the action.
    ///  You could do it the recommended way and just grab a pointer when
    ///  you instantiate it as in the 'openNew' example above... or you
    ///  could do it the hard way:
    ///  <pre>
    ///  KAction cut = actionCollection().Action(KStandardAction.Name(KStandardAction.Cut));
    ///  </pre>
    ///  Another non-standard usage concerns instantiating the action in the
    ///  first place.  Usually, you would use the member functions as
    ///  shown above (e.g., KStandardAction.Cut(this, SLOT, parent)).  You
    ///  may, however, do this using the enums provided.  This author can't
    ///  think of a reason why you would want to, but, hey, if you do,
    ///  here's how:
    ///  <pre>
    ///  KStandardAction.Action(KStandardAction.New, this, SLOT("fileNew()"), actionCollection());
    ///  KStandardAction.Action(KStandardAction.Cut, this, SLOT("editCut()"), actionCollection());
    ///  </pre>
    /// </remarks>        <author> Kurt Granroth <granroth@kde.org>
    ///  </author>
    ///         <short>    Convenience methods to access all standard KDE actions.</short>
    ///         <see> http://developer.kde.org/documentation/standards/kde/style/basics/index.html</see>
    [SmokeClass("KStandardAction")]
    public class KStandardAction {
        private static SmokeInvocation staticInterceptor = null;
        static KStandardAction() {
            staticInterceptor = new SmokeInvocation(typeof(KStandardAction), null);
        }
        /// <remarks>
        ///  The standard menubar and toolbar actions.
        ///    </remarks>        <short>    The standard menubar and toolbar actions.</short>
        public enum StandardAction {
            ActionNone = 0,
            New = 1,
            Open = 2,
            OpenRecent = 3,
            Save = 4,
            SaveAs = 5,
            Revert = 6,
            Close = 7,
            Print = 8,
            PrintPreview = 9,
            Mail = 10,
            Quit = 11,
            Undo = 12,
            Redo = 13,
            Cut = 14,
            Copy = 15,
            Paste = 16,
            SelectAll = 17,
            Deselect = 18,
            Find = 19,
            FindNext = 20,
            FindPrev = 21,
            Replace = 22,
            ActualSize = 23,
            FitToPage = 24,
            FitToWidth = 25,
            FitToHeight = 26,
            ZoomIn = 27,
            ZoomOut = 28,
            Zoom = 29,
            Redisplay = 30,
            Up = 31,
            Back = 32,
            Forward = 33,
            Home = 34,
            Prior = 35,
            Next = 36,
            Goto = 37,
            GotoPage = 38,
            GotoLine = 39,
            FirstPage = 40,
            LastPage = 41,
            DocumentBack = 42,
            DocumentForward = 43,
            AddBookmark = 44,
            EditBookmarks = 45,
            Spelling = 46,
            ShowMenubar = 47,
            ShowToolbar = 48,
            ShowStatusbar = 49,
            SaveOptions = 50,
            KeyBindings = 51,
            Preferences = 52,
            ConfigureToolbars = 53,
            Help = 54,
            HelpContents = 55,
            WhatsThis = 56,
            ReportBug = 57,
            AboutApp = 58,
            AboutKDE = 59,
            TipofDay = 60,
            ConfigureNotifications = 61,
            FullScreen = 62,
            Clear = 63,
            PasteText = 64,
            SwitchApplicationLanguage = 65,
        }
        /// <remarks>
        ///  Creates an action corresponding to the
        ///  KStandardAction.StandardAction enum.
        ///    </remarks>        <short>    Creates an action corresponding to the  KStandardAction.StandardAction enum.</short>
        public static KAction Create(KStandardAction.StandardAction id, QObject recvr, string slot, QObject parent) {
            return (KAction) staticInterceptor.Invoke("create$#$#", "create(KStandardAction::StandardAction, const QObject*, const char*, QObject*)", typeof(KAction), typeof(KStandardAction.StandardAction), id, typeof(QObject), recvr, typeof(string), slot, typeof(QObject), parent);
        }
        /// <remarks>
        ///  This will return the internal name of a given standard action.
        ///    </remarks>        <short>    This will return the internal name of a given standard action.</short>
        public static string Name(KStandardAction.StandardAction id) {
            return (string) staticInterceptor.Invoke("name$", "name(KStandardAction::StandardAction)", typeof(string), typeof(KStandardAction.StandardAction), id);
        }
        /// <remarks>
        ///  Returns a list of all standard names. Used by KAccelManager
        ///  to give those heigher weight.
        ///    </remarks>        <short>    Returns a list of all standard names.</short>
        public static List<string> StdNames() {
            return (List<string>) staticInterceptor.Invoke("stdNames", "stdNames()", typeof(List<string>));
        }
        /// <remarks>
        ///  Returns a list of all actionIds.
        /// </remarks>        <short>    Returns a list of all actionIds.</short>
        public static List<KStandardAction.StandardAction> ActionIds() {
            return (List<KStandardAction.StandardAction>) staticInterceptor.Invoke("actionIds", "actionIds()", typeof(List<KStandardAction.StandardAction>));
        }
        /// <remarks>
        ///  Returns the standardshortcut associated with <b>actionId</b>.
        /// <param> name="actionId" The actionId whose associated shortcut is wanted.
        /// </param></remarks>        <short>    Returns the standardshortcut associated with <b>actionId</b>.</short>
        public static KStandardShortcut.StandardShortcut ShortcutForActionId(KStandardAction.StandardAction id) {
            return (KStandardShortcut.StandardShortcut) staticInterceptor.Invoke("shortcutForActionId$", "shortcutForActionId(KStandardAction::StandardAction)", typeof(KStandardShortcut.StandardShortcut), typeof(KStandardAction.StandardAction), id);
        }
        /// <remarks>
        ///  Create a new document or window.
        ///    </remarks>        <short>    Create a new document or window.</short>
        public static KAction OpenNew(QObject recvr, string slot, QObject parent) {
            return (KAction) staticInterceptor.Invoke("openNew#$#", "openNew(const QObject*, const char*, QObject*)", typeof(KAction), typeof(QObject), recvr, typeof(string), slot, typeof(QObject), parent);
        }
        /// <remarks>
        ///  Open an existing file.
        ///    </remarks>        <short>    Open an existing file.</short>
        public static KAction Open(QObject recvr, string slot, QObject parent) {
            return (KAction) staticInterceptor.Invoke("open#$#", "open(const QObject*, const char*, QObject*)", typeof(KAction), typeof(QObject), recvr, typeof(string), slot, typeof(QObject), parent);
        }
        /// <remarks>
        ///  Open a recently used document. The signature of the slot being called
        ///  is of the form slotURLSelected( KUrl ).
        /// <param> name="recvr" object to receive slot
        /// </param><param> name="slot" The SLOT to invoke when a URL is selected. The slot's
        ///  signature is slotURLSelected( KUrl ).
        /// </param><param> name="parent" parent widget
        ///    </param></remarks>        <short>    Open a recently used document.</short>
        public static KRecentFilesAction OpenRecent(QObject recvr, string slot, QObject parent) {
            return (KRecentFilesAction) staticInterceptor.Invoke("openRecent#$#", "openRecent(const QObject*, const char*, QObject*)", typeof(KRecentFilesAction), typeof(QObject), recvr, typeof(string), slot, typeof(QObject), parent);
        }
        /// <remarks>
        ///  Save the current document.
        ///    </remarks>        <short>    Save the current document.</short>
        public static KAction Save(QObject recvr, string slot, QObject parent) {
            return (KAction) staticInterceptor.Invoke("save#$#", "save(const QObject*, const char*, QObject*)", typeof(KAction), typeof(QObject), recvr, typeof(string), slot, typeof(QObject), parent);
        }
        /// <remarks>
        ///  Save the current document under a different name.
        ///    </remarks>        <short>    Save the current document under a different name.</short>
        public static KAction SaveAs(QObject recvr, string slot, QObject parent) {
            return (KAction) staticInterceptor.Invoke("saveAs#$#", "saveAs(const QObject*, const char*, QObject*)", typeof(KAction), typeof(QObject), recvr, typeof(string), slot, typeof(QObject), parent);
        }
        /// <remarks>
        ///  Revert the current document to the last saved version
        ///  (essentially will undo all changes).
        ///    </remarks>        <short>    Revert the current document to the last saved version  (essentially will undo all changes).</short>
        public static KAction Revert(QObject recvr, string slot, QObject parent) {
            return (KAction) staticInterceptor.Invoke("revert#$#", "revert(const QObject*, const char*, QObject*)", typeof(KAction), typeof(QObject), recvr, typeof(string), slot, typeof(QObject), parent);
        }
        /// <remarks>
        ///  Close the current document.
        ///    </remarks>        <short>    Close the current document.</short>
        public static KAction Close(QObject recvr, string slot, QObject parent) {
            return (KAction) staticInterceptor.Invoke("close#$#", "close(const QObject*, const char*, QObject*)", typeof(KAction), typeof(QObject), recvr, typeof(string), slot, typeof(QObject), parent);
        }
        /// <remarks>
        ///  Print the current document.
        ///    </remarks>        <short>    Print the current document.</short>
        public static KAction Print(QObject recvr, string slot, QObject parent) {
            return (KAction) staticInterceptor.Invoke("print#$#", "print(const QObject*, const char*, QObject*)", typeof(KAction), typeof(QObject), recvr, typeof(string), slot, typeof(QObject), parent);
        }
        /// <remarks>
        ///  Show a print preview of the current document.
        ///    </remarks>        <short>    Show a print preview of the current document.</short>
        public static KAction PrintPreview(QObject recvr, string slot, QObject parent) {
            return (KAction) staticInterceptor.Invoke("printPreview#$#", "printPreview(const QObject*, const char*, QObject*)", typeof(KAction), typeof(QObject), recvr, typeof(string), slot, typeof(QObject), parent);
        }
        /// <remarks>
        ///  Mail this document.
        ///    </remarks>        <short>    Mail this document.</short>
        public static KAction Mail(QObject recvr, string slot, QObject parent) {
            return (KAction) staticInterceptor.Invoke("mail#$#", "mail(const QObject*, const char*, QObject*)", typeof(KAction), typeof(QObject), recvr, typeof(string), slot, typeof(QObject), parent);
        }
        /// <remarks>
        ///  Quit the program.
        ///  Note that you probably want to connect this action to either QWidget.Close()
        ///  or QApplication.CloseAllWindows(), but not QApplication.Quit(), so that
        ///  KMainWindow.QueryClose() is called on any open window (to warn the user
        ///  about unsaved changes for example).
        ///    </remarks>        <short>    Quit the program.</short>
        public static KAction Quit(QObject recvr, string slot, QObject parent) {
            return (KAction) staticInterceptor.Invoke("quit#$#", "quit(const QObject*, const char*, QObject*)", typeof(KAction), typeof(QObject), recvr, typeof(string), slot, typeof(QObject), parent);
        }
        /// <remarks>
        ///  Undo the last operation.
        ///    </remarks>        <short>    Undo the last operation.</short>
        public static KAction Undo(QObject recvr, string slot, QObject parent) {
            return (KAction) staticInterceptor.Invoke("undo#$#", "undo(const QObject*, const char*, QObject*)", typeof(KAction), typeof(QObject), recvr, typeof(string), slot, typeof(QObject), parent);
        }
        /// <remarks>
        ///  Redo the last operation.
        ///    </remarks>        <short>    Redo the last operation.</short>
        public static KAction Redo(QObject recvr, string slot, QObject parent) {
            return (KAction) staticInterceptor.Invoke("redo#$#", "redo(const QObject*, const char*, QObject*)", typeof(KAction), typeof(QObject), recvr, typeof(string), slot, typeof(QObject), parent);
        }
        /// <remarks>
        ///  Cut selected area and store it in the clipboard.
        ///  Calls cut() on the widget with the current focus.
        ///    </remarks>        <short>    Cut selected area and store it in the clipboard.</short>
        public static KAction Cut(QObject parent) {
            return (KAction) staticInterceptor.Invoke("cut#", "cut(QObject*)", typeof(KAction), typeof(QObject), parent);
        }
        /// <remarks>
        ///  Copy selected area and store it in the clipboard.
        ///  Calls copy() on the widget with the current focus.
        ///    </remarks>        <short>    Copy selected area and store it in the clipboard.</short>
        public static KAction Copy(QObject parent) {
            return (KAction) staticInterceptor.Invoke("copy#", "copy(QObject*)", typeof(KAction), typeof(QObject), parent);
        }
        /// <remarks>
        ///  Paste the contents of clipboard at the current mouse or cursor
        ///  Calls paste() on the widget with the current focus.
        ///    </remarks>        <short>    Paste the contents of clipboard at the current mouse or cursor  Calls paste() on the widget with the current focus.</short>
        public static KAction Paste(QObject parent) {
            return (KAction) staticInterceptor.Invoke("paste#", "paste(QObject*)", typeof(KAction), typeof(QObject), parent);
        }
        /// <remarks>
        ///  Clear selected area.  Calls clear() on the widget with the current focus.
        ///  Note that for some widgets, this may not provide the intended bahavior.  For
        ///  example if you make use of the code above and a K3ListView has the focus, clear()
        ///  will clear all of the items in the list.  If this is not the intened behavior
        ///  and you want to make use of this slot, you can subclass K3ListView and reimplement
        ///  this slot.  For example the following code would implement a K3ListView without this
        ///  behavior:
        ///  <pre>
        ///  class MyListView : public K3ListView {
        ///     public    MyListView( QWidget  parent = 0, string  name = 0, WFlags f = 0 ) {}
        ///    
        ///  public Q_SLOTS:
        ///    void clear() {}
        ///  }
        ///  </pre>
        ///    </remarks>        <short>    Clear selected area.</short>
        public static KAction Clear(QObject parent) {
            return (KAction) staticInterceptor.Invoke("clear#", "clear(QObject*)", typeof(KAction), typeof(QObject), parent);
        }
        /// <remarks>
        ///  Calls selectAll() on the widget with the current focus.
        ///    </remarks>        <short>    Calls selectAll() on the widget with the current focus.</short>
        public static KAction SelectAll(QObject parent) {
            return (KAction) staticInterceptor.Invoke("selectAll#", "selectAll(QObject*)", typeof(KAction), typeof(QObject), parent);
        }
        /// <remarks>
        ///  Cut selected area and store it in the clipboard.
        ///    </remarks>        <short>    Cut selected area and store it in the clipboard.</short>
        public static KAction Cut(QObject recvr, string slot, QObject parent) {
            return (KAction) staticInterceptor.Invoke("cut#$#", "cut(const QObject*, const char*, QObject*)", typeof(KAction), typeof(QObject), recvr, typeof(string), slot, typeof(QObject), parent);
        }
        /// <remarks>
        ///  Copy the selected area into the clipboard.
        ///    </remarks>        <short>    Copy the selected area into the clipboard.</short>
        public static KAction Copy(QObject recvr, string slot, QObject parent) {
            return (KAction) staticInterceptor.Invoke("copy#$#", "copy(const QObject*, const char*, QObject*)", typeof(KAction), typeof(QObject), recvr, typeof(string), slot, typeof(QObject), parent);
        }
        /// <remarks>
        ///  Paste the contents of clipboard at the current mouse or cursor
        ///  position.
        ///    </remarks>        <short>    Paste the contents of clipboard at the current mouse or cursor  position.</short>
        public static KAction Paste(QObject recvr, string slot, QObject parent) {
            return (KAction) staticInterceptor.Invoke("paste#$#", "paste(const QObject*, const char*, QObject*)", typeof(KAction), typeof(QObject), recvr, typeof(string), slot, typeof(QObject), parent);
        }
        /// <remarks>
        ///  Paste the contents of clipboard at the current mouse or cursor
        ///  position. Provide a button on the toolbar with the clipboard history
        ///  menu if Klipper is running.
        ///    </remarks>        <short>    Paste the contents of clipboard at the current mouse or cursor  position.</short>
        public static KAction PasteText(QObject recvr, string slot, QObject parent) {
            return (KAction) staticInterceptor.Invoke("pasteText#$#", "pasteText(const QObject*, const char*, QObject*)", typeof(KAction), typeof(QObject), recvr, typeof(string), slot, typeof(QObject), parent);
        }
        /// <remarks>
        ///  Clear the content of the focus widget
        ///    </remarks>        <short>    Clear the content of the focus widget    </short>
        public static KAction Clear(QObject recvr, string slot, QObject parent) {
            return (KAction) staticInterceptor.Invoke("clear#$#", "clear(const QObject*, const char*, QObject*)", typeof(KAction), typeof(QObject), recvr, typeof(string), slot, typeof(QObject), parent);
        }
        /// <remarks>
        ///  Select all elements in the current document.
        ///    </remarks>        <short>    Select all elements in the current document.</short>
        public static KAction SelectAll(QObject recvr, string slot, QObject parent) {
            return (KAction) staticInterceptor.Invoke("selectAll#$#", "selectAll(const QObject*, const char*, QObject*)", typeof(KAction), typeof(QObject), recvr, typeof(string), slot, typeof(QObject), parent);
        }
        /// <remarks>
        ///  Deselect any selected elements in the current document.
        ///    </remarks>        <short>    Deselect any selected elements in the current document.</short>
        public static KAction Deselect(QObject recvr, string slot, QObject parent) {
            return (KAction) staticInterceptor.Invoke("deselect#$#", "deselect(const QObject*, const char*, QObject*)", typeof(KAction), typeof(QObject), recvr, typeof(string), slot, typeof(QObject), parent);
        }
        /// <remarks>
        ///  Initiate a 'find' request in the current document.
        ///    </remarks>        <short>    Initiate a 'find' request in the current document.</short>
        public static KAction Find(QObject recvr, string slot, QObject parent) {
            return (KAction) staticInterceptor.Invoke("find#$#", "find(const QObject*, const char*, QObject*)", typeof(KAction), typeof(QObject), recvr, typeof(string), slot, typeof(QObject), parent);
        }
        /// <remarks>
        ///  Find the next instance of a stored 'find'.
        ///    </remarks>        <short>    Find the next instance of a stored 'find'.</short>
        public static KAction FindNext(QObject recvr, string slot, QObject parent) {
            return (KAction) staticInterceptor.Invoke("findNext#$#", "findNext(const QObject*, const char*, QObject*)", typeof(KAction), typeof(QObject), recvr, typeof(string), slot, typeof(QObject), parent);
        }
        /// <remarks>
        ///  Find a previous instance of a stored 'find'.
        ///    </remarks>        <short>    Find a previous instance of a stored 'find'.</short>
        public static KAction FindPrev(QObject recvr, string slot, QObject parent) {
            return (KAction) staticInterceptor.Invoke("findPrev#$#", "findPrev(const QObject*, const char*, QObject*)", typeof(KAction), typeof(QObject), recvr, typeof(string), slot, typeof(QObject), parent);
        }
        /// <remarks>
        ///  Find and replace matches.
        ///    </remarks>        <short>    Find and replace matches.</short>
        public static KAction Replace(QObject recvr, string slot, QObject parent) {
            return (KAction) staticInterceptor.Invoke("replace#$#", "replace(const QObject*, const char*, QObject*)", typeof(KAction), typeof(QObject), recvr, typeof(string), slot, typeof(QObject), parent);
        }
        /// <remarks>
        ///  View the document at its actual size.
        ///    </remarks>        <short>    View the document at its actual size.</short>
        public static KAction ActualSize(QObject recvr, string slot, QObject parent) {
            return (KAction) staticInterceptor.Invoke("actualSize#$#", "actualSize(const QObject*, const char*, QObject*)", typeof(KAction), typeof(QObject), recvr, typeof(string), slot, typeof(QObject), parent);
        }
        /// <remarks>
        ///  Fit the document view to the size of the current window.
        ///    </remarks>        <short>    Fit the document view to the size of the current window.</short>
        public static KAction FitToPage(QObject recvr, string slot, QObject parent) {
            return (KAction) staticInterceptor.Invoke("fitToPage#$#", "fitToPage(const QObject*, const char*, QObject*)", typeof(KAction), typeof(QObject), recvr, typeof(string), slot, typeof(QObject), parent);
        }
        /// <remarks>
        ///  Fit the document view to the width of the current window.
        ///    </remarks>        <short>    Fit the document view to the width of the current window.</short>
        public static KAction FitToWidth(QObject recvr, string slot, QObject parent) {
            return (KAction) staticInterceptor.Invoke("fitToWidth#$#", "fitToWidth(const QObject*, const char*, QObject*)", typeof(KAction), typeof(QObject), recvr, typeof(string), slot, typeof(QObject), parent);
        }
        /// <remarks>
        ///  Fit the document view to the height of the current window.
        ///    </remarks>        <short>    Fit the document view to the height of the current window.</short>
        public static KAction FitToHeight(QObject recvr, string slot, QObject parent) {
            return (KAction) staticInterceptor.Invoke("fitToHeight#$#", "fitToHeight(const QObject*, const char*, QObject*)", typeof(KAction), typeof(QObject), recvr, typeof(string), slot, typeof(QObject), parent);
        }
        /// <remarks>
        ///  Zoom in.
        ///    </remarks>        <short>    Zoom in.</short>
        public static KAction ZoomIn(QObject recvr, string slot, QObject parent) {
            return (KAction) staticInterceptor.Invoke("zoomIn#$#", "zoomIn(const QObject*, const char*, QObject*)", typeof(KAction), typeof(QObject), recvr, typeof(string), slot, typeof(QObject), parent);
        }
        /// <remarks>
        ///  Zoom out.
        ///    </remarks>        <short>    Zoom out.</short>
        public static KAction ZoomOut(QObject recvr, string slot, QObject parent) {
            return (KAction) staticInterceptor.Invoke("zoomOut#$#", "zoomOut(const QObject*, const char*, QObject*)", typeof(KAction), typeof(QObject), recvr, typeof(string), slot, typeof(QObject), parent);
        }
        /// <remarks>
        ///  Popup a zoom dialog.
        ///    </remarks>        <short>    Popup a zoom dialog.</short>
        public static KAction Zoom(QObject recvr, string slot, QObject parent) {
            return (KAction) staticInterceptor.Invoke("zoom#$#", "zoom(const QObject*, const char*, QObject*)", typeof(KAction), typeof(QObject), recvr, typeof(string), slot, typeof(QObject), parent);
        }
        /// <remarks>
        ///  Redisplay or redraw the document.
        ///    </remarks>        <short>    Redisplay or redraw the document.</short>
        public static KAction Redisplay(QObject recvr, string slot, QObject parent) {
            return (KAction) staticInterceptor.Invoke("redisplay#$#", "redisplay(const QObject*, const char*, QObject*)", typeof(KAction), typeof(QObject), recvr, typeof(string), slot, typeof(QObject), parent);
        }
        /// <remarks>
        ///  Move up (web style menu).
        ///    </remarks>        <short>    Move up (web style menu).</short>
        public static KAction Up(QObject recvr, string slot, QObject parent) {
            return (KAction) staticInterceptor.Invoke("up#$#", "up(const QObject*, const char*, QObject*)", typeof(KAction), typeof(QObject), recvr, typeof(string), slot, typeof(QObject), parent);
        }
        /// <remarks>
        ///  Move back (web style menu).
        ///    </remarks>        <short>    Move back (web style menu).</short>
        public static KAction Back(QObject recvr, string slot, QObject parent) {
            return (KAction) staticInterceptor.Invoke("back#$#", "back(const QObject*, const char*, QObject*)", typeof(KAction), typeof(QObject), recvr, typeof(string), slot, typeof(QObject), parent);
        }
        /// <remarks>
        ///  Move forward (web style menu).
        ///    </remarks>        <short>    Move forward (web style menu).</short>
        public static KAction Forward(QObject recvr, string slot, QObject parent) {
            return (KAction) staticInterceptor.Invoke("forward#$#", "forward(const QObject*, const char*, QObject*)", typeof(KAction), typeof(QObject), recvr, typeof(string), slot, typeof(QObject), parent);
        }
        /// <remarks>
        ///  Go to the "Home" position or document.
        ///    </remarks>        <short>    Go to the "Home" position or document.</short>
        public static KAction Home(QObject recvr, string slot, QObject parent) {
            return (KAction) staticInterceptor.Invoke("home#$#", "home(const QObject*, const char*, QObject*)", typeof(KAction), typeof(QObject), recvr, typeof(string), slot, typeof(QObject), parent);
        }
        /// <remarks>
        ///  Scroll up one page.
        ///    </remarks>        <short>    Scroll up one page.</short>
        public static KAction Prior(QObject recvr, string slot, QObject parent) {
            return (KAction) staticInterceptor.Invoke("prior#$#", "prior(const QObject*, const char*, QObject*)", typeof(KAction), typeof(QObject), recvr, typeof(string), slot, typeof(QObject), parent);
        }
        /// <remarks>
        ///  Scroll down one page.
        ///    </remarks>        <short>    Scroll down one page.</short>
        public static KAction Next(QObject recvr, string slot, QObject parent) {
            return (KAction) staticInterceptor.Invoke("next#$#", "next(const QObject*, const char*, QObject*)", typeof(KAction), typeof(QObject), recvr, typeof(string), slot, typeof(QObject), parent);
        }
        /// <remarks>
        ///  Go to somewhere in general.
        ///    </remarks>        <short>    Go to somewhere in general.</short>
        public static KAction GoTo(QObject recvr, string slot, QObject parent) {
            return (KAction) staticInterceptor.Invoke("goTo#$#", "goTo(const QObject*, const char*, QObject*)", typeof(KAction), typeof(QObject), recvr, typeof(string), slot, typeof(QObject), parent);
        }
        /// <remarks>
        ///  Go to a specific page (dialog).
        ///    </remarks>        <short>    Go to a specific page (dialog).</short>
        public static KAction GotoPage(QObject recvr, string slot, QObject parent) {
            return (KAction) staticInterceptor.Invoke("gotoPage#$#", "gotoPage(const QObject*, const char*, QObject*)", typeof(KAction), typeof(QObject), recvr, typeof(string), slot, typeof(QObject), parent);
        }
        /// <remarks>
        ///  Go to a specific line (dialog).
        ///    </remarks>        <short>    Go to a specific line (dialog).</short>
        public static KAction GotoLine(QObject recvr, string slot, QObject parent) {
            return (KAction) staticInterceptor.Invoke("gotoLine#$#", "gotoLine(const QObject*, const char*, QObject*)", typeof(KAction), typeof(QObject), recvr, typeof(string), slot, typeof(QObject), parent);
        }
        /// <remarks>
        ///  Jump to the first page.
        ///    </remarks>        <short>    Jump to the first page.</short>
        public static KAction FirstPage(QObject recvr, string slot, QObject parent) {
            return (KAction) staticInterceptor.Invoke("firstPage#$#", "firstPage(const QObject*, const char*, QObject*)", typeof(KAction), typeof(QObject), recvr, typeof(string), slot, typeof(QObject), parent);
        }
        /// <remarks>
        ///  Jump to the last page.
        ///    </remarks>        <short>    Jump to the last page.</short>
        public static KAction LastPage(QObject recvr, string slot, QObject parent) {
            return (KAction) staticInterceptor.Invoke("lastPage#$#", "lastPage(const QObject*, const char*, QObject*)", typeof(KAction), typeof(QObject), recvr, typeof(string), slot, typeof(QObject), parent);
        }
        /// <remarks>
        ///  Move back (document style menu).
        ///    </remarks>        <short>    Move back (document style menu).</short>
        public static KAction DocumentBack(QObject recvr, string slot, QObject parent) {
            return (KAction) staticInterceptor.Invoke("documentBack#$#", "documentBack(const QObject*, const char*, QObject*)", typeof(KAction), typeof(QObject), recvr, typeof(string), slot, typeof(QObject), parent);
        }
        /// <remarks>
        ///  Move forward (document style menu).
        ///    </remarks>        <short>    Move forward (document style menu).</short>
        public static KAction DocumentForward(QObject recvr, string slot, QObject parent) {
            return (KAction) staticInterceptor.Invoke("documentForward#$#", "documentForward(const QObject*, const char*, QObject*)", typeof(KAction), typeof(QObject), recvr, typeof(string), slot, typeof(QObject), parent);
        }
        /// <remarks>
        ///  Add the current page to the bookmarks tree.
        ///    </remarks>        <short>    Add the current page to the bookmarks tree.</short>
        public static KAction AddBookmark(QObject recvr, string slot, QObject parent) {
            return (KAction) staticInterceptor.Invoke("addBookmark#$#", "addBookmark(const QObject*, const char*, QObject*)", typeof(KAction), typeof(QObject), recvr, typeof(string), slot, typeof(QObject), parent);
        }
        /// <remarks>
        ///  Edit the application bookmarks.
        ///    </remarks>        <short>    Edit the application bookmarks.</short>
        public static KAction EditBookmarks(QObject recvr, string slot, QObject parent) {
            return (KAction) staticInterceptor.Invoke("editBookmarks#$#", "editBookmarks(const QObject*, const char*, QObject*)", typeof(KAction), typeof(QObject), recvr, typeof(string), slot, typeof(QObject), parent);
        }
        /// <remarks>
        ///  Pop up the spell checker.
        ///    </remarks>        <short>    Pop up the spell checker.</short>
        public static KAction Spelling(QObject recvr, string slot, QObject parent) {
            return (KAction) staticInterceptor.Invoke("spelling#$#", "spelling(const QObject*, const char*, QObject*)", typeof(KAction), typeof(QObject), recvr, typeof(string), slot, typeof(QObject), parent);
        }
        /// <remarks>
        ///  Show/Hide the menubar.
        ///    </remarks>        <short>    Show/Hide the menubar.</short>
        public static KToggleAction ShowMenubar(QObject recvr, string slot, QObject parent) {
            return (KToggleAction) staticInterceptor.Invoke("showMenubar#$#", "showMenubar(const QObject*, const char*, QObject*)", typeof(KToggleAction), typeof(QObject), recvr, typeof(string), slot, typeof(QObject), parent);
        }
        /// <remarks>
        ///  Show/Hide the statusbar.
        ///    </remarks>        <short>    Show/Hide the statusbar.</short>
        public static KToggleAction ShowStatusbar(QObject recvr, string slot, QObject parent) {
            return (KToggleAction) staticInterceptor.Invoke("showStatusbar#$#", "showStatusbar(const QObject*, const char*, QObject*)", typeof(KToggleAction), typeof(QObject), recvr, typeof(string), slot, typeof(QObject), parent);
        }
        /// <remarks>
        ///  Switch to/from full screen mode
        ///    </remarks>        <short>    Switch to/from full screen mode    </short>
        public static KToggleFullScreenAction FullScreen(QObject recvr, string slot, QWidget window, QObject parent) {
            return (KToggleFullScreenAction) staticInterceptor.Invoke("fullScreen#$##", "fullScreen(const QObject*, const char*, QWidget*, QObject*)", typeof(KToggleFullScreenAction), typeof(QObject), recvr, typeof(string), slot, typeof(QWidget), window, typeof(QObject), parent);
        }
        /// <remarks>
        ///  Display the save options dialog.
        ///    </remarks>        <short>    Display the save options dialog.</short>
        public static KAction SaveOptions(QObject recvr, string slot, QObject parent) {
            return (KAction) staticInterceptor.Invoke("saveOptions#$#", "saveOptions(const QObject*, const char*, QObject*)", typeof(KAction), typeof(QObject), recvr, typeof(string), slot, typeof(QObject), parent);
        }
        /// <remarks>
        ///  Display the configure key bindings dialog.
        ///   Note that you might be able to use the pre-built KXMLGUIFactory's function:
        ///   KStandardAction.KeyBindings(guiFactory(), SLOT("configureShortcuts()"), actionCollection());
        ///    </remarks>        <short>    Display the configure key bindings dialog.</short>
        public static KAction KeyBindings(QObject recvr, string slot, QObject parent) {
            return (KAction) staticInterceptor.Invoke("keyBindings#$#", "keyBindings(const QObject*, const char*, QObject*)", typeof(KAction), typeof(QObject), recvr, typeof(string), slot, typeof(QObject), parent);
        }
        /// <remarks>
        ///  Display the preferences/options dialog.
        ///    </remarks>        <short>    Display the preferences/options dialog.</short>
        public static KAction Preferences(QObject recvr, string slot, QObject parent) {
            return (KAction) staticInterceptor.Invoke("preferences#$#", "preferences(const QObject*, const char*, QObject*)", typeof(KAction), typeof(QObject), recvr, typeof(string), slot, typeof(QObject), parent);
        }
        /// <remarks>
        ///  The Customize Toolbar dialog.
        ///    </remarks>        <short>    The Customize Toolbar dialog.</short>
        public static KAction ConfigureToolbars(QObject recvr, string slot, QObject parent) {
            return (KAction) staticInterceptor.Invoke("configureToolbars#$#", "configureToolbars(const QObject*, const char*, QObject*)", typeof(KAction), typeof(QObject), recvr, typeof(string), slot, typeof(QObject), parent);
        }
        /// <remarks>
        ///  The Configure Notifications dialog.
        ///    </remarks>        <short>    The Configure Notifications dialog.</short>
        public static KAction ConfigureNotifications(QObject recvr, string slot, QObject parent) {
            return (KAction) staticInterceptor.Invoke("configureNotifications#$#", "configureNotifications(const QObject*, const char*, QObject*)", typeof(KAction), typeof(QObject), recvr, typeof(string), slot, typeof(QObject), parent);
        }
        /// <remarks>
        ///  Display the help.
        ///    </remarks>        <short>    Display the help.</short>
        public static KAction Help(QObject recvr, string slot, QObject parent) {
            return (KAction) staticInterceptor.Invoke("help#$#", "help(const QObject*, const char*, QObject*)", typeof(KAction), typeof(QObject), recvr, typeof(string), slot, typeof(QObject), parent);
        }
        /// <remarks>
        ///  Display the help contents.
        ///    </remarks>        <short>    Display the help contents.</short>
        public static KAction HelpContents(QObject recvr, string slot, QObject parent) {
            return (KAction) staticInterceptor.Invoke("helpContents#$#", "helpContents(const QObject*, const char*, QObject*)", typeof(KAction), typeof(QObject), recvr, typeof(string), slot, typeof(QObject), parent);
        }
        /// <remarks>
        ///  Trigger the What's This cursor.
        ///    </remarks>        <short>    Trigger the What's This cursor.</short>
        public static KAction WhatsThis(QObject recvr, string slot, QObject parent) {
            return (KAction) staticInterceptor.Invoke("whatsThis#$#", "whatsThis(const QObject*, const char*, QObject*)", typeof(KAction), typeof(QObject), recvr, typeof(string), slot, typeof(QObject), parent);
        }
        /// <remarks>
        ///  Display "Tip of the Day"
        ///    </remarks>        <short>    Display "Tip of the Day"    </short>
        public static KAction TipOfDay(QObject recvr, string slot, QObject parent) {
            return (KAction) staticInterceptor.Invoke("tipOfDay#$#", "tipOfDay(const QObject*, const char*, QObject*)", typeof(KAction), typeof(QObject), recvr, typeof(string), slot, typeof(QObject), parent);
        }
        /// <remarks>
        ///  Open up the Report Bug dialog.
        ///    </remarks>        <short>    Open up the Report Bug dialog.</short>
        public static KAction ReportBug(QObject recvr, string slot, QObject parent) {
            return (KAction) staticInterceptor.Invoke("reportBug#$#", "reportBug(const QObject*, const char*, QObject*)", typeof(KAction), typeof(QObject), recvr, typeof(string), slot, typeof(QObject), parent);
        }
        /// <remarks>
        ///  Display the application's About box.
        ///    </remarks>        <short>    Display the application's About box.</short>
        public static KAction AboutApp(QObject recvr, string slot, QObject parent) {
            return (KAction) staticInterceptor.Invoke("aboutApp#$#", "aboutApp(const QObject*, const char*, QObject*)", typeof(KAction), typeof(QObject), recvr, typeof(string), slot, typeof(QObject), parent);
        }
        /// <remarks>
        ///  Display the About KDE dialog.
        ///    </remarks>        <short>    Display the About KDE dialog.</short>
        public static KAction AboutKDE(QObject recvr, string slot, QObject parent) {
            return (KAction) staticInterceptor.Invoke("aboutKDE#$#", "aboutKDE(const QObject*, const char*, QObject*)", typeof(KAction), typeof(QObject), recvr, typeof(string), slot, typeof(QObject), parent);
        }
    }
}
